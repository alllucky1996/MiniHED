<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyCaffe.gym.python</name>
    </assembly>
    <members>
        <member name="T:MyCaffe.gym.python.MyCaffePythonGym">
            <summary>
            The MyCaffePythonGym class provides a simple interface that can easily be used from within Python.
            </summary>
            <remarks>
            To use within Python first install the PythonNet package with the command:
            <code>
              pip install pythonnet
            </code>
            
            Next, from within python use the following code to access the MyCaffePythonGym.
            <code>
            import clr
            clr.AddReference('path\\MyCaffe.gym.python.dll')
            from MyCaffe.gym.python import *
            
            gym = MyCaffePythonGym()
            gym.Initialize('ATARI', 'FrameSkip=4;GameROM=C:\\Program~Files\\SignalPop\\AI~Designer\\roms\\pong.bin')
            gym.OpenUi()
            gym.Step(action, 1)
            gym.CloseUi();
            </code>
            
            NOTE: Using the OpenUi function requires that a UI service host is already running.  The MyCaffe Test Application
            automatically provides a service host - just run this application before running your Python script and
            the test application will then handle the user interface display.
            
            To get the latest MyCaffe Test Application, see https://github.com/MyCaffe/MyCaffe/releases
            </remarks>
        </member>
        <member name="M:MyCaffe.gym.python.MyCaffePythonGym.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.gym.python.MyCaffePythonGym.Dispose">
            <summary>
            Release resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.gym.python.MyCaffePythonGym.Initialize(System.String,System.String)">
            <summary>
            The Initialize method loads the gym specified.
            </summary>
            <param name="strGym">Specifies the name of the gym to load.</param>
            <param name="strParam">Specifies the semi-colon separated parameters passed to the gym.</param>
            <returns>0 is returned on success.</returns>
            <remarks>
            The following gyms are supported: 'ATARI', 'Cart-Pole'
            </remarks>
        </member>
        <member name="P:MyCaffe.gym.python.MyCaffePythonGym.Name">
            <summary>
            Returns the name of the gym.
            </summary>
        </member>
        <member name="M:MyCaffe.gym.python.MyCaffePythonGym.SetActionDistributions(System.Double[][])">
            <summary>
            Set the action distribution for display.
            </summary>
            <param name="rgrg">Specifies the action distribution data where a distribution is provided per action.</param>
        </member>
        <member name="P:MyCaffe.gym.python.MyCaffePythonGym.Actions">
            <summary>
            Returns the action values
            </summary>
        </member>
        <member name="P:MyCaffe.gym.python.MyCaffePythonGym.ActionNames">
            <summary>
            Returns the action names
            </summary>
        </member>
        <member name="P:MyCaffe.gym.python.MyCaffePythonGym.IsTerminal">
            <summary>
            Returns the terminal state from the last state.
            </summary>
        </member>
        <member name="P:MyCaffe.gym.python.MyCaffePythonGym.Reward">
            <summary>
            Returns the reward from the last state.
            </summary>
        </member>
        <member name="P:MyCaffe.gym.python.MyCaffePythonGym.Data">
            <summary>
            Returns the data from the last state.
            </summary>
        </member>
        <member name="M:MyCaffe.gym.python.MyCaffePythonGym.GetDataAs3D(System.Boolean,System.Double,MyCaffe.basecode.SimpleDatum)">
            <summary>
            Returns the data int a 3D form compatible with CV2.
            </summary>
            <param name="bGrayscale">Optionally, specifies to return gray scale data (one channel).</param>
            <param name="dfScale">Optionally, specifies the scale to apply to each item.</param>
            <param name="sd">Optionally, specifies the data.</param>
            <returns>The data is returned as a multi-dimensional array.</returns>
        </member>
        <member name="M:MyCaffe.gym.python.MyCaffePythonGym.GetDataAsStacked3D(System.Boolean,System.Int32,System.Int32,System.Boolean,System.Double)">
            <summary>
            Returns stacked data in a 3D form compatible with CV2.
            </summary>
            <param name="bReset">Specifies to reset the stack or not.</param>
            <param name="nFrames">Optionally, specifies the number of frames (default = 4).</param>
            <param name="nStacks">Optionally, specifies the number of stacks (default = 4).</param>
            <param name="bGrayscale">Optionally, specifies to return gray scale data (default = true, one channel).</param>
            <param name="dfScale">Optionally, specifies the scale to apply to each item (default = 1.0).</param>
            <returns>The data is returned as a multi-dimensional array.</returns>
        </member>
        <member name="M:MyCaffe.gym.python.MyCaffePythonGym.Reset">
            <summary>
            Resets the gym to its initial state.
            </summary>
            <returns>A tuple containing a double[] with the data, a double with the reward and a bool with the terminal state is returned.</returns>
        </member>
        <member name="M:MyCaffe.gym.python.MyCaffePythonGym.Step(System.Int32,System.Int32)">
            <summary>
            Steps the gym one or more steps with a given action.
            </summary>
            <param name="nAction">Specifies the action to run.</param>
            <param name="nSteps">Specifies the number of steps to run the action.</param>
            <returns>A tuple containing a double[] with the data, a double with the reward and a bool with the terminal state is returned.</returns>
        </member>
        <member name="M:MyCaffe.gym.python.MyCaffePythonGym.GetDataset(MyCaffe.basecode.DATA_TYPE)">
            <summary>
            Returns the dataset descriptor of the Gym.
            </summary>
            <param name="type">Specifies the dataset type.</param>
            <returns>The DatasetDescriptor for the Gym is returned.</returns>
        </member>
        <member name="M:MyCaffe.gym.python.MyCaffePythonGym.OpenUi">
            <summary>
            The OpenUi method opens the user interface to visualize the gym as it progresses.
            </summary>
        </member>
        <member name="M:MyCaffe.gym.python.MyCaffePythonGym.CloseUi">
            <summary>
            The CloseUi method closes the user interface if it is open.
            </summary>
        </member>
        <member name="M:MyCaffe.gym.python.MyCaffePythonGym.Closing">
            <summary>
            The Closing method is a call-back method called when the gym closes.
            </summary>
        </member>
        <member name="T:MyCaffe.gym.python.CurrentState">
            <summary>
            The State contains the current state of the gym.
            </summary>
        </member>
        <member name="M:MyCaffe.gym.python.CurrentState.#ctor(System.Double[],System.Double,System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="rgData">Specifies the data.</param>
            <param name="dfReward">Specifies the reward.</param>
            <param name="bTerminal">Specifies whether or not the state is terminal.</param>
        </member>
        <member name="P:MyCaffe.gym.python.CurrentState.Data">
            <summary>
            Returns the data.
            </summary>
        </member>
        <member name="P:MyCaffe.gym.python.CurrentState.Reward">
            <summary>
            Returns the reward.
            </summary>
        </member>
        <member name="P:MyCaffe.gym.python.CurrentState.Terminal">
            <summary>
            Returns whether or not the state is terminal or not.
            </summary>
        </member>
    </members>
</doc>
