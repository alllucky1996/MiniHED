<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyCaffe.model</name>
    </assembly>
    <members>
        <member name="T:MyCaffe.model.ModelBuilder">
            <summary>
            The ModelBuilder is an abstract class that is overridden by a base class used to programically build new models.
            </summary>
        </member>
        <member name="F:MyCaffe.model.ModelBuilder.m_strBaseDir">
            <summary>
            Specifies the base directory that contains the data and models.
            </summary>
        </member>
        <member name="F:MyCaffe.model.ModelBuilder.m_net">
            <summary>
            Specifies the base net to be altered.
            </summary>
        </member>
        <member name="F:MyCaffe.model.ModelBuilder.m_solver">
            <summary>
            Specifies the base solver to use.
            </summary>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.#ctor(System.String,MyCaffe.param.NetParameter,MyCaffe.param.SolverParameter)">
            <summary>
            The constructor.
            </summary>
            <param name="strBaseDir">Specifies the base directory that contains the data and models.</param>
            <param name="net">Optionally, specifies the 'base' net parameter that is to be altered (default = null).</param>
            <param name="solver">Optionally, specifies the 'base' solver parameter to use (default = null).</param>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.CreateSolver">
            <summary>
            Create the base solver to use.
            </summary>
            <returns>
            The solver parameter created is returned.
            </returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.CreateModel(System.Boolean)">
            <summary>
            Create the training/testing/deploy model to use.
            </summary>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.CreateDeployModel">
            <summary>
            Create the deploy model to use.
            </summary>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.getFileName(System.String,System.String)">
            <summary>
            Returns the full path of the filename using the base directory original set when creating the ModelBuilder.
            </summary>
            <param name="strFile">Specifies the partial path of the file.</param>
            <param name="strSubDir">Specifies the sub-directory off the path (or null for none).</param>
            <returns>The full path of the file is returned.</returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.addExtraLayers(System.Boolean,System.Double)">
            <summary>
            Add extra layers on top of a 'base' network (e.g. VGGNet or Inception)
            </summary>
            <param name="bUseBatchNorm">Optionally, specifies whether or not to use batch normalization layers (default = <i>true</i>).</param>
            <param name="dfLrMult">Optionally, specifies the learning rate multiplier (default = 1.0).</param>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.findLayer(System.String)">
            <summary>
            Find a layer with a given name.
            </summary>
            <param name="strName">Specifies the name of the layer to find.</param>
            <returns>The layer parameter of the layer with the specified name is returned.</returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.createNet(System.String)">
            <summary>
            Create the base network parameter for the model and set its name to the 'm_strModel' name.
            </summary>
            <param name="strName">Specifies the model name.</param>
            <returns>The NetParameter created is returned.</returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.addDataLayer(System.String,MyCaffe.basecode.Phase,System.Int32,System.Boolean,MyCaffe.param.TransformationParameter,System.String,System.Boolean)">
            <summary>
            Add the Data layer.
            </summary>
            <param name="strSource">Specifies the data source.</param>
            <param name="phase">Specifies the phase under which to run the layer (e.g. TRAIN, TEST, RUN).</param>
            <param name="nBatchSize">Optionally, specifies the batch size (default = 32).</param>
            <param name="bOutputLabel">Optionally, specifies whether or not to output the label (default = true).</param>
            <param name="transform">Optionally, specifies the transformation parameter (default = null, ignored).</param>
            <param name="strName">Optionally, specifies a name for the layer and data top name (default = "data").</param>
            <param name="bSiamese">Optionally, specifies to add data layers for a Siamese net (default = false).</param>
            <returns>The Data layer is retunred after it is added to the network.</returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.addAnnotatedDataLayer(System.String,MyCaffe.basecode.Phase,System.Int32,System.Boolean,System.String,MyCaffe.basecode.SimpleDatum.ANNOTATION_TYPE,MyCaffe.param.TransformationParameter,System.Collections.Generic.List{MyCaffe.param.ssd.BatchSampler})">
            <summary>
            Add the Annotated Data layer.
            </summary>
            <param name="strSource">Specifies the data source.</param>
            <param name="phase">Specifies the phase under which to run the layer (e.g. TRAIN, TEST, RUN).</param>
            <param name="nBatchSize">Optionally, specifies the batch size (default = 32).</param>
            <param name="bOutputLabel">Optionally, specifies whether or not to output the label (default = true).</param>
            <param name="strLabelMapFile">Optionally, specifies the label file (default = "").</param>
            <param name="anno_type">Optionally, specifies the annotation type (default = NONE).</param>
            <param name="transform">Optionally, specifies the transformation parameter (default = null, ignored).</param>
            <param name="rgSampler">Optionally, specifies the list of batch samplers (default = null, ignored).</param>
            <returns>The annotated data layer is retunred after it is added to the network.</returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.createMultiBoxHead(MyCaffe.param.LayerParameter,System.Int32,System.Collections.Generic.List{MyCaffe.model.MultiBoxHeadInfo},System.Collections.Generic.List{System.Single},System.Boolean,System.Boolean,System.Double,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Create the multi-box head layers.
            </summary>
            <param name="data">Specifies the data layer.</param>
            <param name="nNumClasses">Specifies the number of classes.</param>
            <param name="rgInfo">Specifies the info associated with the layers to connect to.</param>
            <param name="rgPriorVariance">Specifies the prior variance.</param>
            <param name="bUseObjectness">Optionally, specifies whether or not to use objectness (default = false).</param>
            <param name="bUseBatchNorm">Optionally, specifies whether or not to use batch-norm layers (default = true).</param>
            <param name="dfLrMult">Optionally, specifies the learning multiplier (default = 1.0).</param>
            <param name="bUseScale">Optionally, specifies whether or not to use scale layers (default = true).</param>
            <param name="nImageHt">Optionally, specifies the image height (default = 0, ignore).</param>
            <param name="nImageWd">Optionally, specifies the image width (default = 0, ignore).</param>
            <param name="bShareLocation">Optionally, specifies whether or not to share the location (default = true).</param>
            <param name="bFlip">Optionally, specifies whether or not to flip (default = true).</param>
            <param name="bClip">Optionally, specifies whether or not to clip (default = true).</param>
            <param name="dfOffset">Optionally, specifies the offset (default = 0.5).</param>
            <param name="nKernelSize">Optionally, specifies the kernel size (default = 1).</param>
            <param name="nPad">Optionally, specifies the pad (default = 0).</param>
            <param name="strConfPostfix">Optionally, specifies the confidence postfix (default = "").</param>
            <param name="strLocPostfix">Optionally, specifies the location postifix (default = "").</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.addConvBNLayer(System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,MyCaffe.basecode.Phase)">
            <summary>
            Add convolution, batch-norm layers.
            </summary>
            <param name="strInputLayer">Specifies the input layer.</param>
            <param name="strOutputLayer">Specifies the output layer.</param>
            <param name="bUseBatchNorm">Optionally, specifies whether or not to use a batch-norm layer.</param>
            <param name="bUseRelU">Specifies whether or not to add a RelU layer.</param>
            <param name="nNumOutput">Specifies the number of output.</param>
            <param name="nKernelSize">Specifies the kernel size.</param>
            <param name="nPad">Specifies the pad.</param>
            <param name="nStride">Specifies the stride.</param>
            <param name="dfLrMult">Optionally, specifies the default learning rate multiplier (default = 1.0).</param>
            <param name="nDilation">Optionally, specifies the dilation (default = 1).</param>
            <param name="bUseScale">Optionally, specifies whether or not to use a ScaleLayer (default = true).</param>
            <param name="strConvPrefix">Optionally, specifies the convolution layer name prefix (default = "").</param>
            <param name="strConvPostfix">Optionally, specifies the convolution layer name postfix (default = "").</param>
            <param name="strBnPrefix">Optionally, specifies the batch-norm layer name prefix (default = "").</param>
            <param name="strBnPostfix">Optionally, specifies the batch-norm layer name postfix (default = "_bn").</param>
            <param name="strScalePrefix">Optionally, specifies the scale layer name prefix (default = "").</param>
            <param name="strScalePostFix">Optionally, specifies the scale layer name postfix (default = "_scale")</param>
            <param name="strBiasPrefix">Optionally, specifies the bias layer name prefix (default = "").</param>
            <param name="strBiasPostfix">Optionally, specifies the bias layer name postfix (default = "_bias").</param>
            <param name="bNamedParams">Optionally, specifies to name the parameters (default = false).</param>
            <param name="strLayerPostfix">Optionally, specifies a layer name postfix (default = "").</param>
            <param name="phaseExclude">Optionally, specifies a phase to exclude (default = NONE).</param>
            <returns>The last layer added is returned.</returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.connectAndAddLayer(System.String,MyCaffe.param.LayerParameter)">
            <summary>
            Connect the from layer to the 'to' layer.
            </summary>
            <param name="fromLayer">Specifies the layer bottom to connect to the toLayer's top.</param>
            <param name="toLayer">Specifies the layer who's top is connected to the from layer's bottom.</param>
            <returns>The toLayer is returned as the next layer.</returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.connectAndAddLayer(MyCaffe.param.LayerParameter,MyCaffe.param.LayerParameter,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Connect the from layer to the 'to' layer.
            </summary>
            <param name="fromLayer">Specifies the layer who's bottom is connected to the toLayer's top.</param>
            <param name="toLayer">Specifies the layer who's top is connected to the from layer's bottom.</param>
            <param name="bInPlace">Optionally, specifies whether or not to connect both the top and bottom of the toLayer to the top of the from layer.</param>
            <param name="bAdd">Optionally, specifies whether or not to add the layer to the network (default = true).</param>
            <param name="nTopIdx">Optionally, specifies the top index of the item to connect.</param>
            <returns>The toLayer is returned as the next layer.</returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.connectAndAddLayer(System.Collections.Generic.List{MyCaffe.param.LayerParameter},MyCaffe.param.LayerParameter,System.Boolean)">
            <summary>
            Connect the from layer to the 'to' layer.
            </summary>
            <param name="rgFromLayer">Specifies a list of layers who's bottoms are connected to the toLayer's top.</param>
            <param name="toLayer">Specifies the layer who's top is connected to the from layer's bottom.</param>
            <param name="bAdd">Optionally, specifies whether or not to add the layer to the network (default = true).</param>
            <returns>The toLayer is returned as the next layer.</returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.createConvolution(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new convolution layer parameter.
            </summary>
            <param name="strName">Specifies the layer name.</param>
            <param name="nNumOutput">Specifies the number of output.</param>
            <param name="nKernelSize">Specifies the kernel size.</param>
            <param name="nPad">Optionally, specifies the pad (default = 0).</param>
            <param name="nStride">Optionally, specifies the stride (default = 1).</param>
            <param name="nDilation">Optionally, specifies the dilation (default = 1).</param>
            <returns>The convolution layer parameter is returned.</returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.createPooling(System.String,MyCaffe.param.PoolingParameter.PoolingMethod,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new pooling layer parameter.
            </summary>
            <param name="strName">Specifies the layer name.</param>
            <param name="method">Specifies the pooling method.</param>
            <param name="nKernelSize">Specifies the kernel size.</param>
            <param name="nPad">Optionally, specifies the pad (default = 0).</param>
            <param name="nStride">Optionally, specifies the stride (default = 1).</param>
            <returns>The pooling layer parameter is returned.</returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.addVGGBlock(MyCaffe.param.LayerParameter,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.Boolean},System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a new VGG block.
            </summary>
            <param name="lastLayer">Specifies the last layer that this block is to be connected to.</param>
            <param name="nBlockIdx">Specifies the block index.</param>
            <param name="nConvIdx">Specifies the convolution index.</param>
            <param name="nNumOutput">Specifies the number of outputs.</param>
            <param name="nConvCount">Specifies the number of convolution layers to add.</param>
            <param name="bNoPool">When adding the last layer, specifies whether or not to add a pooling (false) or convolution (true) layer.  When this parameter is null, the adding of the last layer is skipped.</param>
            <param name="bDilatePool">Optionally, specifies whether or not to dilate the last pooling layer (default = false).</param>
            <param name="nKernelSize">Optionally, specifies the kernel size (default = 3).</param>
            <param name="nPad">Optionally, specifies the pad (default = 1).</param>
            <param name="nStride">Optionally, specifies the stride (default = 1).</param>
            <param name="nDilation">Optionally, specifies the dilation (default = 1).</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.addVGGfc(MyCaffe.param.LayerParameter,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds the final layers to the network.
            </summary>
            <param name="lastLayer">Specifies the previous layer to connect the last layers to.</param>
            <param name="nBlockIdx">Specifies the block index.</param>
            <param name="nConvIdx">Specifies the convolution index.</param>
            <param name="nNumOutput">Specifies the number of outputs for the convolution layers.</param>
            <param name="nDilation">Specifies the dilation to use for the last fully connected convolution layers (used when bFullConv = true).</param>
            <param name="bDilated">Specifies whether or not dialation is used.</param>
            <param name="bNoPool">Specifies whether or not pooling is used.</param>
            <param name="bFullConv">Specifies whether or not full convolution layers are used instead of inner product layers.</param>
            <param name="bReduced">Specifies whether or not the final layers are used to reduce the data.</param>
            <param name="bDropout">Specifies whether or not dropout layers are connected.</param>
            <returns>The last layer is returned.</returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.addVGGNetBody(MyCaffe.param.LayerParameter,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Adds the full VGG body to the network, connecting it to the 'lastLayer'.
            </summary>
            <param name="lastLayer">Specifies the layer to connect the VGG net to.</param>
            <param name="bNeedFc">Optionally, specifies whether or not to add the fully connected end layers (default = true).</param>
            <param name="bFullConv">Optionally, specifies whether or not full convolution layers are used instead of inner product layers (default = true).</param>
            <param name="bReduced">Optionally, specifies whether or not the final layers are used to reduce the data (default = true).</param>
            <param name="bDilated">Optionally, specifies whether or not dialation is used (default = true).</param>
            <param name="bNoPool">Optionally, specifies whether or not pooling is used (default = false, use pooling).</param>
            <param name="bDropout">Optionally, specifies whether or not dropout layers are connected (default = false).</param>
            <param name="rgstrFreezeLayers">Optionally, specifies a set of layers who's training is to be frozen (default = null to ignore).</param>
            <param name="bDilatePool4">Optionally, specifies whether or not to dilate pool #4 (default = false).</param>
            <returns>The last layer is returned.</returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.addResBody(MyCaffe.param.LayerParameter,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean,System.String,MyCaffe.basecode.Phase)">
            <summary>
            Adds a ResNet body to the network, connecting it to the 'lastLayer'.
            </summary>
            <param name="lastLayer">Specifies the layer to connect the ResNet net to.</param>
            <param name="strBlockName">Specifies the block name.</param>
            <param name="nOut2A">Specifies the output of the first branch.</param>
            <param name="nOut2B">Specifies the output of the second branch.</param>
            <param name="nOut2C">Specifies the output of the third branch.</param>
            <param name="nStride">Specifies the stride used in the first branch.</param>
            <param name="bUseBranch1">Specifies whether or not to use the first branch.</param>
            <param name="nDilation">Specifies the dilation used in all branches.</param>
            <param name="bNamedParams">Optionally, specifies to name the parameters (default = false).</param>
            <param name="strLayerPostfix">Optionally, specifies a layer name postfix (default = "").</param>
            <param name="phaseExclude">Optionally, specifies a phase to exclude (default = NONE).</param>
            <returns>The last layer added is returned.</returns>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.addExclusion(MyCaffe.param.LayerParameter,MyCaffe.basecode.Phase)">
            <summary>
            Add a phase exclusion.
            </summary>
            <param name="p">Specifies the layer parameter to alter.</param>
            <param name="phase">Specifies the phase to exclude, or NONE to ignore.</param>
        </member>
        <member name="M:MyCaffe.model.ModelBuilder.addResNetBody(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.String,MyCaffe.basecode.Phase)">
            <summary>
            Create a ResNet101 Body.
            </summary>
            <param name="strDataName">Specifies the last layer name where the ResNet body is to be created from.</param>
            <param name="nBlock3Count">Specifies the number of blocks in the 3 blocks (default = 4 for ResNet101, use 8 for ResNet152).</param>
            <param name="nBlock4Count">Speciifes the number of blocks in the 4 blocks (default = 23 for ResNet101, use 36 for ResNet152).</param>
            <param name="bUsePool5">Specifies whether or not a Pooling layer is to be used as the last layer.</param>
            <param name="bUseDilationConv5">Specifies whether or not to use dilation on the level 5 block.</param>
            <param name="bNamedParams">Specifies whether or not to name the parameters (default = false).</param>
            <param name="strLayerPostfix">Specifies a layer name post-fix (default = "").</param>
            <param name="phaseExclude">Specifies a phase to exclude, or NONE to ignore (default = NONE).</param>
            <returns>The last layer is returned.</returns>
        </member>
        <member name="P:MyCaffe.model.ModelBuilder.Net">
            <summary>
            Returns the base net altered by the model builder.
            </summary>
        </member>
        <member name="P:MyCaffe.model.ModelBuilder.Solver">
            <summary>
            Returns the base solver.
            </summary>
        </member>
        <member name="T:MyCaffe.model.MultiBoxHeadInfo">
            <summary>
            The MultiBoxHeadInfo contains information used to build the multi-box head of layers.
            </summary>
        </member>
        <member name="M:MyCaffe.model.MultiBoxHeadInfo.#ctor(System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32})">
            <summary>
            The constructor.
            </summary>
            <param name="strSrcLayer">Specifies the source layer.</param>
            <param name="dfMinSize">Specifies the minimum bbox size.</param>
            <param name="dfMaxSize">Specifies the maximum bbox size.</param>
            <param name="dfStepWidth">Specifies the step width size.</param>
            <param name="dfStepHeight">Specifies the step height size.</param>
            <param name="dfAspectRatioWidth">Specifies the aspect ratio width.</param>
            <param name="dfAspectRatioHeight">Specifies the aspect ratio height.</param>
            <param name="dfNormalization">Specifies the normalization to use or -1 to ignore.</param>
            <param name="nInterLayerDepth">Specifies the inner layer depth or -1 to ignore.</param>
        </member>
        <member name="M:MyCaffe.model.MultiBoxHeadInfo.Verify(MyCaffe.model.MultiBoxHeadInfo)">
            <summary>
            Verify that all numical values are consistently set (or not) between two info objects.
            </summary>
            <param name="info">Specifies the info object to compare.</param>
            <returns>If the settings are consistent, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="P:MyCaffe.model.MultiBoxHeadInfo.SourceLayer">
            <summary>
            Returns the source layer.
            </summary>
        </member>
        <member name="P:MyCaffe.model.MultiBoxHeadInfo.MinSize">
            <summary>
            Returns the bbox minimum size.
            </summary>
        </member>
        <member name="P:MyCaffe.model.MultiBoxHeadInfo.MaxSize">
            <summary>
            Returns the bbox maximum size.
            </summary>
        </member>
        <member name="P:MyCaffe.model.MultiBoxHeadInfo.StepHeight">
            <summary>
            Returns the step eight.
            </summary>
        </member>
        <member name="P:MyCaffe.model.MultiBoxHeadInfo.StepWidth">
            <summary>
            Returns the step width.
            </summary>
        </member>
        <member name="P:MyCaffe.model.MultiBoxHeadInfo.AspectRatioHeight">
            <summary>
            Returns the aspect ratio height.
            </summary>
        </member>
        <member name="P:MyCaffe.model.MultiBoxHeadInfo.AspectRatioWidth">
            <summary>
            Returns the aspect ratio width.
            </summary>
        </member>
        <member name="P:MyCaffe.model.MultiBoxHeadInfo.Normalization">
            <summary>
            Returns the normalization, or -1 to ignore.
            </summary>
        </member>
        <member name="P:MyCaffe.model.MultiBoxHeadInfo.InterLayerDepth">
            <summary>
            Returns the inner layer depth, or -1 to ignore.
            </summary>
        </member>
        <member name="T:MyCaffe.model.ResNetModelBuilder">
            <summary>
            The ResNetModelBuilder adds the extra layers to a 'base' model for the ResNet model.
            </summary>
        </member>
        <member name="T:MyCaffe.model.ResNetModelBuilder.MODEL">
            <summary>
            Defines the type of model to create.
            </summary>
        </member>
        <member name="F:MyCaffe.model.ResNetModelBuilder.MODEL.RESNET56">
            <summary>
            Specifies to create a ResNet56 model.
            </summary>
        </member>
        <member name="F:MyCaffe.model.ResNetModelBuilder.MODEL.RESNET101">
            <summary>
            Specifies to create a ResNet101 model.
            </summary>
        </member>
        <member name="F:MyCaffe.model.ResNetModelBuilder.MODEL.RESNET152">
            <summary>
            Specifies to create a ResNet152 model.
            </summary>
        </member>
        <member name="M:MyCaffe.model.ResNetModelBuilder.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Collections.Generic.List{System.Tuple{System.Int32,System.Boolean}},System.Boolean,System.Boolean,MyCaffe.model.ResNetModelBuilder.MODEL,System.Int32,System.Int32,System.Collections.Generic.List{System.Int32},MyCaffe.param.NetParameter)">
            <summary>
            The constructor.
            </summary>
            <param name="strBaseDirectory">Specifies the base directory that contains the data and models.</param>
            <param name="strDataset">Specifies the dataset that the model will run on.</param>
            <param name="nChannels">Specifies the number of channels in the data set (e.g. color = 3, b/w = 1).</param>
            <param name="bSiamese">Specifies whether or not to create a Siamese network."</param> 
            <param name="rgIpLayers">Specifies a list of inner product layers added to the end of the network where each entry specifies the number of output and whether or not Noise is enabled for the layer.</param>
            <param name="bUsePool5">Specifies whether or not to use the Pool layer as the last layer.</param>
            <param name="bUseDilationConv5">Specifies whether or not to use dilation on block 5 layers.</param>
            <param name="model">Specifies the type of ResNet model to create.</param>
            <param name="nBatchSize">Optionally, specifies the batch size (default = 32).</param>
            <param name="nAccumBatchSize">Optionally, specifies the accumulation batch size (default = 32).</param>
            <param name="rgGpuId">Optionally, specifies a set of GPU ID's to use (when null, GPU=0 is used).</param>
            <param name="net">Specifies the 'base' net parameter that is to be altered.</param>
        </member>
        <member name="M:MyCaffe.model.ResNetModelBuilder.CreateSolver">
            <summary>
            Create the base solver to use.
            </summary>
            <returns>
            The solver parameter created is returned.
            </returns>
        </member>
        <member name="M:MyCaffe.model.ResNetModelBuilder.CreateModel(System.Boolean)">
            <summary>
            Create the training SSD model for the pascal dataset.
            </summary>
        </member>
        <member name="M:MyCaffe.model.ResNetModelBuilder.CreateDeployModel">
            <summary>
            Create the testing SSD model for the pascal dataset.
            </summary>
        </member>
        <member name="M:MyCaffe.model.ResNetModelBuilder.addExtraLayers(System.Boolean,System.Double)">
            <summary>
            Add extra layers (for SSD with the Pascal dataset) on top of a 'base' network (e.g. VGGNet or Inception)
            </summary>
            <param name="bUseBatchNorm">Optionally, specifies whether or not to use batch normalization layers (default = <i>true</i>).</param>
            <param name="dfLrMult">Optionally, specifies the learning rate multiplier (default = 1.0).</param>
        </member>
        <member name="T:MyCaffe.model.SsdPascalModelBuilder">
            <summary>
            The SsdPascalModelBuilder adds the extra layers to a 'base' model for the Pascal model used with SSD.
            </summary>
        </member>
        <member name="M:MyCaffe.model.SsdPascalModelBuilder.#ctor(System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.Int32},System.Boolean,MyCaffe.param.LossParameter.NormalizationMode,MyCaffe.param.NetParameter)">
            <summary>
            The constructor.
            </summary>
            <param name="strBaseDirectory">Specifies the base directory that contains the data and models.</param>
            <param name="nBatchSize">Optionally, specifies the batch size (default = 32).</param>
            <param name="nAccumBatchSize">Optionally, specifies the accumulation batch size (default = 32).</param>
            <param name="rgGpuId">Optionally, specifies a set of GPU ID's to use (when null, GPU=0 is used).</param>
            <param name="bUseBatchNorm">Optionally, specifies to use batch normalization (default = false).</param>
            <param name="normMode">Optionally, specifies the normalization mode (default = VALID).</param>
            <param name="net">Specifies the 'base' net parameter that is to be altered.</param>
        </member>
        <member name="M:MyCaffe.model.SsdPascalModelBuilder.CreateSolver">
            <summary>
            Create the base solver to use.
            </summary>
            <returns>
            The solver parameter created is returned.
            </returns>
        </member>
        <member name="M:MyCaffe.model.SsdPascalModelBuilder.CreateModel(System.Boolean)">
            <summary>
            Create the training SSD model for the pascal dataset.
            </summary>
        </member>
        <member name="M:MyCaffe.model.SsdPascalModelBuilder.CreateDeployModel">
            <summary>
            Create the testing SSD model for the pascal dataset.
            </summary>
        </member>
        <member name="M:MyCaffe.model.SsdPascalModelBuilder.addExtraLayers(System.Boolean,System.Double)">
            <summary>
            Add extra layers (for SSD with the Pascal dataset) on top of a 'base' network (e.g. VGGNet or Inception)
            </summary>
            <param name="bUseBatchNorm">Optionally, specifies whether or not to use batch normalization layers (default = <i>true</i>).</param>
            <param name="dfLrMult">Optionally, specifies the learning rate multiplier (default = 1.0).</param>
        </member>
    </members>
</doc>
