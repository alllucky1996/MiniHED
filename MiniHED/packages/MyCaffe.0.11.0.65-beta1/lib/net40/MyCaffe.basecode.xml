<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyCaffe.basecode</name>
    </assembly>
    <members>
        <member name="T:MyCaffe.basecode.Annotation">
            <summary>
            The Annotation class is used by annotations attached to SimpleDatum's and used in SSD.
            </summary>
            <remarks>
            @see [SSD: Single Shot MultiBox Detector](https://arxiv.org/abs/1512.02325) by Wei Liu, Dragomir Anguelov, Dumitru Erhan, Christian Szegedy, Scott Reed, Cheng-Yang Fu, Alexander C. Berg, 2016.
            @see [GitHub: SSD: Single Shot MultiBox Detector](https://github.com/weiliu89/caffe/tree/ssd), by weiliu89/caffe, 2016
            </remarks>
        </member>
        <member name="M:MyCaffe.basecode.Annotation.#ctor(MyCaffe.basecode.NormalizedBBox,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="bbox">Specifies the bounding box.</param>
            <param name="nInstanceId">Specifies the instance ID.</param>
        </member>
        <member name="M:MyCaffe.basecode.Annotation.Clone">
            <summary>
            Returns a copy of the Annotation.
            </summary>
            <returns>A new copy of the annotation is returned.</returns>
        </member>
        <member name="P:MyCaffe.basecode.Annotation.instance_id">
            <summary>
            Get/set the instance ID.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Annotation.bbox">
            <summary>
            Get/set the bounding box.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.Annotation.Save(System.IO.BinaryWriter)">
            <summary>
            Save the annotation data using the binary writer.
            </summary>
            <param name="bw">Specifies the binary writer used to save the data.</param>
        </member>
        <member name="M:MyCaffe.basecode.Annotation.Load(System.IO.BinaryReader)">
            <summary>
            Load the annotation using a binary reader.
            </summary>
            <param name="br">Specifies the binary reader used to load the data.</param>
            <returns>The newly loaded annoation is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.AnnotationGroup">
            <summary>
            The AnnoationGroup class manages a group of annotations.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.AnnotationGroup.#ctor(System.Collections.Generic.List{MyCaffe.basecode.Annotation},System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="rgAnnotations">Optionally, specifies the list of group annotations.</param>
            <param name="nGroupLabel">Specifies the group label.</param>
        </member>
        <member name="M:MyCaffe.basecode.AnnotationGroup.Clone">
            <summary>
            Create a copy of the annotation group.
            </summary>
            <returns>A copy of the annotation group is returned.</returns>
        </member>
        <member name="P:MyCaffe.basecode.AnnotationGroup.annotations">
            <summary>
            Get/set the group annoations.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.AnnotationGroup.group_label">
            <summary>
            Get/set the group label.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.AnnotationGroup.Save(System.IO.BinaryWriter)">
            <summary>
            Save the annotation group to the binary writer.
            </summary>
            <param name="bw">Specifies the binary writer used to write the data.</param>
        </member>
        <member name="M:MyCaffe.basecode.AnnotationGroup.Load(System.IO.BinaryReader)">
            <summary>
            Load an annotation group using the binary reader.
            </summary>
            <param name="br">Specifies the binary reader used to load the data.</param>
            <returns>The new AnnotationGroup loaded is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.BinaryData">
            <summary>
            The BinaryData class is used to pack and unpack DataCriteria binary data, optionally stored within each SimpleDatum.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.BinaryData.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.BinaryData.UnPackType(System.Byte[])">
            <summary>
            Unpack the type packed into the byte array (if any).
            </summary>
            <param name="rg">Specifies the byte array.</param>
            <returns>The DATA_FORMAT of the byte array is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BinaryData.Pack(System.Collections.Generic.List{System.Double},MyCaffe.basecode.SimpleDatum.DATA_FORMAT@)">
            <summary>
            Pack a list of <i>double</i> into a byte array.
            </summary>
            <param name="rg">Specifies the list of <i>double</i> values to pack.</param>
            <param name="fmt">Returns the format LIST_DOUBLE</param>
            <returns>The byte array is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BinaryData.UnPackDoubleList(System.Byte[],MyCaffe.basecode.SimpleDatum.DATA_FORMAT)">
            <summary>
            Unpack the byte array into a list of <i>double</i> values.
            </summary>
            <param name="rg">Specifies the byte array containing the list.</param>
            <param name="fmtExpected">Specifies the expected format.</param>
            <returns>The list of <i>double</i> values is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BinaryData.Pack(System.Collections.Generic.List{System.Single},MyCaffe.basecode.SimpleDatum.DATA_FORMAT@)">
            <summary>
            Pack a list of <i>float</i> into a byte array.
            </summary>
            <param name="rg">Specifies the list of <i>float</i> values to pack.</param>
            <param name="fmt">Returns the format LIST_FLOAT</param>
            <returns>The byte array is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BinaryData.UnPackFloatList(System.Byte[],MyCaffe.basecode.SimpleDatum.DATA_FORMAT)">
            <summary>
            Unpack the byte array into a list of <i>float</i> values.
            </summary>
            <param name="rg">Specifies the byte array containing the list.</param>
            <param name="fmtExpected">Specifies the expected format.</param>
            <returns>The list of <i>float</i> values is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.Bucket">
            <summary>
            The Bucket class contains the information describing a single range of values within a BucketCollection.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.Bucket.#ctor(System.Double,System.Double)">
            <summary>
            The constructor.
            </summary>
            <param name="fMin">The minimum value in the range.</param>
            <param name="fMax">The maximum value in the range.</param>
        </member>
        <member name="M:MyCaffe.basecode.Bucket.Contains(System.Double)">
            <summary>
            Tests to see if the Bucket range contains the value.
            </summary>
            <param name="fVal">Specifies the value to test.</param>
            <returns>Returns 0 if the Bucket contains the value, -1 if the value is less than the Bucket range and 1 if the value is greater.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Bucket.Add(System.Double,System.Boolean)">
            <summary>
            Attempts to add a new value to the Bucket.
            </summary>
            <param name="fVal">Specifies the value to add.</param>
            <param name="bForce">Optionally, forces adding the value to the Bucket.</param>
            <returns>Returns 0 if the value falls within the Buckets range and is added, -1 if the value is less than the Bucket range and 1 if the value is greater.</returns>
        </member>
        <member name="P:MyCaffe.basecode.Bucket.Count">
            <summary>
            Returns the number of items added to the Bucket.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Bucket.Average">
            <summary>
            Returns the average value of all values added to the Bucket.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Bucket.Minimum">
            <summary>
            Returns the bucket minimum value.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Bucket.Maximum">
            <summary>
            Returns the bucket maximum value.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Bucket.MidPoint">
            <summary>
            Returns the bucket midpoint.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Bucket.Tag">
            <summary>
            Get/set a user specified tag.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.Bucket.ToString">
            <summary>
            Returns a string representation of the Bucket.
            </summary>
            <returns>The string representation is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Bucket.Save(System.IO.BinaryWriter)">
            <summary>
            Save the Bucket to a BinaryWriter.
            </summary>
            <param name="bw">Specifies the BinaryWriter.</param>
        </member>
        <member name="M:MyCaffe.basecode.Bucket.Load(System.IO.BinaryReader)">
            <summary>
            Load a Bucket from a BinaryReader.
            </summary>
            <param name="br">Specifies the BinaryReader.</param>
            <returns>The newly loaded Bucket is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.BucketCollection">
            <summary>
            The BucketCollection contains a set of Buckets.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.BucketCollection.OUTPUT_FMT">
            <summary>
            Specifies the output format used when creating a distribution string.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.BucketCollection.OUTPUT_FMT.NONE">
            <summary>
            No special output formatting used.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.BucketCollection.OUTPUT_FMT.TXT">
            <summary>
            Format for a text file.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.BucketCollection.OUTPUT_FMT.CSV">
            <summary>
            Format for a CSV file.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="fMin">Specifies the overall minimum of all Buckets.</param>
            <param name="fMax">Specifies the overall maximum of all Buckets.</param>
            <param name="nCount">Specifies the number of Buckets to use.</param>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.#ctor(System.Collections.Generic.List{System.Int32})">
            <summary>
            The constructor.
            </summary>
            <param name="rgVocab">Specifies an array of vocabulary values to add into Buckets.</param>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.#ctor(System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="bIsReal">Specifies that the Buckets are to hold Real values.</param>
        </member>
        <member name="P:MyCaffe.basecode.BucketCollection.IsDataReal">
            <summary>
            Returns whehter or not the Buckets hold Real values or not.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.BucketCollection.Count">
            <summary>
            Returns the number of Buckets.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.BucketCollection.Item(System.Int32)">
            <summary>
            Returns the bucket at a given index.
            </summary>
            <param name="nIdx">Specifies the index of the bucket to retrieve.</param>
            <returns>The bucket at the index is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.GetBucketWithMaxCount">
            <summary>
            Returns the bucket with the highest count.
            </summary>
            <returns>The bucket with the highest count is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.GetRange">
            <summary>
            Returns the numeric range that all buckets fall into.
            </summary>
            <returns>A tuple containing the min,max is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.Add(System.Double)">
            <summary>
            Finds the correct Bucket and adds the value to it.
            </summary>
            <param name="fVal">Specifies the value to add.</param>
            <returns>The index of the bucket for which the value was added is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.Reduce(System.Double)">
            <summary>
            Reduces the buckets to only include those that have a count that are within 1.0 - dfPct of the maximum bucket count.
            </summary>
            <param name="dfPct">Specifies the threshold percent where all buckets with a count >= Max Count * (1.0 - dfPct) are kept.</param>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.Translate(System.Double)">
            <summary>
            Finds the Bucket associated with the value and returns the Bucket's average value.
            </summary>
            <param name="fVal">Specifies the value to find.</param>
            <returns>The Bucket average is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.FindIndex(System.Double)">
            <summary>
            Finds the index of the Bucket containing the value.
            </summary>
            <param name="dfVal">Specifies the value to look for.</param>
            <returns>The Bucket index is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.GetValueAt(System.Int32,System.Boolean)">
            <summary>
            Returns the average of the Bucket at a given index.
            </summary>
            <param name="nIdx">Specifies the index.</param>
            <param name="bUseMidPoint">Optionally specifies to use the bucket midpoint instead of the average.</param>
            <returns>The Bucket average is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.Bucketize(System.String,System.Int32,MyCaffe.basecode.SimpleDatum,MyCaffe.basecode.Log,MyCaffe.basecode.CancelEvent,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            The Bucketize method adds all values within a SimpleDatum to a new BucketCollection.
            </summary>
            <param name="strName">Specifies the name to use when writing status information.</param>
            <param name="nBucketCount">Specifies the number of Buckets to use.</param>
            <param name="sd">Specifies the SimpleDatum containing the data to add.</param>
            <param name="log">Specifies the output log.</param>
            <param name="evtCancel">Specifies the CancelEvent used to cancel the bucketizing process.</param>
            <param name="dfMin">Optionally, specifies a overall minimum to use in the BucketCollection, when missing this is calculated from the SimpleDatum.</param>
            <param name="dfMax">Optionally, specifies a overall maximum to use in the BucketCollection, when missing this is calculated from the SimpleDatum.</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.UnBucketize(System.String,System.Collections.Generic.List{System.Double[]},MyCaffe.basecode.Log,MyCaffe.basecode.CancelEvent)">
            <summary>
            The UnBucketize method converts all Data received into their respective Bucket average values.
            </summary>
            <param name="strName">Specifies the name to use when writing status information.</param>
            <param name="rgrgData">Specifies the data to unbucketize.</param>
            <param name="log">Specifies the output log.</param>
            <param name="evtCancel">Specifies the CancelEvent used to cancel the unbucketizing process.</param>
            <returns>On success, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.ToByteStream">
            <summary>
            Converts the BucketCollection into a byte stream.
            </summary>
            <returns>The byte stream is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.FromByteStream(System.Byte[])">
            <summary>
            Converts a byte stream into a BucketCollection.
            </summary>
            <param name="rg">Specifies the byte stream.</param>
            <returns>The new BucketCollection is returned.</returns>
        </member>
        <member name="P:MyCaffe.basecode.BucketCollection.TotalCount">
            <summary>
            Returns the total count across all buckets.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.ToDistributionString(MyCaffe.basecode.BucketCollection.OUTPUT_FMT,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns the distribution of buckets as a percentage for each time a bucket was hit.
            </summary>
            <param name="fmt">Optionally, specifies the output format of the string (default = NONE).</param>
            <param name="nMaxDots">Optionally, specifies the maximum number of dots used when 'bFull' = true, ignored when 'bFull' = false (default = 30).</param>
            <param name="strFmt">Optionally, specifies the format string for each range (default = '0.00000').</param>
            <param name="bIncludePercents">Optionally, specifies to include the percentages.</param>
            <returns>The distribution string is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.GetEnumerator">
            <summary>
            Returns the enumerator used in foreach loops.
            </summary>
            <returns>The enumerator is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BucketCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator used in foreach loops.
            </summary>
            <returns>The enumerator is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.LabelBBox">
            <summary>
            The LabelBBox manages a bounding box used in SSD.
            </summary>
            <remarks>
            @see [SSD: Single Shot MultiBox Detector](https://arxiv.org/abs/1512.02325) by Wei Liu, Dragomir Anguelov, Dumitru Erhan, Christian Szegedy, Scott Reed, Cheng-Yang Fu, Alexander C. Berg, 2016.
            @see [GitHub: SSD: Single Shot MultiBox Detector](https://github.com/weiliu89/caffe/tree/ssd), by weiliu89/caffe, 2016
            </remarks>
        </member>
        <member name="M:MyCaffe.basecode.LabelBBox.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.LabelBBox.ToList">
            <summary>
            Returns the internal dictionary of items as a list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.basecode.LabelBBox.Add(System.Int32,MyCaffe.basecode.NormalizedBBox)">
            <summary>
            Add a new bbox to the label.
            </summary>
            <param name="nLabel"></param>
            <param name="bbox"></param>
        </member>
        <member name="P:MyCaffe.basecode.LabelBBox.Count">
            <summary>
            Returns the number of items.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.LabelBBox.Contains(System.Int32)">
            <summary>
            Returns whether or not the label is contained in the label bounding boxe set.
            </summary>
            <param name="nLabel">Specifies the label.</param>
            <returns>If the label exists, <i>true</i> is returned, otherwise, <i>false</i> is returned.</returns>
        </member>
        <member name="P:MyCaffe.basecode.LabelBBox.Item(System.Int32)">
            <summary>
            Returns the list of NormalizedBBox items at the label specified.
            </summary>
            <param name="nLabel">Specifies the label.</param>
            <returns>The list of NormalizedBBox items at the label is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.LabelBBox.Clear">
            <summary>
            Remove all items from the group.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.LabelMappingCollection">
            <summary>
            The LabelMappingCollection manages a collection of LabelMapping's.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.LabelMappingCollection.#ctor">
            <summary>
            The LabelMappingCollection constructor.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.LabelMappingCollection.Count">
            <summary>
            Returns the number of items in the collection.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.LabelMappingCollection.Mappings">
            <summary>
            Returns the label mapping list.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.LabelMappingCollection.Item(System.Int32)">
            <summary>
            Get/set an item at a given index.
            </summary>
            <param name="nIdx">Specifies the index.</param>
            <returns>The item at the index is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.LabelMappingCollection.Add(MyCaffe.basecode.LabelMapping)">
            <summary>
            Adds a new label mapping.
            </summary>
            <param name="map">Specifies the label mapping.</param>
        </member>
        <member name="M:MyCaffe.basecode.LabelMappingCollection.Remove(MyCaffe.basecode.LabelMapping)">
            <summary>
            Removes a label mapping.
            </summary>
            <param name="map">Specifies the label mapping.</param>
            <returns>If found and removed, returns <i>true</i>, otherwise returns <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.basecode.LabelMappingCollection.Clone">
            <summary>
            Returns a copy of the label mapping collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.basecode.LabelMappingCollection.MapLabel(System.Int32,System.Int32)">
            <summary>
            Returns the mapped label associated with a given label and boost (if a boost condition is used).
            </summary>
            <param name="nLabel">Specifies the label to map.</param>
            <param name="nBoost">Specifies the boost condition that must be met if specified.</param>
            <remarks>
            If a label mapping is found for the 'nLabel' parameter, the following logic follows:
               If no boost condition exists, the new 'mapped' label is returned,
               Otherwise, if the boost condition is met, the new 'mapped' label is returned,
               Otherwise, if the NewLabelConditionFalse exists, the NewLabelConditionFalse is returned,
               Otherwise the label is returned.
            </remarks>
            <returns>The mapped label is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.LabelMappingCollection.MapLabelWithoutBoost(System.Int32)">
            <summary>
            Returns the mapped label associated with a given label.
            </summary>
            <param name="nLabel">Specifies the label to map.</param>
            <returns>The mapped label is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.LabelMappingCollection.GetEnumerator">
            <summary>
            Returns the enumerator of the collection.
            </summary>
            <returns>The collection enumerator is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.LabelMappingCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator of the collection.
            </summary>
            <returns>The collection enumerator is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.LabelMappingCollection.Sort">
            <summary>
            Sorts the label mappings.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.LabelMappingCollection.Compare(MyCaffe.basecode.LabelMappingCollection)">
            <summary>
            Compares one label mapping collection to another.
            </summary>
            <param name="col">Specifies the other collection to compare.</param>
            <returns>If the two collections are the same, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.LabelMappingCollection.ToString">
            <summary>
            Returns a string representation of the label mapping collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.basecode.LabelMappingCollection.ToStringList">
            <summary>
            Returns a list of strings where each entry represents a mapping.
            </summary>
            <returns>Returns the label mappings as a list of strings.</returns>
        </member>
        <member name="M:MyCaffe.basecode.LabelMappingCollection.Parse(System.String)">
            <summary>
            Parses a label mapping string into a collection of label mappings.
            </summary>
            <param name="strMappings">Specifies the list of ';' separated label mappings.</param>
            <returns>The new LabelMappingCollection is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.LabelMappingCollection.Parse(System.Collections.Generic.List{System.String})">
            <summary>
            Parses a list of strings where each string is a label mapping.
            </summary>
            <param name="rgstrMappings">Specifies the list of label mapping strings.</param>
            <returns>The new LabelMappingCollection is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.LabelMapping">
            <summary>
            The LabelMapping class represents a single label mapping.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.LabelMapping.#ctor(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The LabelMapping constructor.
            </summary>
            <param name="nOriginalLabel">Specifies the original label.</param>
            <param name="nNewLabel">Specifies the new label.</param>
            <param name="nConditionBoostEquals">Specifies a conditional boost value.</param>
            <param name="nNewLabelConditionFalse">Specifies the label to use if the conditional fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.LabelMapping.#ctor">
            <summary>
            The LabelMapping constructor.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.LabelMapping.OriginalLabel">
            <summary>
            Get/set the original label.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.LabelMapping.NewLabel">
            <summary>
            Get/set the new label.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.LabelMapping.NewLabelConditionFalse">
            <summary>
            Get/set the label to use if the boost condition fails.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.LabelMapping.ConditionBoostEquals">
            <summary>
            Get/set the boost condition to test which if met, the new label is set, otherwise it is not.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.LabelMapping.Clone">
            <summary>
            Return a copy of the LabelMapping.
            </summary>
            <returns>The copy is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.LabelMapping.Parse(System.String)">
            <summary>
            Parse a string into a new LabelMapping.
            </summary>
            <remarks>
            The expected format for the label mapping is:
              originalLabel->newLabel[?newLabelFalse,boostCondition]
              
            Where the newLabelFalse and boostCondition are optional.  
            The basic logic of the label map is as follows:
            
            If no boost condition exists, map the original label to the
            new label.
            
            If a boost condition exists and is met, map the original label
            to the new label.
            
            If a boost condition exists and is not met and the newLabelFalse
            exists, map the original label to the newLabelFalse.
            </remarks>
            <param name="str">Specifies the string to parse.</param>
            <returns>The new LabelMapping is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.LabelMapping.ToString">
            <summary>
            Return a string representation of the label mapping.
            </summary>
            <returns>The string representatio is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.NormalizedBBox">
            <summary>
            The NormalizedBBox manages a bounding box used in SSD.
            </summary>
            <remarks>
            @see [SSD: Single Shot MultiBox Detector](https://arxiv.org/abs/1512.02325) by Wei Liu, Dragomir Anguelov, Dumitru Erhan, Christian Szegedy, Scott Reed, Cheng-Yang Fu, Alexander C. Berg, 2016.
            @see [GitHub: SSD: Single Shot MultiBox Detector](https://github.com/weiliu89/caffe/tree/ssd), by weiliu89/caffe, 2016
            </remarks>
        </member>
        <member name="M:MyCaffe.basecode.NormalizedBBox.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Single,System.Single)">
            <summary>
            The constructor.
            </summary>
            <param name="fxmin">Specifies the bounding box x minimum.</param>
            <param name="fymin">Specifies the bounding box y minimum.</param>
            <param name="fxmax">Specifies the bounding box x maximum.</param>
            <param name="fymax">Specifies the bounding box y maximum.</param>
            <param name="nLabel">Specifies the label.</param>
            <param name="bDifficult">Specifies the difficulty.</param>
            <param name="fScore">Specifies the score.</param>
            <param name="fSize">Specifies the size.</param>
        </member>
        <member name="M:MyCaffe.basecode.NormalizedBBox.Set(System.Single,System.Single,System.Single,System.Single,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Set the values of the NormalizedBbox.
            </summary>
            <param name="fxmin">Specifies the bounding box x minimum.</param>
            <param name="fymin">Specifies the bounding box y minimum.</param>
            <param name="fxmax">Specifies the bounding box x maximum.</param>
            <param name="fymax">Specifies the bounding box y maximum.</param>
            <param name="nLabel">Optionally, specifies the label (default = null, which is ignored).</param>
            <param name="bDifficult">Optionally, specifies the difficulty (default = null, which is ignored).</param>
            <param name="fScore">Optionally, specifies the score (default = null, which is ignored).</param>
            <param name="fSize">Optionally, specifies the size (default = null, which is ignored).</param>
        </member>
        <member name="M:MyCaffe.basecode.NormalizedBBox.Clone">
            <summary>
            Return a copy of the object.
            </summary>
            <returns>A new copy of the object is returned.</returns>
        </member>
        <member name="P:MyCaffe.basecode.NormalizedBBox.xmin">
            <summary>
            Get/set the x minimum.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.NormalizedBBox.xmax">
            <summary>
            Get/set the x maximum.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.NormalizedBBox.ymin">
            <summary>
            Get/set the y minimum.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.NormalizedBBox.ymax">
            <summary>
            Get/set the y maximum.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.NormalizedBBox.label">
            <summary>
            Get/set the label.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.NormalizedBBox.difficult">
            <summary>
            Get/set the difficulty.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.NormalizedBBox.score">
            <summary>
            Get/set the score.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.NormalizedBBox.size">
            <summary>
            Get/set the size.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.NormalizedBBox.Save(System.IO.BinaryWriter)">
            <summary>
            Save the NormalizedBbox using the binary writer.
            </summary>
            <param name="bw">Specifies the binary writer used to save the data.</param>
        </member>
        <member name="M:MyCaffe.basecode.NormalizedBBox.Load(System.IO.BinaryReader)">
            <summary>
            Load and return a new NormalizedBbox.
            </summary>
            <param name="br">Specifies the binary reader used to load the data.</param>
            <returns>The newly loaded NormalizedBbox is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.NormalizedBBox.ToString">
            <summary>
            Returns a string representation of the NormalizedBBox.
            </summary>
            <returns>The string representation is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.BaseParameter">
            <summary>
            The BaseParameter class is the base class for all other parameter classes.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.BaseParameter.#ctor">
            <summary>
            Constructor for the parameter.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.BaseParameter.ToProto(System.String)">
            <summary>
            Convert the parameter into a RawProto.
            </summary>
            <param name="strName">Specifies the name to associate with the RawProto.</param>
            <returns>The new RawProto is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.BaseParameter.Compare(MyCaffe.basecode.BaseParameter)">
            <summary>
            Compare this parameter to another parameter.
            </summary>
            <param name="p">Specifies the other parameter to compare with this one.</param>
            <returns>Returns <i>true</i> if the two parameters are the same, <i>false</i> otherwise.</returns>
        </member>
        <member name="T:MyCaffe.basecode.Result">
            <summary>
            The Result class contains a single result.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.Result.#ctor(System.Int32,System.Double,System.Double[])">
            <summary>
            The constructor.
            </summary>
            <param name="nLabel">The label detected.</param>
            <param name="dfScore">The score of the run.</param>
            <param name="rgExtra">Extra data related to the result.</param>
        </member>
        <member name="P:MyCaffe.basecode.Result.Label">
            <summary>
            Returns the label.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Result.Score">
            <summary>
            Returns the score of the run.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Result.Extra">
            <summary>
            Returns the extra data.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.Result.ToString">
            <summary>
            Returns a string representation of the result.
            </summary>
            <returns>The string representation is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.TarFile">
            <summary>
            The TarFile functions are used to expand tar files.
            </summary>
            <remarks>
            @see [Decompress tar files using C#](https://stackoverflow.com/questions/8863875/decompress-tar-files-using-c-sharp), StackOverflow, 2012
            @see [GitHub: ForeverZer0/ExtractTarGz](https://gist.github.com/ForeverZer0/a2cd292bd2f3b5e114956c00bb6e872b) ForeverZero0
            </remarks>
        </member>
        <member name="M:MyCaffe.basecode.TarFile.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.TarFile.ExtractTar(System.String,System.String,MyCaffe.basecode.CancelEvent,MyCaffe.basecode.Log,System.Int32,System.Int32)">
            <summary>
            Extract a Tar (*.tar) file to a specified output directory.
            </summary>
            <param name="strFileName">Specifies the name of the .tar file to extract.</param>
            <param name="strOutputDir">Specifies the output directory.</param>
            <param name="evtCancel">Optionally, specifies the cancel event used to cancel the extraction (default = null).</param>
            <param name="log">Optionally, specifies the Log used to output status of the extraction (default = null).</param>
            <param name="nExpectedTotal">Optionally, specifies the expected total number of files (default = 0).</param>
            <param name="nIdx">Optionally, specifies an item index (default = 0).</param>
            <returns>Upon a successful extraction, the number of files extracted offset by the index is returned, or 0 on abort.</returns>
        </member>
        <member name="M:MyCaffe.basecode.TarFile.ExtractTar(System.IO.Stream,System.String,MyCaffe.basecode.CancelEvent,MyCaffe.basecode.Log,System.Int32,System.Int32)">
            <summary>
            Extract Tar data from a stream to a specified output directory.
            </summary>
            <param name="stream">Specifies the stream containing the Tar data to extract.</param>
            <param name="strOutputDir">Specifies the output directory.</param>
            <param name="evtCancel">Optionally, specifies the cancel event used to cancel the extraction (default = null).</param>
            <param name="log">Optionally, specifies the Log used to output status of the extraction (default = null).</param>
            <param name="nExpectedTotal">Optionally, specifies the expected total number of files (default = 0).</param>
            <param name="nIdx">Optionally, specifies an item index (default = 0).</param>
            <returns>Upon a successful extraction, the number of files extracted offset by the index is returned, or 0 on abort.</returns>
        </member>
        <member name="M:MyCaffe.basecode.TarFile.ExtractTarGz(System.String,System.String)">
            <summary>
            Extract a Gz zipped file to the output directory.
            </summary>
            <param name="strFileName">Specifize the .gz file to extract.</param>
            <param name="strOutputDir">Specifies the output directory.</param>
        </member>
        <member name="M:MyCaffe.basecode.TarFile.ExtractTarGz(System.IO.Stream,System.String)">
            <summary>
            Extract a Gz stream to the output directory.
            </summary>
            <param name="stream">Specifies the Gz stream.</param>
            <param name="strOutputDir">Specifies the output directory.</param>
        </member>
        <member name="T:MyCaffe.basecode.Valuemap">
            <summary>
            The Realmap operates similar to a bitmap but is actually just an array of doubles.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.Valuemap.#ctor(System.Int32,System.Int32,System.Int32,System.Double[])">
            <summary>
            The constructor.
            </summary>
            <param name="nChannels">Specifies the number of channels in the map.</param>
            <param name="nHeight">Specifies the height of the map.</param>
            <param name="nWidth">Specifies the width of the map.</param>
            <param name="rgData">Optionally, specifies the data to use.</param>
        </member>
        <member name="M:MyCaffe.basecode.Valuemap.#ctor(MyCaffe.basecode.Valuemap)">
            <summary>
            The constructorl
            </summary>
            <param name="data">Specifies another Realmap to copy.</param>
        </member>
        <member name="M:MyCaffe.basecode.Valuemap.SetPixel(System.Int32,System.Int32,System.Double)">
            <summary>
            Set a given pixel to a given color.
            </summary>
            <param name="nX">Specifies the x location of the pixel.</param>
            <param name="nY">Specifies the y location of the pixel.</param>
            <param name="clr">Specifies the value to set the pixel.</param>
        </member>
        <member name="M:MyCaffe.basecode.Valuemap.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get the value of a pixel in the map.
            </summary>
            <param name="nX">Specifies the x location of the pixel.</param>
            <param name="nY">Specifies the y location of the pixel.</param>
            <returns>The color of the pixel is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Valuemap.SetPixel(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Set a given pixel to a given color.
            </summary>
            <param name="nChannel">Specifies the channel location of the pixel.</param>
            <param name="nX">Specifies the x location of the pixel.</param>
            <param name="nY">Specifies the y location of the pixel.</param>
            <param name="clr">Specifies the value to set the pixel.</param>
        </member>
        <member name="M:MyCaffe.basecode.Valuemap.GetPixel(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the value of a pixel in the map.
            </summary>
            <param name="nChannel">Specifies the channel of the pixel.</param>
            <param name="nX">Specifies the x location of the pixel.</param>
            <param name="nY">Specifies the y location of the pixel.</param>
            <returns>The color of the pixel is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Valuemap.SetAll(System.Double)">
            <summary>
            Set all values to the specified value.
            </summary>
            <param name="dfVal">Specifies the value to set all elements.</param>
        </member>
        <member name="M:MyCaffe.basecode.Valuemap.SetAll(System.Int32,System.Double)">
            <summary>
            Set all values of a given channel to a specified value.
            </summary>
            <param name="nChannel">Specifies the channel.</param>
            <param name="dfVal">Specifies the value.</param>
        </member>
        <member name="M:MyCaffe.basecode.Valuemap.Clear">
            <summary>
            Reset all values to zero.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Valuemap.Values">
            <summary>
            Specifies the data itself.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Valuemap.Channels">
            <summary>
            Specifies the channels of the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Valuemap.Height">
            <summary>
            Specifies the height of the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Valuemap.Width">
            <summary>
            Specifies the width of the data.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.Bytemap">
            <summary>
            The Bytemap operates similar to a bitmap but is actually just an array of bytes.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.Bytemap.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            The constructor.
            </summary>
            <param name="nChannels">Specifies the number of channels in the map.</param>
            <param name="nHeight">Specifies the height of the map.</param>
            <param name="nWidth">Specifies the width of the map.</param>
            <param name="rgData">Optionally, specifies the data to use.</param>
        </member>
        <member name="M:MyCaffe.basecode.Bytemap.#ctor(MyCaffe.basecode.Bytemap)">
            <summary>
            The constructorl
            </summary>
            <param name="data">Specifies another Bytemap to copy.</param>
        </member>
        <member name="M:MyCaffe.basecode.Bytemap.SetPixel(System.Int32,System.Int32,System.Byte)">
            <summary>
            Set a given pixel to a given color.
            </summary>
            <param name="nX">Specifies the x location of the pixel.</param>
            <param name="nY">Specifies the y location of the pixel.</param>
            <param name="clr">Specifies the color to set the pixel.</param>
        </member>
        <member name="M:MyCaffe.basecode.Bytemap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Set a given pixel to a given color.
            </summary>
            <param name="nX">Specifies the x location of the pixel.</param>
            <param name="nY">Specifies the y location of the pixel.</param>
            <param name="clr">Specifies the color to set the pixel.</param>
        </member>
        <member name="M:MyCaffe.basecode.Bytemap.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get the color of a pixel in the map.
            </summary>
            <param name="nX">Specifies the x location of the pixel.</param>
            <param name="nY">Specifies the y location of the pixel.</param>
            <returns>The color of the pixel is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Bytemap.Clear">
            <summary>
            Reset all values to zero.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Bytemap.Bytes">
            <summary>
            Specifies the data itself.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Bytemap.Channels">
            <summary>
            Specifies the channels of the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Bytemap.Height">
            <summary>
            Specifies the height of the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Bytemap.Width">
            <summary>
            Specifies the width of the data.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.Bytemap.ToImage">
            <summary>
            Converts the Bytemap into a Bitmap.
            </summary>
            <returns>A new bitmap is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Bytemap.FromImage(System.Drawing.Bitmap)">
            <summary>
            Converts a bitmap into a new Bytemap.
            </summary>
            <param name="bmp">Specifies the bitmap.</param>
            <returns>A new Bytemap is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.CancelEvent">
            <summary>
            The CancelEvent provides an extension to the manual cancel event that allows for overriding the
            manual cancel event.
            </summary>
            <remarks>
            The CancelEvent is used by the CaffeControl to cancel training and testing operations.
            </remarks>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.#ctor">
            <summary>
            The CancelEvent constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.#ctor(System.String)">
            <summary>
            The CancelEvent constructor that accepts a global name.
            </summary>
            <param name="strGlobalName">Specifies the global name.  If this parameter is <i>null</i>, the constructor acts like the default constructor.</param>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.#ctor(MyCaffe.basecode.CancelEvent)">
            <summary>
            Create a new Cancel Event and add another to this ones overrides.
            </summary>
            <param name="evtCancel">Specifies the Cancel Event to add to the overrides.</param>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.AddCancelOverride(System.String)">
            <summary>
            Add a new cancel override.
            </summary>
            <param name="strName">Specifies the name of the cancel event to add.</param>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.AddCancelOverride(MyCaffe.basecode.CancelEvent)">
            <summary>
            Add a new cancel override.
            </summary>
            <param name="evtCancel">Specifies the cancel override to add.</param>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.AddCancelOverride(System.Threading.WaitHandle)">
            <summary>
            Add a new cancel override.
            </summary>
            <param name="evtCancel">Specifies the cancel wait handle to add.</param>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.Contains(MyCaffe.basecode.CancelEvent)">
            <summary>
            Check to see if the cancel event has already been added.
            </summary>
            <param name="evt">Specifies the cancel event to look for.</param>
            <returns>Returns <i>true</i> if the cancel event has already been added, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.Contains(System.Threading.WaitHandle)">
            <summary>
            Check to see if the cancel event has already been added.
            </summary>
            <param name="evt">Specifies the wait handle to look for.</param>
            <returns>Returns <i>true</i> if the cancel event has already been added, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.Contains(System.String)">
            <summary>
            Check to see if the named cancel event has already been added.
            </summary>
            <param name="strName">Specifies the name of the cancel event to look for.</param>
            <returns>Returns <i>true</i> if the cancel event has already been added, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.RemoveCancelOverride(System.String)">
            <summary>
            Remove a new cancel override.
            </summary>
            <param name="strName">Specifies the name of the cancel event to remove.</param>
            <returns>If removed, <i>true</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.RemoveCancelOverride(MyCaffe.basecode.CancelEvent)">
            <summary>
            Remove a new cancel override.
            </summary>
            <param name="evtCancel">Specifies the cancel override to remove.</param>
            <returns>If removed, <i>true</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.RemoveCancelOverride(System.Threading.WaitHandle)">
            <summary>
            Remove a new cancel override.
            </summary>
            <param name="evtCancel">Specifies the wait handle override to remove.</param>
            <returns>If removed, <i>true</i> is returned.</returns>
        </member>
        <member name="P:MyCaffe.basecode.CancelEvent.Name">
            <summary>
            Return the name of the cancel event.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.Set">
            <summary>
            Sets the event to the signaled state.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.Reset">
            <summary>
            Resets the event clearing any signaled state.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.WaitOne(System.Int32)">
            <summary>
            Waits for the signal state to occur.
            </summary>
            <param name="nMs">Specifies the number of milliseconds to wait.</param>
            <returns>If the CancelEvent is in the signal state, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="P:MyCaffe.basecode.CancelEvent.Handles">
            <summary>
            Returns the internal wait handle of the CancelEvent.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the CancelEvent.
            </summary>
            <param name="disposing">Specifies whether or not this was called from Dispose().</param>
        </member>
        <member name="M:MyCaffe.basecode.CancelEvent.Dispose">
            <summary>
            Releases all resources used by the CancelEvent.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.ColorMapper">
            <summary>
            The ColorMapper maps a value within a number range, to a Color within a color scheme.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.ColorMapper.COLORSCHEME">
            <summary>
            Defines the color scheme to use.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.ColorMapper.COLORSCHEME.NORMAL">
            <summary>
            Use normal coloring where Red is a high value, Blue is a low value, and Green is in the middle.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.ColorMapper.COLORSCHEME.GBR">
            <summary>
            Use coloring where Green is a high value, Red is a low value and Blue is in the middle.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.ColorMapper.#ctor(System.Double,System.Double,System.Drawing.Color,System.Drawing.Color,MyCaffe.basecode.ColorMapper.COLORSCHEME,System.Int32)">
            <summary>
            The ColorMapper constructor.
            </summary>
            <param name="dfMin">Specifies the minimum value in the number range.</param>
            <param name="dfMax">Specifies the maximum value in the number range.</param>
            <param name="clrDefault">Specifies the default color to use.</param>
            <param name="clrError">Specifies the color to use when an error is detected.</param>
            <param name="clrScheme">Specifies the color scheme to use (default = COLORSCHEME.NORMAL).</param>
            <param name="nResolution">Specifies the number of colors to generate (default = 160).</param>
        </member>
        <member name="M:MyCaffe.basecode.ColorMapper.#ctor(System.Double,System.Double,System.Drawing.Color,System.Drawing.Color,System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Int32)">
            <summary>
            The ColorMapper constructor.
            </summary>
            <param name="dfMin">Specifies the minimum value in the number range.</param>
            <param name="dfMax">Specifies the maximum value in the number range.</param>
            <param name="clrDefault">Specifies the default color to use.</param>
            <param name="clrError">Specifies the color to use when an error is detected.</param>
            <param name="rgClrStart">Specifies the RGB three color starting color with values of 0 to 1.</param>
            <param name="rgClrEnd">Specifies the RGB three color ending color with values of 0 to 1.</param>
            <param name="nResolution">Specifies the number of colors to generate (default = 160).</param>
        </member>
        <member name="P:MyCaffe.basecode.ColorMapper.Resolution">
            <summary>
            Returns the color resolution used.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ColorMapper.NoMinMaxColor">
            <summary>
            Get/set the color used when the Min and Max both equal 0.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.ColorMapper.GetColor(System.Double)">
            <summary>
            Returns the color associated with the value.
            </summary>
            <param name="dfVal">Specifies the value.</param>
            <returns>The color associated with the value is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ColorMapper.GetValue(System.Drawing.Color)">
            <summary>
            Returns the value associated with the color.
            </summary>
            <param name="clr"></param>
            <returns>The value associated with the color is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ColorMapper.calculate(System.Double)">
            <summary>
            Calculate the gradient color.
            </summary>
            <remarks>
            Algorithm used from http://www.andrewnoske.com/wiki/Code_-_heatmaps_and_color_gradients, 
            used under the WTFPL (do what you want)! license.
            </remarks>
            <param name="dfVal">Specifies the value converted into the color range.</param>
            <returns>The color associated with the value is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.CryptoRandom">
            <summary>
            The CryptoRandom is a random number generator that can use either the standard .Net Random objec or the more precise 
            RandomNumberGenerator defined within the System.Security.Cryptograph.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.CryptoRandom.METHOD">
            <summary>
            Defines the random number generation method to use.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.CryptoRandom.METHOD.SYSTEM">
            <summary>
            Uses the default Random object.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.CryptoRandom.METHOD.CRYPTO">
            <summary>
            Uses the RandomNumberGenerator object.
            </summary>
            <remarks>
            @see https://stackoverflow.com/questions/4892588/rngcryptoserviceprovider-random-number-review
            </remarks>
        </member>
        <member name="F:MyCaffe.basecode.CryptoRandom.METHOD.UNIFORM_EXACT">
            <summary>
            Only used with Next(nMaxVal) and returns exactly evenly selected numbers from the range [0, nMaxVal).
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.CryptoRandom.METHOD.DEFAULT">
            <summary>
            Specifies to use the default CRYPTO.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.CryptoRandom.#ctor(MyCaffe.basecode.CryptoRandom.METHOD,System.Int32)">
            <summary>
            The CryptoRandom constructor.
            </summary>
            <param name="method">Specifies the random number generation method (default = CRYPTO1).</param>
            <param name="nSeed">Specifies the seed used to initialize the random number generator, only used when <i>bUseCrypto</i> = <i>false</i> (default = 0, which is ignored).</param>
        </member>
        <member name="M:MyCaffe.basecode.CryptoRandom.NextDouble">
            <summary>
            Returns a random double within the range @f$ [0, 1] @f$.
            </summary>
            <returns>The random double is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.CryptoRandom.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a random <i>double</i> within the range @f$ [dfMin, dfMax] @f$
            </summary>
            <param name="dfMin">Specifies the range minimum.</param>
            <param name="dfMax">Specifies the range maximum.</param>
            <returns>The random <i>double</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.CryptoRandom.Next(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a random <i>int</i> within the range @f$ [nMinVal, nMaxVal] @f$
            </summary>
            <param name="nMinVal">Specifies the range minimum.</param>
            <param name="nMaxVal">Specifies the range maximum.</param>
            <param name="bMaxInclusive">Optionally, specifies whether or not the Maximum is to be included in the selection.</param>
            <returns>The random <i>int</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.CryptoRandom.Next">
            <summary>
            Returns a random <i>int</i> within the range @f$ [0, int.MaxValue] @f$
            </summary>
            <returns>The random <i>int</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.CryptoRandom.Next(System.Int32)">
            <summary>
            Returns a random <i>int</i> within the range @f$ [0, nMaxVal) @f$, where the random number is less than <i>nMaxVal</i>.
            </summary>
            <param name="nMaxVal">Specifies the non-inclusive maximum of the range.</param>
            <returns>The random <i>int</i> is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.descriptors.DatasetDescriptor">
            <summary>
            The DatasetDescriptor class describes a dataset which contains both a training data source and testing data source.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.DatasetDescriptor.#ctor(System.Int32,System.String,MyCaffe.basecode.descriptors.GroupDescriptor,MyCaffe.basecode.descriptors.GroupDescriptor,MyCaffe.basecode.descriptors.SourceDescriptor,MyCaffe.basecode.descriptors.SourceDescriptor,System.String,System.String,System.String,MyCaffe.basecode.GYM_TYPE)">
            <summary>
            The DatasetDescriptor constructor.
            </summary>
            <param name="nID">Specifies the database ID of the item.</param>
            <param name="strName">Specifies the name of the item.</param>
            <param name="grpModel">Specifies the group of the model.</param>
            <param name="grpDs">Specifies the group of the dataset.</param>
            <param name="srcTrain">Specifies the data source for training.</param>
            <param name="srcTest">Specifies the data source for testing.</param>
            <param name="strCreatorName">Specifies the dataset creator name.</param>
            <param name="strDescription">Specifies a description of the dataset.</param>
            <param name="strOwner">Specifies the identifier of the item's owner.</param>
            <param name="gymType">Optionally, specifies the gym type to use if any (default = NONE).</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.DatasetDescriptor.#ctor(System.String)">
            <summary>
            The DatasetDescriptor constructor.
            </summary>
            <param name="strName">Specifies the name of the item.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.DatasetDescriptor.#ctor(MyCaffe.basecode.descriptors.DatasetDescriptor)">
            <summary>
            The DatasetDescriptor constructor.
            </summary>
            <param name="d">Specifies another DatasetDesciptor used to create this one.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.DatasetDescriptor.Resize(System.Int32,System.Int32,System.Int32)">
            <summary>
            Resize the testing and training data sources.
            </summary>
            <param name="nChannels">Specifies the new channel size.</param>
            <param name="nHeight">Specifies the new height size.</param>
            <param name="nWidth">Specifies the new width size.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.DatasetDescriptor.Copy(MyCaffe.basecode.descriptors.DatasetDescriptor)">
            <summary>
            Copy another DatasetDesciptor into this one.
            </summary>
            <param name="ds">Specifies the DatasetDesciptor to copy.</param>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.DatasetDescriptor.IsGym">
            <summary>
            Returns whether or not this dataset is from a Gym.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.DatasetDescriptor.GymType">
            <summary>
            Returns the Gym type, if any.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.DatasetDescriptor.FullName">
            <summary>
            Returns the full name which returns 'GYM:Name:Type' when using a gym based dataset, otherwise just 'Name' is returned.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.DatasetDescriptor.IsGymName(System.String)">
            <summary>
            Returns whether or not the name is from a gym.
            </summary>
            <param name="str">Specifies the name.</param>
            <returns>If the name is from a gym, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.DatasetDescriptor.GetGymName(System.String,System.String@)">
            <summary>
            Returns the actual gym name by parsing off the 'GYM:' if it exists.
            </summary>
            <param name="str">Specifies the name.</param>
            <param name="strType">Specifies the type.</param>
            <returns>The actual gym name is returned.</returns>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.DatasetDescriptor.DatasetGroup">
            <summary>
            Returns the dataset group.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.DatasetDescriptor.ModelGroup">
            <summary>
            Get/set the dataset model group.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.DatasetDescriptor.TrainingSource">
            <summary>
            Get/set the training data source.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.DatasetDescriptor.TestingSource">
            <summary>
            Get/set the testing data source.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.DatasetDescriptor.TrainingSourceName">
            <summary>
            Returns the training source name, or <i>null</i> if not specifies.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.DatasetDescriptor.TestingSourceName">
            <summary>
            Returns the testing source name or <i>null</i> if not specified.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.DatasetDescriptor.CreatorName">
            <summary>
            Returns the dataset creator name.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.DatasetDescriptor.Description">
            <summary>
            Get/set the description of the Dataset.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.DatasetDescriptor.Parameters">
            <summary>
            Get/set the dataset parameters (if any).
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.DatasetDescriptor.Serialize(MyCaffe.basecode.descriptors.DatasetDescriptor)">
            <summary>
            Serialize a dataset descriptor to a byte array.
            </summary>
            <param name="ds">Specifies the dataset descriptor to serialize.</param>
            <returns>A byte array containing the serialized dataset is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.DatasetDescriptor.Deserialize(System.Byte[])">
            <summary>
            Deserialize a dataset descriptor from a byte array.
            </summary>
            <param name="rg">Specifies the byte array.</param>
            <returns>The deserialized dataset descriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.DatasetDescriptor.ToString">
            <summary>
            Creates the string representation of the descriptor.
            </summary>
            <returns>The string representation of the descriptor is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.descriptors.ImageDescriptor">
            <summary>
            The ImageDescriptor class describes a single image in the database.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ImageDescriptor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.DateTime)">
            <summary>
            The ImageDescriptor constructor.
            </summary>
            <param name="nID">Specifies the image ID.</param>
            <param name="nH">Specifies the image heights.</param>
            <param name="nW">Specifies the image width.</param>
            <param name="nC">Specifies teh image channels.</param>
            <param name="bEncoded">Specifies whether or not the image has encoded data.</param>
            <param name="nSrcID">Specifies the ID of the source holding the image.</param>
            <param name="nIdx">Specifies the image index.</param>
            <param name="nActiveLabel">Specifies the active label of the image.</param>
            <param name="bActive">Specifies whether or not the image is active.</param>
            <param name="strDesc">Specifies the description of the image.</param>
            <param name="dt">Specifies the time-stamp of the image.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ImageDescriptor.#ctor(MyCaffe.basecode.descriptors.ImageDescriptor)">
            <summary>
            The ImageDescriptor constructor.
            </summary>
            <param name="id">Specifies another ImageDescriptor to copy.</param>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ImageDescriptor.ID">
            <summary>
            Returns the ID of the image.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ImageDescriptor.Height">
            <summary>
            Returns the height of the image.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ImageDescriptor.Width">
            <summary>
            Returns the width of the image.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ImageDescriptor.Channels">
            <summary>
            Returns the channels of the image (i.e. 3 = RGB, 1 = B/W)
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ImageDescriptor.Encoded">
            <summary>
            Returns whether or not the image is encoded.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ImageDescriptor.SourceID">
            <summary>
            Returns the ID of the source associated with the image.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ImageDescriptor.Index">
            <summary>
            Returns the index of the image.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ImageDescriptor.ActiveLabel">
            <summary>
            Returns the active label of the image.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ImageDescriptor.Active">
            <summary>
            Returns whether or not the image is active.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ImageDescriptor.Description">
            <summary>
            Returns the description of the image.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ImageDescriptor.TimeStamp">
            <summary>
            Specifies the time-stamp of the image (if any).
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ImageDescriptor.ToString">
            <summary>
            Creates the string representation of the descriptor.
            </summary>
            <returns>The string representation of the descriptor is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.descriptors.ResultDescriptor">
            <summary>
            The ResultDescriptor class describes the results of a run.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ResultDescriptor.#ctor(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.DateTime)">
            <summary>
            The ResultDescriptor constructor.
            </summary>
            <param name="nID">Specifies the database ID of the item.</param>
            <param name="strName">Specifies the name of the item.</param>
            <param name="strOwner">Specifies the identifier of the item's owner.</param>
            <param name="nIdx">Specifies the index of the results.</param>
            <param name="nLabel">Specifies the expected label of the result.</param>
            <param name="nResultCount">Specifies the number of items (classes) participating in the results.</param>
            <param name="rgResults">Specifies the raw result data that is converted into the full list of (int nLabel, double dfResult) pairs from the run.</param>
            <param name="nSrcId">Specifiesthe data source ID.</param>
            <param name="dt">Specifies the Timestamp of the result.</param>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ResultDescriptor.Index">
            <summary>
            Returns the index of the results.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ResultDescriptor.Label">
            <summary>
            Returns the expected label of the result.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ResultDescriptor.ResultCount">
            <summary>
            Returns the number of items (classes) participating in the results.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ResultDescriptor.Results">
            <summary>
            Returns the raw result data that is converted into the full list of (int nLabel, double dfResult) pairs from the run.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ResultDescriptor.SourceID">
            <summary>
            Returns the data source ID.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ResultDescriptor.TimeStamp">
            <summary>
            Returns the time-stamp of the result.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ResultDescriptor.CreateResults(System.Collections.Generic.List{MyCaffe.basecode.Result},System.Boolean)">
            <summary>
            The CreateResults function converts the list of (int nLabel, double dfResult) pairs into a array of <i>bytes</i>.
            </summary>
            <param name="rgResults">Specifies the list of (int nLabel, double dfResult) result data.</param>
            <param name="bInvert">Specifies whether or not to invert the value by subtracting it from the maximum value within the result pairs.</param>
            <returns>A <i>byte</i> array containing the result data is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ResultDescriptor.ToString">
            <summary>
            Creates the string representation of the descriptor.
            </summary>
            <returns>The string representation of the descriptor is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.descriptors.GroupDescriptor">
            <summary>
            The GroupDescriptor class defines a group.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.GroupDescriptor.#ctor(System.Int32,System.String,System.String)">
            <summary>
            The GroupDescriptor constructor.
            </summary>
            <param name="nID">Specifies the database ID of the item.</param>
            <param name="strName">Specifies the name of the item.</param>
            <param name="strOwner">Specifies the identifier of the item's owner.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.GroupDescriptor.#ctor(MyCaffe.basecode.descriptors.GroupDescriptor)">
            <summary>
            The GroupDescriptor constructor.
            </summary>
            <param name="g">Specifies another GroupDescriptor used to create this one.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.GroupDescriptor.ToString">
            <summary>
            Returns the string representation of the GroupDescriptor.
            </summary>
            <returns>The string representation is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.descriptors.LabelDescriptor">
            <summary>
            The LabelDescriptor class describes a single label.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.LabelDescriptor.#ctor(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            The LabelDescriptor constructor.
            </summary>
            <param name="nLabel">Specifies the original label.</param>
            <param name="nActiveLabel">Specifies the active label (used during training).</param>
            <param name="strName">Specifies the label name.</param>
            <param name="nImageCount">Specifies the number of images under this label.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.LabelDescriptor.#ctor(MyCaffe.basecode.descriptors.LabelDescriptor)">
            <summary>
            The LabelDescriptor constructor.
            </summary>
            <param name="l">Specifies another LabelDescriptor used to create this one.</param>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.LabelDescriptor.Label">
            <summary>
            Specifies the original label
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.LabelDescriptor.ActiveLabel">
            <summary>
            Specifies the active label (used during training).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.LabelDescriptor.Name">
            <summary>
            Specifies the label name.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.LabelDescriptor.ImageCount">
            <summary>
            Specifies the number of images under this label.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.LabelDescriptor.ToString">
            <summary>
            Creates the string representation of the descriptor.
            </summary>
            <returns>The string representation of the descriptor is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.descriptors.BaseDescriptor">
            <summary>
            The BaseDescriptor is the base class for all other descriptors, where descriptors are used to describe various items stored
            within the database.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.BaseDescriptor.#ctor(System.Int32,System.String,System.String)">
            <summary>
            The BaseDescriptor constructor.
            </summary>
            <param name="nID">Specifies the database ID of the item.</param>
            <param name="strName">Specifies the name of the item.</param>
            <param name="strOwner">Specifies the identifier of the item's owner.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.BaseDescriptor.#ctor(MyCaffe.basecode.descriptors.BaseDescriptor)">
            <summary>
            The BaseDescriptor constructor.
            </summary>
            <param name="b">Specifies another BaseDescriptor used to create this one.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.BaseDescriptor.Copy(MyCaffe.basecode.descriptors.BaseDescriptor)">
            <summary>
            Copy another BaseDescriptor into this one.
            </summary>
            <param name="b">Specifies the BaseDescriptor to copy.</param>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.BaseDescriptor.ID">
            <summary>
            Get/set the database ID of the item.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.BaseDescriptor.Name">
            <summary>
            Get/set the name of the item.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.BaseDescriptor.Owner">
            <summary>
            Get/set the owner of the item.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.descriptors.ParameterDescriptor">
            <summary>
            The ParameterDescriptor class describes a parameter in the database.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ParameterDescriptor.#ctor(System.Int32,System.String,System.String)">
            <summary>
            The ParameterDescriptor constructor.
            </summary>
            <param name="nID">Specifies the database ID of the item.</param>
            <param name="strName">Specifies the name of the item.</param>
            <param name="strValue">Specifies the value of the item.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ParameterDescriptor.#ctor(MyCaffe.basecode.descriptors.ParameterDescriptor)">
            <summary>
            The ParameterDescriptor constructor.
            </summary>
            <param name="p">Specifies another ParameterDescriptor used to create this one.</param>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ParameterDescriptor.ID">
            <summary>
            Return the database ID of the item.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ParameterDescriptor.Name">
            <summary>
            Return the name of the item.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ParameterDescriptor.Value">
            <summary>
            Get/set the value of the item.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ParameterDescriptor.ToString">
            <summary>
            Creates the string representation of the descriptor.
            </summary>
            <returns>The string representation of the descriptor is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.descriptors.ValueDescriptorCollection">
            <summary>
            The ValueDescriptorCollection class contains a list of ValueDescriptor's.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ValueDescriptorCollection.#ctor">
            <summary>
            The ValueDescriptorCollection constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ValueDescriptorCollection.#ctor(MyCaffe.basecode.descriptors.ValueDescriptorCollection)">
            <summary>
            The ValueDescriptorCollection constructor.
            </summary>
            <param name="rg">Specifies another collection used to create this one.</param>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ValueDescriptorCollection.Count">
            <summary>
            Returns the count of items in the collection.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ValueDescriptorCollection.Item(System.Int32)">
            <summary>
            Returns the item at a given index within the collection.
            </summary>
            <param name="nIdx">Specifies the index.</param>
            <returns>Returns the item as the index.</returns>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ValueDescriptorCollection.Add(MyCaffe.basecode.descriptors.ValueDescriptor)">
            <summary>
            Adds a ValueDescriptor to the collection.
            </summary>
            <param name="p">Specifies the item to add.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ValueDescriptorCollection.Find(System.String)">
            <summary>
            Searches for a parameter by name in the collection.
            </summary>
            <param name="strName">Specifies the name to look for.</param>
            <returns>If found, the item is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ValueDescriptorCollection.GetEnumerator">
            <summary>
            Returns the enumerator of the collection.
            </summary>
            <returns>The collection's enumerator is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ValueDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator of the collection.
            </summary>
            <returns>The collection's enumerator is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.descriptors.ParameterDescriptorCollection">
            <summary>
            The ParameterDescriptorCollection class contains a list of ParameterDescriptor's.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ParameterDescriptorCollection.#ctor">
            <summary>
            The ParameterDescriptorCollection constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ParameterDescriptorCollection.#ctor(MyCaffe.basecode.descriptors.ParameterDescriptorCollection)">
            <summary>
            The ParameterDescriptorCollection constructor.
            </summary>
            <param name="rg">Specifies another collection used to create this one.</param>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ParameterDescriptorCollection.Count">
            <summary>
            Returns the count of items in the collection.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ParameterDescriptorCollection.Item(System.Int32)">
            <summary>
            Returns the item at a given index within the collection.
            </summary>
            <param name="nIdx">Specifies the index.</param>
            <returns>Returns the item as the index.</returns>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ParameterDescriptorCollection.Add(MyCaffe.basecode.descriptors.ParameterDescriptor)">
            <summary>
            Adds a ParameterDescriptor to the collection.
            </summary>
            <param name="p">Specifies the item to add.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ParameterDescriptorCollection.Find(System.String)">
            <summary>
            Searches for a parameter by name in the collection.
            </summary>
            <param name="strName">Specifies the name to look for.</param>
            <returns>If found, the item is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ParameterDescriptorCollection.Find(System.String,System.String)">
            <summary>
            Searches for a parameter by name and returns its string value if found, or a default string value if not.
            </summary>
            <param name="strName">Specifies the name to look for.</param>
            <param name="strDefault">Specifies the default value to return if not found.</param>
            <returns>The string value of the named parameter is returned if found, otherwise the default string value is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ParameterDescriptorCollection.Find(System.String,System.Double)">
            <summary>
            Searches for a parameter by name and returns its value as a <i>double</i> if found, or a default <i>double</i> value if not.
            </summary>
            <param name="strName">Specifies the name to look for.</param>
            <param name="dfDefault">Specifies the default value to return if not found.</param>
            <returns>The <i>double</i> value of the named parameter is returned if found, otherwise the default <i>double</i> value is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ParameterDescriptorCollection.Find(System.String,System.Boolean)">
            <summary>
            Searches for a parameter by name and returns its value as a <i>bool</i> if found, or a default <i>bool</i> value if not.
            </summary>
            <param name="strName">Specifies the name to look for.</param>
            <param name="bDefault">Specifies the default value to return if not found.</param>
            <returns>The <i>bool</i> value of the named parameter is returned if found, otherwise the default <i>bool</i> value is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ParameterDescriptorCollection.GetEnumerator">
            <summary>
            Returns the enumerator of the collection.
            </summary>
            <returns>The collection's enumerator is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ParameterDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator of the collection.
            </summary>
            <returns>The collection's enumerator is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.descriptors.ProjectDescriptor">
            <summary>
            The ProjectDescriptor class contains all information describing a project, such as its: dataset, group, settings, solver description, model description, and parmeters.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ProjectDescriptor.#ctor(System.String)">
            <summary>
            The ProjectDescriptor constructor.
            </summary>
            <param name="strName">Specifies the name of the item.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ProjectDescriptor.#ctor(System.Int32,System.String,MyCaffe.basecode.descriptors.DatasetDescriptor,MyCaffe.basecode.descriptors.GroupDescriptor,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,MyCaffe.basecode.SettingsCaffe,System.String)">
            <summary>
            The ProjectDescriptor constructor.
            </summary>
            <param name="nID">Specifies the database ID of the item.</param>
            <param name="strName">Specifies the name of the item.</param>
            <param name="ds">Specifies the dataset used.</param>
            <param name="grp">Specifies the project group.</param>
            <param name="strSolverName">Specifies the solver name.</param>
            <param name="strSolverDesc">Specifies the solver description script.</param>
            <param name="strModelName">Specifies the model name.</param>
            <param name="strModelDesc">Specifies the model description script.</param>
            <param name="strGpuOverride">Specifies the GPU ID's to use as an override.</param>
            <param name="nTotalIterations">Specifies the total number of iterations.</param>
            <param name="bActive">Specifies whether or not the project is active.</param>
            <param name="settings">Specifies the settings to use.</param>
            <param name="strOwner">Specifies the identifier of the item's owner.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ProjectDescriptor.#ctor(MyCaffe.basecode.descriptors.ProjectDescriptor)">
            <summary>
            The ProjectDescriptor constructor.
            </summary>
            <param name="p">Specifies another ProjectDescriptor used to create this one.</param>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ProjectDescriptor.GpuOverride">
            <summary>
            Get/set the GPU ID's to use as an override.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ProjectDescriptor.Dataset">
            <summary>
            Get/set the dataset used.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ProjectDescriptor.DatasetTarget">
            <summary>
            Get/set the secondary 'target' dataset (if used).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ProjectDescriptor.Group">
            <summary>
            Get/set the project group.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ProjectDescriptor.SolverName">
            <summary>
            Get/set the solver name.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ProjectDescriptor.SolverDescription">
            <summary>
            Get/set the solver description script.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ProjectDescriptor.ModelName">
            <summary>
            Get/set the model name.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ProjectDescriptor.ModelDescription">
            <summary>
            Get/set the model description script.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ProjectDescriptor.TotalIterations">
            <summary>
            Get/set the total iterations.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ProjectDescriptor.Active">
            <summary>
            Returns whether or not the project is active.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ProjectDescriptor.Parameters">
            <summary>
            Returns the collection of parameters of the Project.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ProjectDescriptor.AnalysisItems">
            <summary>
            Returns the collection of analysis ValueDescriptors of the Project.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ProjectDescriptor.Settings">
            <summary>
            Get/set the settings of the Project.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ProjectDescriptor.ToString">
            <summary>
            Creates the string representation of the descriptor.
            </summary>
            <returns>The string representation of the descriptor is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.descriptors.SourceDescriptor">
            <summary>
            The SourceDescriptor class contains all information describing a data source.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.SourceDescriptor.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.String,System.Int32,System.Collections.Generic.List{MyCaffe.basecode.descriptors.LabelDescriptor},System.String)">
            <summary>
            The SourceDescriptor constructor.
            </summary>
            <param name="nID">Specifies the database ID of the item.</param>
            <param name="strName">Specifies the name of the item.</param>
            <param name="nWd">Specifies the width of each data item.</param>
            <param name="nHt">Specifies the height of each data item.</param>
            <param name="nCh">Specifies the channels of each data item.</param>
            <param name="bIsRealData">Specifies whether or not the data items contain real data or <i>byte</i> data.</param>
            <param name="bSaveImagesToFile">Specifies whether the images are saved to the file system (<i>true</i>), or directly to the database (<i>false</i>).</param>
            <param name="nCopyOfSourceId">Specifies whether or not this is a copy of another source and if so, this is the ID of the original source.</param>
            <param name="strOwner">Optionally, specifies the identifier of the item's owner.</param>
            <param name="nCount">Optionallty, specifies the number of items in the data source.</param>
            <param name="rgLabels">Optionally, specifies a list of LabelDescriptors that describe the labels used by the data items.</param>
            <param name="strLabelCounts">Optionally, specifies a string containing the label counts.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.SourceDescriptor.#ctor(System.String,System.Boolean)">
            <summary>
            The SourceDescriptor constructor.
            </summary>
            <param name="strName">Specifies the name of the item.</param>
            <param name="bSaveImagesToFile">Specifies whether the images are saved to the file system (<i>true</i>), or directly to the database (<i>false</i>).</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.SourceDescriptor.#ctor(MyCaffe.basecode.descriptors.SourceDescriptor)">
            <summary>
            The SourceDescriptor constructor.
            </summary>
            <param name="s">Specifies another SourceDescriptor used to create this one.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.SourceDescriptor.Copy(MyCaffe.basecode.descriptors.SourceDescriptor)">
            <summary>
            Copy another SourceDesciptor into this one.
            </summary>
            <param name="sd">Specifies the SourceDesciptor to copy.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.SourceDescriptor.Resize(System.Int32,System.Int32,System.Int32)">
            <summary>
            Resize the testing and training data sources.
            </summary>
            <param name="nChannels">Specifies the new channel size.</param>
            <param name="nHeight">Specifies the new height size.</param>
            <param name="nWidth">Specifies the new width size.</param>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.SourceDescriptor.SaveImagesToFile">
            <summary>
            Gets whether or not the images are saved to the file system (<i>true</i>), or directly to the database (<i>false</i>).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.SourceDescriptor.CopyOfSourceID">
            <summary>
            Get/set the Source ID from which this source was copied.  If this Source is an original, this property should be 0.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.SourceDescriptor.Labels">
            <summary>
            Get/set the list of LabelDescriptors that describe the labels used by the data items.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.SourceDescriptor.ImageHeight">
            <summary>
            Returns the height of each data item in the data source.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.SourceDescriptor.ImageWidth">
            <summary>
            Returns the width of each data item in the data source.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.SourceDescriptor.ImageChannels">
            <summary>
            Returns the image colors - 1 channel = black/white, 3 channels = RGB color.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.SourceDescriptor.IsRealData">
            <summary>
            Returns whether or not the each data point represents a real or integer number.  Integer numbers are used for black/white and color images where each data point falls within the range [0 - 255].
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.SourceDescriptor.ImageCount">
            <summary>
            Returns the number of images within this data source.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.SourceDescriptor.InactiveImageCount">
            <summary>
            Returns the number of inactive images within this data source.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.SourceDescriptor.SetInactiveImageCount(System.Int32)">
            <summary>
            Set the number of inactive images within this data source.
            </summary>
            <param name="nCount"></param>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.SourceDescriptor.LabelCountsAsText">
            <summary>
            Get/set a string that lists the number of images for each label associated with this data source.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.SourceDescriptor.ToString">
            <summary>
            Return a string representation of thet SourceDescriptor.
            </summary>
            <returns>The string representation is returned.</returns>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.SourceDescriptor.Parameters">
            <summary>
            Get/set the source parameters (if any).
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.descriptors.StateDescriptor">
            <summary>
            The StateDescriptor class contains the information related to the state of a project incuding the solver state and weights.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.StateDescriptor.#ctor(System.Int32,System.String,System.String)">
            <summary>
            The StateDescriptor constructor.
            </summary>
            <param name="nId">Specifies the database ID of the item.</param>
            <param name="strName">Specifies the name of the item.</param>
            <param name="strOwner">Specifies the identifier of the item's owner.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.StateDescriptor.#ctor(System.Int32,System.String,System.Byte[],System.Byte[],System.Double,System.Double,System.Int32,System.String)">
            <summary>
            The StateDescriptor constructor.
            </summary>
            <param name="nId">Specifies the database ID of the item.</param>
            <param name="strName">Specifies the name of the item.</param>
            <param name="rgWeights">Specifies the weights of a trained Net.</param>
            <param name="rgState">Specifies the state of a Solver in training.</param>
            <param name="dfAccuracy">Specifies the accuracy observed while testing.</param>
            <param name="dfError">Specifies the error observed whiel training.</param>
            <param name="nIterations">Specifies the number of iterations run.</param>
            <param name="strOwner">Specifies the identifier of the item's owner.</param>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.StateDescriptor.HasResults">
            <summary>
            Returns whether or not the state has results (e.g. it has been trained at least to some degree).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.StateDescriptor.Weights">
            <summary>
            Get/set the weights of a trained Net.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.StateDescriptor.State">
            <summary>
            Get/set the state of a Solver in training.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.StateDescriptor.Accuracy">
            <summary>
            Returns the accuracy observed while testing.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.StateDescriptor.Error">
            <summary>
            Specifies the error observed whiel training.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.StateDescriptor.Iterations">
            <summary>
            Specifies the number of iterations run.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.StateDescriptor.ToString">
            <summary>
            Creates the string representation of the descriptor.
            </summary>
            <returns>The string representation of the descriptor is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.descriptors.ValueDescriptor">
            <summary>
            The ValueDescriptor class contains the description of a single value.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ValueDescriptor.#ctor(System.Int32,System.String,System.Double,System.String)">
            <summary>
            The ValueDescriptor constructor.
            </summary>
            <param name="nID">Specifies the database ID of the item.</param>
            <param name="strName">Specifies the name of the item.</param>
            <param name="dfVal">Specifies the value of the item.</param>
            <param name="strOwner">Specifies the identifier of the item's owner.</param>
        </member>
        <member name="M:MyCaffe.basecode.descriptors.ValueDescriptor.#ctor(MyCaffe.basecode.descriptors.ValueDescriptor)">
            <summary>
            The ValueDescriptor constructor.
            </summary>
            <param name="v">Specifies another ValueDescriptor used to create this one.</param>
        </member>
        <member name="P:MyCaffe.basecode.descriptors.ValueDescriptor.Value">
            <summary>
            Returns the value of the item.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.DirectBitmap">
            <summary>
            The DirectBitmap class provides an efficient bitmap creating class.
            </summary>
            <remarks>
            @see [C# - Faster Alternatives to SetPixel and GetPixel for Bitmaps for Windows Forms App](https://stackoverflow.com/questions/24701703/c-sharp-faster-alternatives-to-setpixel-and-getpixel-for-bitmaps-for-windows-f), Stackoverflow.com.
            </remarks>
        </member>
        <member name="P:MyCaffe.basecode.DirectBitmap.Bitmap">
            <summary>
            Returns the Bitmap itself.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.DirectBitmap.Bits">
            <summary>
            Returns an array containing the raw bitmap data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.DirectBitmap.Disposed">
            <summary>
            Returns <i>true</i> when disposed.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.DirectBitmap.Height">
            <summary>
            Returns the bitmap height.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.DirectBitmap.Width">
            <summary>
            Returns the bitmap width.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.DirectBitmap.BitsHandle">
            <summary>
            Returns the bitmap memory handle.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.DirectBitmap.#ctor(System.Int32,System.Int32)">
            <summary>
            The constructro.
            </summary>
            <param name="width">Specifies the bitmap width.</param>
            <param name="height">Specifies the bitmap height.</param>
        </member>
        <member name="M:MyCaffe.basecode.DirectBitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets a pixel within the bitmap with the specified color.
            </summary>
            <param name="x">Specifies the x position of the pixel.</param>
            <param name="y">Specifies the y position of the pixel.</param>
            <param name="colour">Specifies the color to set the pixel.</param>
        </member>
        <member name="M:MyCaffe.basecode.DirectBitmap.SetRow(System.Int32,System.Drawing.Color)">
            <summary>
            Set an entire row to the same color.
            </summary>
            <param name="y">Specifies the row.</param>
            <param name="colour">Specifies the color.</param>
        </member>
        <member name="M:MyCaffe.basecode.DirectBitmap.GetPixel(System.Int32,System.Int32)">
            <summary>
            Returns the color of a pixel in the bitmap.
            </summary>
            <param name="x">Specifies the x position of the pixel.</param>
            <param name="y">Specifies the y position of the pixel.</param>
            <returns>The color of the pixel is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.DirectBitmap.Dispose">
            <summary>
            Release all resources used.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.GenericList`1">
            <summary>
            The GenericList provides a base used to implement a generic list by only implementing the minimum amount of the list functionality.
            </summary>
            <typeparam name="T">The base type of the list.</typeparam>
        </member>
        <member name="F:MyCaffe.basecode.GenericList`1.m_rgItems">
            <summary>
            The actual list of items.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.GenericList`1.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.GenericList`1.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.GenericList`1.Add(`0)">
            <summary>
            Add a new item to the list.
            </summary>
            <param name="item">Specifies the item to add.</param>
        </member>
        <member name="M:MyCaffe.basecode.GenericList`1.Remove(`0)">
            <summary>
            Remove an item from the list.
            </summary>
            <param name="item">Specifies the item to remove.</param>
            <returns>If the item is found and removed <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.GenericList`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at a given index in the list.
            </summary>
            <param name="nIdx">Specifies the index at which to remove the item.</param>
        </member>
        <member name="M:MyCaffe.basecode.GenericList`1.Clear">
            <summary>
            Remove all items from the list.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.GenericList`1.GetEnumerator">
            <summary>
            Get the list enumerator.
            </summary>
            <returns>The enumerator is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.GenericList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the list enumerator.
            </summary>
            <returns>The enumerator is returned.</returns>
        </member>
        <member name="P:MyCaffe.basecode.GenericList`1.Item(System.Int32)">
            <summary>
            Get/set the item at an index in the list.
            </summary>
            <param name="nIdx">Specifies the index of the item to access.</param>
            <returns>The item is returned at the given index.</returns>
        </member>
        <member name="T:MyCaffe.basecode.Datum">
            <summary>
            The Datum class is a simple wrapper to the SimpleDatum class to ensure compatibility with the original C++ %Caffe code.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.Datum.#ctor">
            <summary>
            The Datum constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.Datum.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Int32,System.Boolean,System.Int32)">
            <summary>
            The Datum constructor.
            </summary>
            <param name="bIsReal">Specifies whether or not the data values are <i>double</i> or <i>byte</i>.</param>
            <param name="nChannels">Specifies the number of channels in the data (e.g. 3 for color, 1 for black and white images)</param>
            <param name="nWidth">Specifies the width of the data (e.g. the number of pixels wide).</param>
            <param name="nHeight">Specifies the height of the data (e.g. the number of pixels high).</param>
            <param name="nLabel">Optionally, specifies the known label of the data (default = -1).</param>
            <param name="dtTime">Optionally, specifies a time-stamp associated with the data (default = null).</param>
            <param name="nBoost">Optionally, specifies the boost to use with the data (default = 0, where a value of 0 indicates no boost).</param>
            <param name="bAutoLabeled">Optionally, specifies whether or not the label was auto-generated (default = false).</param>
            <param name="nIdx">Optionally, specifies the index of the data (default = -1).</param>
        </member>
        <member name="M:MyCaffe.basecode.Datum.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Collections.Generic.List{System.Byte},System.Int32,System.Boolean,System.Int32)">
            <summary>
            The Datum constructor.
            </summary>
            <param name="bIsReal">Specifies whether or not the data values are <i>double</i> or <i>byte</i>.</param>
            <param name="nChannels">Specifies the number of channels in the data (e.g. 3 for color, 1 for black and white images)</param>
            <param name="nWidth">Specifies the width of the data (e.g. the number of pixels wide).</param>
            <param name="nHeight">Specifies the height of the data (e.g. the number of pixels high).</param>
            <param name="nLabel">Specifies the known label of the data.</param>
            <param name="dtTime">Specifies a time-stamp associated with the data.</param>
            <param name="rgData">Specifies the data as a list of <i>bytes</i> (expects <i>bIsReal</i> = <i>false</i>).</param>
            <param name="nBoost">Specifies the boost to use with the data (a value of 0 indicates no boost).</param>
            <param name="bAutoLabeled">Specifies whether or not the label was auto-generated.</param>
            <param name="nIdx">Specifies the index of the data.</param>
        </member>
        <member name="M:MyCaffe.basecode.Datum.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Collections.Generic.List{System.Double},System.Int32,System.Boolean,System.Int32)">
            <summary>
            The Datum constructor.
            </summary>
            <param name="bIsReal">Specifies whether or not the data values are <i>double</i> or <i>byte</i>.</param>
            <param name="nChannels">Specifies the number of channels in the data (e.g. 3 for color, 1 for black and white images)</param>
            <param name="nWidth">Specifies the width of the data (e.g. the number of pixels wide).</param>
            <param name="nHeight">Specifies the height of the data (e.g. the number of pixels high).</param>
            <param name="nLabel">Specifies the known label of the data.</param>
            <param name="dtTime">Specifies a time-stamp associated with the data.</param>
            <param name="rgfData">Specifies the data as a list of <i>double</i> (expects <i>bIsReal</i> = <i>true</i>).</param>
            <param name="nBoost">Specifies the boost to use with the data (a value of 0 indicates no boost).</param>
            <param name="bAutoLabeled">Specifies whether or not the label was auto-generated.</param>
            <param name="nIdx">Specifies the index of the data.</param>
        </member>
        <member name="M:MyCaffe.basecode.Datum.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Collections.Generic.List{System.Single},System.Int32,System.Boolean,System.Int32)">
            <summary>
            The Datum constructor.
            </summary>
            <param name="bIsReal">Specifies whether or not the data values are <i>double</i> or <i>byte</i>.</param>
            <param name="nChannels">Specifies the number of channels in the data (e.g. 3 for color, 1 for black and white images)</param>
            <param name="nWidth">Specifies the width of the data (e.g. the number of pixels wide).</param>
            <param name="nHeight">Specifies the height of the data (e.g. the number of pixels high).</param>
            <param name="nLabel">Specifies the known label of the data.</param>
            <param name="dtTime">Specifies a time-stamp associated with the data.</param>
            <param name="rgfData">Specifies the data as a list of <i>float</i> (expects <i>bIsReal</i> = <i>true</i>).</param>
            <param name="nBoost">Specifies the boost to use with the data (a value of 0 indicates no boost).</param>
            <param name="bAutoLabeled">Specifies whether or not the label was auto-generated.</param>
            <param name="nIdx">Specifies the index of the data.</param>
        </member>
        <member name="M:MyCaffe.basecode.Datum.#ctor(MyCaffe.basecode.SimpleDatum,System.Boolean)">
            <summary>
            The Datum constructor.
            </summary>
            <param name="d">Specifies a SimpleDatum used to create this new Datum.</param>
            <param name="bCopyData">Specifies whether or not to copy the data, or just share it.</param>
        </member>
        <member name="M:MyCaffe.basecode.Datum.#ctor(MyCaffe.basecode.Datum,System.Boolean)">
            <summary>
            The Datum constructor.
            </summary>
            <param name="d">Specifies another Datum to copy when creating this Datum.</param>
            <param name="bCopyData">Specifies whether or not to copy the data, or just share it.</param>
        </member>
        <member name="P:MyCaffe.basecode.Datum.channels">
            <summary>
            Returns the number of channels in the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Datum.height">
            <summary>
            Specifies the height of the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Datum.width">
            <summary>
            Specifies the width of the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Datum.index">
            <summary>
            Specifies the index of the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Datum.float_data">
            <summary>
            Returns the data as an array of <i>float</i>.  The datum must be initialized with <i>bIsReal</i> = <i>true</i> with <i>float</i> data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Datum.double_data">
            <summary>
            Returns the data as an array of <i>double</i>.  The datum must be initialized with <i>bIsReal</i> = <i>true</i> with <i>double</i> data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Datum.data">
            <summary>
            Returns the non-real data as an array of <i>bytes</i>.  The datum must be initialized with <i>bIsReal</i> = <i>false</i>.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Datum.label">
            <summary>
            Returns the known label of the data.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.LogProgressArg">
            <summary>
            The LogProgressArg is passed as an argument to the Log::OnProgress event.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.LogProgressArg.#ctor(System.String,System.Double)">
            <summary>
            The LogProgressArg constructor.
            </summary>
            <param name="strSrc">Specifies the Log source name.</param>
            <param name="dfProgress">Specifies the progress value.</param>
        </member>
        <member name="P:MyCaffe.basecode.LogProgressArg.Source">
            <summary>
            Returns the Log source name.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.LogProgressArg.Progress">
            <summary>
            Returns the progress value.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.LogArg">
            <summary>
            The LogArg is passed as an argument to the Log::OnWriteLine event.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.LogArg.#ctor(System.String,System.String,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The LogArg constructor.
            </summary>
            <param name="strSrc">Specifies the Log source name.</param>
            <param name="strMsg">Specifies the message written when calling the Log::WriteLine function (which triggers the event).</param>
            <param name="dfProgress">Specifies the progress value specifies when setting the Log::Progress value.</param>
            <param name="bError">Specifies whether or not the message is the result of a call from Log::WriteError.</param>
            <param name="bOverrideEnabled">Specifies whether or not the log override was used.</param>
            <param name="bDisable">Specifies whether or not to disable the output of the message (e.g. used internally).</param>
        </member>
        <member name="P:MyCaffe.basecode.LogArg.Consumed">
            <summary>
            Specifies whether or not the message has already been consumed.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.LogArg.Disable">
            <summary>
            Specifies whether or not to mark this log entry as disabled so that it is not output.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.LogArg.Message">
            <summary>
            Returns the message logged.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.LogArg.Error">
            <summary>
            Returns whether or not this is an error message.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.LogArg.OverrideEnabled">
            <summary>
            Returns whether or not the override was enabled or not.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.CalculateImageMeanArgs">
            <summary>
            The CalculateImageMeanArgs is passed as an argument to the CaffeImageDatabase::OnCalculateImageMean event.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.CalculateImageMeanArgs.#ctor(MyCaffe.basecode.SimpleDatum[])">
            <summary>
            The CalculateImageMeanArgs constructor.
            </summary>
            <param name="rgImg">Specifies the list of images from which the mean should be calculated.</param>
        </member>
        <member name="P:MyCaffe.basecode.CalculateImageMeanArgs.Images">
            <summary>
            Specifies the list of images from which the mean should be calculated.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.CalculateImageMeanArgs.ImageMean">
            <summary>
            Get/set the image mean calculated from the <i>Images</i>.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.CalculateImageMeanArgs.Cancelled">
            <summary>
            Get/set a flag indicating to cancel the operation.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.OverrideProjectArgs">
            <summary>
            The OverrideProjectArgs is passed as an argument to the OnOverrideModel and OnOverrideSolver events fired by the ProjectEx class.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.OverrideProjectArgs.#ctor(MyCaffe.basecode.RawProto)">
            <summary>
            The OverrideProjectArgs constructor.
            </summary>
            <param name="proto">Specifies the RawProtot.</param>
        </member>
        <member name="P:MyCaffe.basecode.OverrideProjectArgs.Proto">
            <summary>
            Get/set the RawProto used.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.ImageData">
            <summary>
            The ImageData class is a helper class used to convert between Datum, other raw data, and Images such as a Bitmap.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.ImageData.GetImageData(System.Drawing.Bitmap,MyCaffe.basecode.SimpleDatum,System.Nullable{System.Boolean})">
            <summary>
            The GetImageData function converts a Bitmap into a Datum.
            </summary>
            <param name="bmp">Specifies the Bitmap containing the image.</param>
            <param name="sd">Specifies the SimpleDatum that defines the channels, 'IsDataReal' and label settings.</param>
            <param name="bIsDataRealOverride">Optionally, specifies an override for the 'IsDataReal' setting.</param>
            <returns>The Datum representing the image is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ImageData.GetImageDataD(System.Drawing.Bitmap,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            The GetImageDataD function converts a Bitmap into a Datum using the <i>double</i> type for real data.
            </summary>
            <param name="bmp">Specifies the Bitmap containing the image.</param>
            <param name="nChannels">Specifies the number of channels contained in the Bitmap (e.g. 3 = color, 1 = black and white).</param>
            <param name="bDataIsReal">Specifies whether or not to add each color to the List of <i>double</i> or to the list of <i>byte</i>.  Using the <i>byte</i> array is more common for it already separates a 3 color Bitmap into 3 channels of data.</param>
            <param name="nLabel">Specifies the known label.</param>
            <param name="bUseLockBitmap">Optionally, use the Lock Bitmap which is faster but may produce corrupted images in a few scenarios (default = true).</param>
            <returns>The Datum representing the image is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ImageData.GetImageDataF(System.Drawing.Bitmap,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            The GetImageDataF function converts a Bitmap into a Datum using the <i>float</i> type for real data.
            </summary>
            <param name="bmp">Specifies the Bitmap containing the image.</param>
            <param name="nChannels">Specifies the number of channels contained in the Bitmap (e.g. 3 = color, 1 = black and white).</param>
            <param name="bDataIsReal">Specifies whether or not to add each color to the List of <i>double</i> or to the list of <i>byte</i>.  Using the <i>byte</i> array is more common for it already separates a 3 color Bitmap into 3 channels of data.</param>
            <param name="nLabel">Specifies the known label.</param>
            <param name="bUseLockBitmap">Optionally, use the Lock Bitmap which is faster but may produce corrupted images in a few scenarios (default = true).</param>
            <returns>The Datum representing the image is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ImageData.GetImageData``1(``0[],System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            The GetImageData function converts an array of type 'T' into a Datum.
            </summary>
            <param name="rgData">Specifies the array of type 'T'.</param>
            <param name="nChannels">Specifies the number of channels contained in the Bitmap (e.g. 3 = color, 1 = black and white).</param>
            <param name="nHeight">Specifies the height of the data.</param>
            <param name="nWidth">Specifies the width of the data.</param>
            <param name="bDataIsReal">Specifies whether or not to add each color to the List of <i>double</i> or to the list of <i>byte</i>.  Using the <i>byte</i> array is more common for it already separates a 3 color Bitmap into 3 channels of data.</param>
            <param name="nStartIdx">Specifies where to start the conversion within the data.</param>
            <param name="nCount">Specifies the number of items within the data to convert.</param>
            <returns>The Datum representing the image is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ImageData.GetImage(MyCaffe.basecode.SimpleDatum,MyCaffe.basecode.ColorMapper,System.Collections.Generic.List{System.Int32})">
            <summary>
            Converts a SimplDatum (or Datum) into an image, optionally using a ColorMapper.
            </summary>
            <param name="d">Specifies the Datum to use.</param>
            <param name="clrMap">Optionally, specifies a color mapper to use when converting each value into a color (default = null, not used).</param>
            <param name="rgClrOrder">Optionally, specifies the color ordering. Note, this list must have the same number of elements as there are channels.</param>
            <returns>The Image of the data is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ImageData.GetImage(System.Collections.Generic.List{MyCaffe.basecode.Result},System.Drawing.Size,MyCaffe.basecode.ColorMapper)">
            <summary>
            Converts a list of KeyValuePairs into an image using a ColorMapper.
            </summary>
            <param name="rg">Specifies a KeyValuePair where the Value is converted to a color.</param>
            <param name="sz">Specifies the size of the image.</param>
            <param name="clrMap">Specifies a color mapper to use when converting each value into a color.</param>
            <returns>The Image of the data is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.ImageTools">
            <summary>
            The ImageTools class is a helper class used to manipulate image data.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.ImageTools.ADJUSTCONTRAST_ORDERING">
            <summary>
            Defines the odering for which the AdjustContrast applies brightness, contrast and gamma adjustments.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.ImageTools.ADJUSTCONTRAST_ORDERING.BRIGHTNESS_CONTRAST_GAMMA">
            <summary>
            Applies brightness, then contrast, then adjust gamma.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.ImageTools.ADJUSTCONTRAST_ORDERING.BRIGHTNESS_GAMMA_CONTRAST">
            <summary>
            Applies brightness, then adjusts gamma, then adjusts contrast.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.ImageTools.ResizeImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Resize the image to the specified width and height.
            </summary>
            <param name="image">The image to resize.</param>
            <param name="width">The width to resize to.</param>
            <param name="height">The height to resize to.</param>
            <returns>The resized image.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ImageTools.AdjustContrast(System.Drawing.Image,System.Single,System.Single,System.Single)">
            <summary>
            The AdjustContrast function adjusts the brightness, contrast and gamma of the image and returns the newly adjusted image.
            </summary>
            <param name="bmp">Specifies the image to adjust.</param>
            <param name="fBrightness">Specifies the brightness to apply.</param>
            <param name="fContrast">Specifies the contrast to apply.</param>
            <param name="fGamma">Specifies the gamma to apply.</param>
            <returns>The updated image is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ImageTools.applyBrightness(System.Int32@,System.Int32@,System.Int32@,System.Single)">
            <summary>
            Apply the brightness to the pixel.
            </summary>
            <remarks>
            @see [Image Processing Algorithms Part 4: Brightness Adjustment](https://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-4-brightness-adjustment/)
            </remarks>
            <param name="nR">Specifies the red color of the pixel.</param>
            <param name="nG">Specifies the green color of the pixel.</param>
            <param name="nB">Specifies the blue color of the pixel.</param>
            <param name="fBrightness">Specifies the brightness adjustment in the range [1,255] (note 255 will cause complete saturation).</param>
        </member>
        <member name="M:MyCaffe.basecode.ImageTools.applyContrast(System.Int32@,System.Int32@,System.Int32@,System.Single)">
            <summary>
            Apply the contrast to the pixel.
            </summary>
            <remarks>
            @see [Image Processing Algorithms Part 5: Contrast Adjustment](https://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-5-contrast-adjustment/)
            </remarks>
            <param name="nR">Specifies the red color of the pixel.</param>
            <param name="nG">Specifies the green color of the pixel.</param>
            <param name="nB">Specifies the blue color of the pixel.</param>
            <param name="fContrast">Specifies the brightness adjustment in the range [0.0, 2.0].</param>
        </member>
        <member name="M:MyCaffe.basecode.ImageTools.applyGamma(System.Int32@,System.Int32@,System.Int32@,System.Single)">
            <summary>
            Apply the gamma correction to the pixel.
            </summary>
            <remarks>
            @see [Image Processing Algorithms Part 6: Gamma Correction](https://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-6-gamma-correction/)
            </remarks>
            <param name="nR">Specifies the red color of the pixel.</param>
            <param name="nG">Specifies the green color of the pixel.</param>
            <param name="nB">Specifies the blue color of the pixel.</param>
            <param name="fGamma">Specifies the brightness adjustment in the range [0.01, 7.99].</param>
        </member>
        <member name="M:MyCaffe.basecode.ImageTools.AdjustContrast(MyCaffe.basecode.SimpleDatum,System.Single,System.Single,System.Single,MyCaffe.basecode.ImageTools.ADJUSTCONTRAST_ORDERING)">
            <summary>
            The AdjustContrast function adjusts the brightness, contrast and gamma of the image and returns the newly adjusted image.
            </summary>
            <param name="sd">Specifies the SimpleDatum to adjust.</param>
            <param name="fBrightness">Specifies the brightness to apply.</param>
            <param name="fContrast">Specifies the contrast to apply.</param>
            <param name="fGamma">Specifies the gamma to apply.</param>
            <param name="ordering">Specifies the ordering for which the brightness, contrast and gamma are applied.</param>
            <returns>The updated image is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ImageTools.ImageToByteArray(System.Drawing.Image)">
            <summary>
            Converts an Image into an array of <i>byte</i>.
            </summary>
            <param name="imageIn">Specifies the Image.</param>
            <returns>The array of <i>byte</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ImageTools.ByteArrayToImage(System.Byte[])">
            <summary>
            Converts an array of <i>byte</i> into an Image.
            </summary>
            <param name="byteArrayIn">Specifies the array of <i>byte</i>.</param>
            <returns>The Image is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ImageTools.Center(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            Find the first and last colored rows of an image and centers the colored portion of the image vertically.
            </summary>
            <param name="bmp">Specifies the image to center.</param>
            <param name="clrBackground">Specifies the back-ground color to use for the non-colored portions.</param>
            <returns>The centered Image is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.TRAINING_CATEGORY">
            <summary>
            Defines the category of training.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.TRAINING_CATEGORY.NONE">
            <summary>
            No training category specified.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.TRAINING_CATEGORY.CUSTOM">
            <summary>
            Defines a purely custom training method.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.TRAINING_CATEGORY.REINFORCEMENT">
            <summary>
            Defines the reinforcement training method such as PG.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.TRAINING_CATEGORY.RECURRENT">
            <summary>
            Defines the recurrent training method.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.TRAINING_CATEGORY.DUAL">
            <summary>
            Defines the reinforcement training method such as PG that also uses a recurrent model such as LSTM.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.Phase">
            <summary>
            Defines the Phase under which to run a Net.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.Phase.NONE">
            <summary>
            No phase defined.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.Phase.TRAIN">
            <summary>
            Run a training phase.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.Phase.TEST">
            <summary>
            Run a testing phase.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.Phase.RUN">
            <summary>
            Run on an image given to the Net.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.Phase.ALL">
            <summary>
            Applies to all phases.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.Stage">
            <summary>
            Specifies the stage underwhich to run a custom trainer.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.Stage.NONE">
            <summary>
            No stage defined.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.Stage.RNN">
            <summary>
            Run the trainer in RNN mode.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.Stage.RL">
            <summary>
            Run the trainer in RL mode.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.Stage.ALL">
            <summary>
            Applies to all stages.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.GYM_TYPE">
            <summary>
            Defines the gym type (if any).
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.GYM_TYPE.NONE">
            <summary>
            Specifies that the type is not a gym.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.GYM_TYPE.DYNAMIC">
            <summary>
            Specifies a dynamic gym type that dynamically produces its data.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.GYM_TYPE.DATA">
            <summary>
            Specifies a data gym that collects data from a data source, such as a database.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.DATA_TYPE">
            <summary>
            Defines the gym data type.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.DATA_TYPE.DEFAULT">
            <summary>
            Specifies to use the default data type of the gym used.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.DATA_TYPE.VALUES">
            <summary>
            Specifies to use the raw state values of the gym (if supported).
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.DATA_TYPE.BLOB">
            <summary>
            Specifies to use a SimpleDatum blob of data of the gym (if supported).
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.IMAGEDB_LOAD_METHOD">
            <summary>
            Defines how to laod the images into the image database.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMAGEDB_LOAD_METHOD.LOAD_ON_DEMAND">
            <summary>
            Load the images as they are queried - this option cahces images into memory as needed, training speeds are slower up until all images are loaded into memory.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMAGEDB_LOAD_METHOD.LOAD_ALL">
            <summary>
            Load all of the images into memory - this option provides the highest training speeds, but can use a lot of memory and takes time to load.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMAGEDB_LOAD_METHOD.LOAD_EXTERNAL">
            <summary>
            Load the images from an external source such as a Windows Service - this option provides the best balance of speed and short load times for once loaded all applications share the in-memory data.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMAGEDB_LOAD_METHOD.LOAD_ON_DEMAND_BACKGROUND">
            <summary>
            Load the image as they are queried AND start the background loading at the same time.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMAGEDB_LOAD_METHOD.LOAD_ON_DEMAND_NOCACHE">
            <summary>
            Load the images on demand, but do not cache the images - this option loads images from disk as needed and does not cache them thus saving memory use.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.SNAPSHOT_WEIGHT_UPDATE_METHOD">
            <summary>
            Defines the snapshot weight update method.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SNAPSHOT_WEIGHT_UPDATE_METHOD.DISABLED">
            <summary>
            Disables all snapshots.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SNAPSHOT_WEIGHT_UPDATE_METHOD.FAVOR_ACCURACY">
            <summary>
            Update the snapshot weights when the accuracy increases.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SNAPSHOT_WEIGHT_UPDATE_METHOD.FAVOR_ERROR">
            <summary>
            Update the snapshot weights when the error decreases.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SNAPSHOT_WEIGHT_UPDATE_METHOD.FAVOR_BOTH">
            <summary>
            Update the snapshot weights when the accuracy increases or the error decreases.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.SNAPSHOT_LOAD_METHOD">
            <summary>
            Defines the snapshot load method.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SNAPSHOT_LOAD_METHOD.LAST_STATE">
            <summary>
            Load the last solver state snapshotted.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SNAPSHOT_LOAD_METHOD.WEIGHTS_BEST_ACCURACY">
            <summary>
            Load the weights with the best accuracy (which may not be the last).
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SNAPSHOT_LOAD_METHOD.WEIGHTS_BEST_ERROR">
            <summary>
            Load the weights with the best error (which may not be the last).
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SNAPSHOT_LOAD_METHOD.STATE_BEST_ACCURACY">
            <summary>
            Load the state with the best accuracy (which may not be the last).
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SNAPSHOT_LOAD_METHOD.STATE_BEST_ERROR">
            <summary>
            Load the state with the best error (which may not be the last).
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.ApVersion">
            <summary>
            Defines the different way of computing average precision.
            </summary>
            <remarks>
            @see [Tag: Average Precision](https://sanchom.wordpress.com/tag/average-precision) by Sanchom
            </remarks>
        </member>
        <member name="F:MyCaffe.basecode.ApVersion.ELEVENPOINT">
            <summary>
            Specifies the 11-point interpolated average precision, used in VOC2007.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.ApVersion.MAXINTEGRAL">
            <summary>
            Specifies the maximally interpolated AP, used in VOC2012/ILSVRC.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.ApVersion.INTEGRAL">
            <summary>
            Specifies the natural integral of the precision-recall curve.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.ITestKnownFailures">
            <summary>
            Defines the ITest interface used by the Test module to return its known failures.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ITestKnownFailures.KnownFailures">
            <summary>
            Get the known failures of the test module.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.ITestKnownFailures.GetPriority(System.String,System.String)">
            <summary>
            Get the priority of a class::method pair.
            </summary>
            <param name="strClass">Specifies the class.</param>
            <param name="strMethod">Specifies the method.</param>
            <returns>The priority is returned with 0 being the top priority.</returns>
        </member>
        <member name="T:MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD">
            <summary>
            Defines the image selection method.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD.NONE">
            <summary>
            No selection method used, select sequentially by index.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD.RANDOM">
            <summary>
            Randomly select the images, ignore the input index.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD.PAIR">
            <summary>
            Pair select the images where the first query returns a randomly selected image,
            and the next query returns the image just following the last queried image.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD.RANDOM_AND_PAIR">
            <summary>
            Combines RANDOM + PAIR for marshalling.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD.BOOST">
            <summary>
            Randomly select, but given higher priority to boosted images using the super-boost setting.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD.RANDOM_AND_BOOST">
            <summary>
            Combines RANDOM + BOOST for marshalling.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD.RANDOM_AND_PAIR_AND_BOOST">
            <summary>
            Combines RANDOM + PAIR + BOOST for marshalling.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD.FIXEDINDEX">
            <summary>
            Specifically select based on the input index.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD.CLEARFIXEDINDEX">
            <summary>
            Clear the fixed index.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.IMGDB_LABEL_SELECTION_METHOD">
            <summary>
            Defines the label selection method.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_LABEL_SELECTION_METHOD.NONE">
            <summary>
            Don't use label selection and instead select from the general list of all images.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_LABEL_SELECTION_METHOD.RANDOM">
            <summary>
            Randomly select the label set.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_LABEL_SELECTION_METHOD.BOOST">
            <summary>
            Randomly select the label set but give a higher priority to boosted label sets using their boost values.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.IMGDB_SORT">
            <summary>
            Defines the sorting method.
            </summary>
            <remarks>BYDESC and BYDATE can be compbined which causes the images to be sorted by description first and then by time.  BYID cannot be combined with other sorting methods.</remarks>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_SORT.NONE">
            <summary>
            No sorting performed.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_SORT.BYDESC">
            <summary>
            Sort by description first.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_SORT.BYTIME">
            <summary>
            Sort by time.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_SORT.BYID">
            <summary>
            Sort by image ID.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_SORT.BYID_DESC">
            <summary>
            Sort by image ID in decending order.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_SORT.BYIDX">
            <summary>
            Sort by image Index.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.IMGDB_VERSION">
            <summary>
            Defines the image database version to use.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_VERSION.V1">
            <summary>
            Specifies to use the original image database.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_VERSION.V2">
            <summary>
            Specifies to use the new image database v2.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.IMGDB_VERSION.DEFAULT">
            <summary>
            Specifies the default version (currently V2)
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.IXImageDatabaseBase">
            <summary>
            The IXImageDatabaseBase interface defines the eneral interface to the in-memory image database.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.SetInstance(System.String)">
            <summary>
            Set the database instance to use.
            </summary>
            <param name="strInstance">Specifies the instance name to use in '.\\name' format.</param>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.InitializeWithDsName1(MyCaffe.basecode.SettingsCaffe,System.String,System.String)">
            <summary>
            Initializes the image database.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <param name="strDs">Specifies the data set to load.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.InitializeWithDs1(MyCaffe.basecode.SettingsCaffe,MyCaffe.basecode.descriptors.DatasetDescriptor,System.String)">
            <summary>
            Initializes the image database.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <param name="ds">Specifies the data set to load.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.InitializeWithDsId1(MyCaffe.basecode.SettingsCaffe,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes the image database.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <param name="nDataSetID">Specifies the database ID of the data set to load.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <param name="nPadW">Specifies the padding to add to each image width (default = 0).</param>
            <param name="nPadH">Specifies the padding to add to each image height (default = 0).</param>
            <returns>Returns <i>true</i> on success, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.LoadDatasetByID1(System.Int32,System.String)">
            <summary>
            Load another, 'secondary' dataset.
            </summary>
            <remarks>
            The primary dataset should be loaded using one of the 'Initialize' methods.  This method is provided to allow for loading
            multiple datasets.
            </remarks>
            <param name="nDsId">Specifies the ID of the data set.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>When loaded, the handle to the default query state is returned, otherwise 0 is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.LoadDatasetByName1(System.String,System.String)">
            <summary>
            Load another, 'secondary' dataset.
            </summary>
            <remarks>
            The primary dataset should be loaded using one of the 'Initialize' methods.  This method is provided to allow for loading
            multiple datasets.
            </remarks>
            <param name="strDs">Specifies the name of the data set.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>When loaded, the handle to the default query state is returned, otherwise 0 is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.CleanUp(System.Int32,System.Boolean)">
            <summary>
            Releases the image database, and if this is the last instance using the in-memory database, frees all memory used.
            </summary>
            <param name="nDsId">Optionally, specifies the dataset previously used.</param>
            <param name="bForce">Optionally, force the cleanup even if other users are using the database.</param>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetVersion">
            <summary>
            Returns the version of the MyCaffe Image Database being used.
            </summary>
            <returns>Returns the version.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetLoadImageDataCriteria">
            <summary>
            Returns whether or not the image data criteria is loaded with each image.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetLoadImageDebugData">
            <summary>
            Returns whether or not the image debug data is loaded with each image.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetSelectionMethod">
            <summary>
            Returns the label and image selection method used.
            </summary>
            <returns>A tuple containing the Label and Image selection method.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.SetSelectionMethod(System.Nullable{MyCaffe.basecode.IMGDB_LABEL_SELECTION_METHOD},System.Nullable{MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD})">
            <summary>
            Sets the label and image selection methods.
            </summary>
            <param name="lbl">Specifies the label selection method or <i>null</i> to ignore.</param>
            <param name="img">Specifies the image selection method or <i>null</i> to ignore.</param>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetDatasetLoadedPercentByName(System.String,System.Double@,System.Double@)">
            <summary>
            Returns the percentage that a dataset is loaded into memory.
            </summary>
            <param name="strDataset">Specifies the name of the dataset.</param>
            <param name="dfTraining">Specifies the percent of training images that are loaded.</param>
            <param name="dfTesting">Specifies the percent of testing images that are loaded.</param>
            <returns>The current image load percent for the dataset is returned..</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetDatasetLoadedPercentById(System.Int32,System.Double@,System.Double@)">
            <summary>
            Returns the percentage that a dataset is loaded into memory.
            </summary>
            <param name="nDatasetID">Specifies the ID of the dataset.</param>
            <param name="dfTraining">Specifies the percent of training images that are loaded.</param>
            <param name="dfTesting">Specifies the percent of testing images that are loaded.</param>
            <returns>The current image load percent for the dataset is returned..</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetBoostQueryHitPercentsAsTextFromSourceName(System.String)">
            <summary>
            Returns a string with the query hit percent for each boost (e.g. the percentage that each boost value has been queried).
            </summary>
            <param name="strSource">Specifies the data source who's hit percentages are to be retrieved.</param>
            <returns>A string representing the query hit percentages is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetLabelQueryHitPercentsAsTextFromSourceName(System.String)">
            <summary>
            Returns a string with the query hit percent for each label (e.g. the percentage that each label has been queried).
            </summary>
            <param name="strSource">Specifies the data source who's hit percentages are to be retrieved.</param>
            <returns>A string representing the query hit percentages is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetLabelQueryEpocsAsTextFromSourceName(System.String)">
            <summary>
            Returns a string with the query epoch counts for each label (e.g. the number of times all images with the label have been queried).
            </summary>
            <param name="strSource">Specifies the data source who's query epochs are to be retrieved.</param>
            <returns>A string representing the query epoch counts is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetImageCount(System.Int32,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the number of images in a given data source.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <returns>The number of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetSourceById(System.Int32)">
            <summary>
            Returns the SourceDescriptor for a given data source ID.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <returns>The SourceDescriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetSourceByName(System.String)">
            <summary>
            Returns the SourceDescriptor for a given data source name.
            </summary>
            <param name="strSrc">Specifies the data source name.</param>
            <returns>The SourceDescriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetSourceName(System.Int32)">
            <summary>
            Returns a data source name given its ID.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <returns>The data source name is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetSourceID(System.String)">
            <summary>
            Returns a data source ID given its name.
            </summary>
            <param name="strSrc">Specifies the data source name.</param>
            <returns>The data source ID is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetDatasetById(System.Int32)">
            <summary>
            Returns the DatasetDescriptor for a given data set ID.
            </summary>
            <param name="nDsId">Specifies the data set ID.</param>
            <returns>The dataset Descriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetDatasetByName(System.String)">
            <summary>
            Returns the DatasetDescriptor for a given data set name.
            </summary>
            <param name="strDs">Specifies the data set name.</param>
            <returns>The dataset Descriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetDatasetName(System.Int32)">
            <summary>
            Returns a data set name given its ID.
            </summary>
            <param name="nDsId">Specifies the data set ID.</param>
            <returns>The data set name is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetDatasetID(System.String)">
            <summary>
            Returns a data set ID given its name.
            </summary>
            <param name="strDs">Specifies the data set name.</param>
            <returns>The data set ID is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.ReloadDataset(System.Int32)">
            <summary>
            Reload a data set.
            </summary>
            <param name="nDsId">Specifies the ID of the data set.</param>
            <returns>If the data set is found, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.ReloadImageSet(System.Int32)">
            <summary>
            Reloads the images of a data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>If the data source is found, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.UnloadDatasetByName(System.String)">
            <summary>
            The UnloadDataset function unloads a given dataset from memory.
            </summary>
            <param name="strDataset">Specifies the name of the dataset to unload.</param>
            <returns>If the dataset is found and removed, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.UnloadDatasetById(System.Int32)">
            <summary>
            The UnloadDataset function unloads a given dataset from memory.
            </summary>
            <param name="nDatasetID">Specifies the ID of the dataset to unload.</param>
            <remarks>Specifiying a dataset ID of -1 directs the UnloadDatasetById to unload ALL datasets loaded.</remarks>
            <returns>If the dataset is found and removed, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.QueryImage(System.Int32,System.Int32,System.Nullable{MyCaffe.basecode.IMGDB_LABEL_SELECTION_METHOD},System.Nullable{MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Query an image in a given data source.
            </summary>
            <param name="nSrcId">Specifies the databse ID of the data source.</param>
            <param name="nIdx">Specifies the image index to query.  Note, the index is only used in non-random image queries.</param>
            <param name="labelSelectionOverride">Optionally, specifies the label selection method override.  The default = null, which directs the method to use the label selection method specified during Initialization.</param>
            <param name="imageSelectionOverride">Optionally, specifies the image selection method override.  The default = null, which directs the method to use the image selection method specified during Initialization.</param>
            <param name="nLabel">Optionally, specifies a label set to use for the image selection.  When specified only images of this label are returned using the image selection method.</param>
            <param name="bLoadDataCriteria">Specifies to load the data criteria data (default = false).</param>
            <param name="bLoadDebugData">Specifies to load the debug data (default = false).</param>
            <returns>The image SimpleDatum is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetImagesFromIndex(System.Int32,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="nStartIdx">Specifies a starting index from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <param name="bAttemptDirectLoad">Optionaly, specifies to directly load all images not already loaded.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetImagesFromTime(System.Int32,System.DateTime,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="dtStart">Specifies a starting time from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetImages(System.Int32,System.Int32[],System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="rgIdx">Specifies an array of indexes to query.</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetImage(System.Int32,System.Int32[])">
            <summary>
            Get the image with a given Raw Image ID.
            </summary>
            <param name="nImageID">Specifies the Raw Image ID of the image to get.</param>
            <param name="rgSrcId">Specifies a list of Source ID's to search for the image.</param>
            <returns>The SimpleDatum of the image is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.FindImageIndex(System.Int32,System.DateTime,System.String)">
            <summary>
            Searches for the image index of an image within a data source matching a DateTime/description pattern.
            </summary>
            <remarks>
            Optionally, images may have a time-stamp and/or description associated with each image.  In such cases
            searching by the time-stamp + description can be useful in some instances.
            </remarks>
            <param name="nSrcId">Specifies the data source ID of the data source to be searched.</param>
            <param name="dt">Specifies the time-stamp to search for.</param>
            <param name="strDescription">Specifies the description to search for.</param>
            <returns>If found the zero-based index of the image is returned, otherwise -1 is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.QueryImageMean(System.Int32)">
            <summary>
            Queries the image mean for a data source from the database on disk.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>The image mean is returned as a SimpleDatum.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.QueryImageMeanFromDb(System.Int32)">
            <summary>
            Queries the image mean for a data source from the database on disk.
            </summary>
            <remarks>
            If the image mean does not exist in the database, one is created, saved
            and then returned.
            </remarks>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>The image mean is returned as a SimpleDatum.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetImageMean(System.Int32)">
            <summary>
            Returns the image mean for a data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>The image mean is returned as a SimpleDatum.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.QueryImageMeanFromDataset(System.Int32)">
            <summary>
            Returns the image mean for the Training data source of a given data set.
            </summary>
            <param name="nDatasetId">Specifies the data set to use.</param>
            <returns>The image mean is returned as a SimpleDatum.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetLabels(System.Int32)">
            <summary>
            Returns a list of LabelDescriptor%s associated with the labels within a data source.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <returns>The list of LabelDescriptor%s is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetLabelName(System.Int32,System.Int32)">
            <summary>
            Returns the text name of a given label within a data source. 
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="nLabel">Specifies the label.</param>
            <returns>The laben name is returned as a string.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.SetLabelMapping(System.Int32,MyCaffe.basecode.LabelMapping)">
            <summary>
            Sets the label mapping to the database for a given data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <param name="map">Specifies the label mapping to set.</param>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.UpdateLabelMapping(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Updates the label mapping in the database for a given data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <param name="nNewLabel">Specifies a new label.</param>
            <param name="rgOriginalLabels">Specifies the original lables that are mapped to the new label.</param>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.ResetLabels(System.Int32,System.Int32)">
            <summary>
            Resets all labels within a data source, used by a project, to their original labels.
            </summary>
            <param name="nProjectId">Specifies the ID of the project.</param>
            <param name="nSrcId">Specifies the ID of the data source.</param>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.UpdateLabelCounts(System.Int32,System.Int32)">
            <summary>
            Updates the number of images of each label within a data source.
            </summary>
            <param name="nProjectId">Specifies a project ID.</param>
            <param name="nSrcId">Specifies the ID of the data source.</param>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.LoadLabelCounts(System.Int32)">
            <summary>
            Returns a label lookup of counts for a given data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>A dictionary containing label,count pairs is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetLabelCountsAsTextFromSourceId(System.Int32)">
            <summary>
            Returns a string with all label counts for a data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>A string containing all label counts is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabaseBase.GetLabelCountsAsTextFromSourceName(System.String)">
            <summary>
            Returns a string with all label counts for a data source.
            </summary>
            <param name="strSource">Specifies the name of the data source.</param>
            <returns>A string containing all label counts is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.IXImageDatabase1">
            <summary>
            The IXImageDatabase interface defines the eneral interface to the in-memory image database.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase1.UpdateLabelBoosts(System.Int32,System.Int32)">
            <summary>
            Updates the label boosts for the images based on the label boosts set for the given project.
            </summary>
            <param name="nProjectId">Specifies the project ID in the database.</param>
            <param name="nSrcId">Specifies the data source ID.</param>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase1.ResetQuery(System.Int32)">
            <summary>
            Reset the query for the given data set ID.
            </summary>
            <param name="nDsID">Specifies the data set ID whos query indexes are to be reset.</param>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase1.Sort(System.Int32,MyCaffe.basecode.IMGDB_SORT)">
            <summary>
            Sort the internal images.
            </summary>
            <param name="nSrcId">Specifies the databse ID of the data source.</param>
            <param name="method">Specifies the sorting method.</param>
            <returns>If the sorting is successful, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase1.CreateDatasetOranizedByTime(System.Int32)">
            <summary>
            Create a dynamic dataset organized by time from a pre-existing dataset.
            </summary>
            <param name="nDsId">Specifies the database ID of the dataset to copy.</param>
            <returns>The dataset ID of the newly created dataset is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase1.DeleteCreatedDataset(System.Int32)">
            <summary>
            Delete a dataset created with CreateDatasetOrganizedByTime.
            </summary>
            <param name="nDsId">Specifies the dataset ID of the created dataset.</param>
            <returns>If successful, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase1.DeleteAllCreatedDatasets">
            <summary>
            Delete all datasets created with CreateDatasetOrganizedByTime.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase1.DeleteLabelBoosts(System.Int32,System.Int32)">
            <summary>
            Delete all label boosts for a given data source associated with a given project.
            </summary>
            <param name="nProjectId">Specifies the project ID.</param>
            <param name="nSrcId">Specifies the ID of the data source.</param>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase1.AddLabelBoost(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Add a label boost for a data source associated with a given project.
            </summary>
            <param name="nProjectId">Specifies the project ID.</param>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <param name="nLabel">Specifies the label.</param>
            <param name="dfBoost">Specifies the new boost for the label.</param>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase1.GetLabelBoostsAsTextFromProject(System.Int32,System.Int32)">
            <summary>
            Returns the label boosts as a text string for all boosted labels within a data source associated with a given project. 
            </summary>
            <param name="nProjectId">Specifies the project ID.</param>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>The label boosts are returned as a text string.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase1.LoadNextSet(System.String)">
            <summary>
            When using a <i>Load Limit</i> that is greater than 0, this function loads the next set of images.
            </summary>
            <param name="strEvtCancel">Specifies the name of the Cancel Event to abort loading the images.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> otherwise.</returns>
        </member>
        <member name="T:MyCaffe.basecode.IXImageDatabase2">
            <summary>
            The IXImageDatabase2 interface defines the general interface to the in-memory image database (v2).
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.InitializeWithDsName(MyCaffe.basecode.SettingsCaffe,System.String,System.String)">
            <summary>
            Initializes the image database.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <param name="strDs">Specifies the data set to load.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>Upon loading the dataset a handle to the default QueryState is returned (which is ordered by Index), or 0 on cancel.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.InitializeWithDs(MyCaffe.basecode.SettingsCaffe,MyCaffe.basecode.descriptors.DatasetDescriptor,System.String)">
            <summary>
            Initializes the image database.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <param name="ds">Specifies the data set to load.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>Upon loading the dataset a handle to the default QueryState is returned (which is ordered by Index), or 0 on cancel.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.InitializeWithDsId(MyCaffe.basecode.SettingsCaffe,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes the image database.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <param name="nDataSetID">Specifies the database ID of the data set to load.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <param name="nPadW">Specifies the padding to add to each image width (default = 0).</param>
            <param name="nPadH">Specifies the padding to add to each image height (default = 0).</param>
            <returns>Upon loading the dataset a handle to the default QueryState is returned (which is ordered by Index), or 0 on cancel.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.LoadDatasetByID(System.Int32,System.String)">
            <summary>
            Load another, 'secondary' dataset.
            </summary>
            <remarks>
            The primary dataset should be loaded using one of the 'Initialize' methods.  This method is provided to allow for loading
            multiple datasets.
            </remarks>
            <param name="nDsId">Specifies the ID of the data set.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>When loaded, the handle to the default query state is returned, otherwise 0 is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.LoadDatasetByName(System.String,System.String)">
            <summary>
            Load another, 'secondary' dataset.
            </summary>
            <remarks>
            The primary dataset should be loaded using one of the 'Initialize' methods.  This method is provided to allow for loading
            multiple datasets.
            </remarks>
            <param name="strDs">Specifies the name of the data set.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>When loaded, the handle to the default query state is returned, otherwise 0 is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.ReloadIndexing(System.Int32)">
            <summary>
            Reload the indexing for a data set.
            </summary>
            <param name="nDsId">Specifies the dataset ID.</param>
            <returns>If the data source(s) have their indexing reloaded, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.ReloadIndexing(System.String)">
            <summary>
            Reload the indexing for a data set.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <returns>If the data source(s) have their indexing reloaded, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.WaitForDatasetToLoad(System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Wait for the dataset loading to complete.
            </summary>
            <param name="nDsId">Specifies the dataset ID.</param>
            <param name="bTraining">Specifies to wait for the training data source to load.</param>
            <param name="bTesting">Specifies to wait for the testing data source to load.</param>
            <param name="nWait">Specifies the amount of time to wait in ms. (default = int.MaxValue).</param>
            <returns>If the data source(s) complete loading, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.WaitForDatasetToLoad(System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Wait for the dataset loading to complete.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="bTraining">Specifies to wait for the training data source to load.</param>
            <param name="bTesting">Specifies to wait for the testing data source to load.</param>
            <param name="nWait">Specifies the amount of time to wait in ms. (default = int.MaxValue).</param>
            <returns>If the data source(s) complete loading, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.CreateQueryState(System.Int32,System.Boolean,System.Boolean,MyCaffe.basecode.IMGDB_SORT)">
            <summary>
            Create a new query state, optionally with a certain ordering.
            </summary>
            <param name="nDsId">Specifies the dataset on which the query states are to be created.</param>
            <param name="bUseUniqueLabelIndexes">Optionally, specifies to use unique label indexes which is slightly slower, but ensures each label is hit per epoch equally (default = true).</param>
            <param name="bUseUniqueImageIndexes">Optionally, specifies to use unique image indexes which is slightly slower, but ensures each image is hit per epoch (default = true).</param>
            <param name="sort">Optionally, specifies an index ordering (default = NONE).</param>
            <returns>A handle to the new query state is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.CreateQueryState(System.String,System.Boolean,System.Boolean,MyCaffe.basecode.IMGDB_SORT)">
            <summary>
            Create a new query state, optionally with a certain ordering.
            </summary>
            <param name="strDs">Specifies the dataset on which the query states are to be created.</param>
            <param name="bUseUniqueLabelIndexes">Optionally, specifies to use unique label indexes which is slightly slower, but ensures each label is hit per epoch equally (default = true).</param>
            <param name="bUseUniqueImageIndexes">Optionally, specifies to use unique image indexes which is slightly slower, but ensures each image is hit per epoch (default = true).</param>
            <param name="sort">Optionally, specifies an index ordering (default = NONE).</param>
            <returns>A handle to the new query state is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.SetDefaultQueryState(System.Int32,System.Int64)">
            <summary>
            Set the default query state to the query state specified for the dataset specified.
            </summary>
            <param name="nDsId">Specifies the dataset ID.</param>
            <param name="lQueryState">Specifies the query state to set.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> on failure.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.SetDefaultQueryState(System.String,System.Int64)">
            <summary>
            Set the default query state to the query state specified for the dataset specified.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="lQueryState">Specifies the query state to set.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> on failure.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.FreeQueryState(System.Int32,System.Int64)">
            <summary>
            Frees a query state from a given dataset.
            </summary>
            <param name="nDsId">Specifies the dataset on which to free the query state.</param>
            <param name="lHandle">Specifies the handle to the query state to free.</param>
            <returns>If found and freed, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.FreeQueryState(System.String,System.Int64)">
            <summary>
            Frees a query state from a given dataset.
            </summary>
            <param name="strDs">Specifies the dataset name on which to free the query state.</param>
            <param name="lHandle">Specifies the handle to the query state to free.</param>
            <returns>If found and freed, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.GetLabelQueryHitPercentsAsTextFromSourceName(System.Int64,System.String)">
            <summary>
            Returns a string with the query hit percent for each label (e.g. the percentage that each label has been queried).
            </summary>
            <param name="lQueryState">Specifies the handle to the query state.</param>
            <param name="strSource">Specifies the data source who's hit percentages are to be retrieved.</param>
            <returns>A string representing the query hit percentages is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.GetLabelQueryEpocsAsTextFromSourceName(System.Int64,System.String)">
            <summary>
            Returns a string with the query epoch counts for each label (e.g. the number of times all images with the label have been queried).
            </summary>
            <param name="lQueryState">Specifies the handle to the query state.</param>
            <param name="strSource">Specifies the data source who's query epochs are to be retrieved.</param>
            <returns>A string representing the query epoch counts is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.GetBoostQueryHitPercentsAsTextFromSourceName(System.Int64,System.String)">
            <summary>
            Returns a string with the query hit percent for each boost (e.g. the percentage that each boost value has been queried).
            </summary>
            <param name="lQueryState">Specifies the handle to the query state.</param>
            <param name="strSource">Specifies the data source who's hit percentages are to be retrieved.</param>
            <returns>A string representing the query hit percentages is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.GetImageCount(System.Int64,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the number of images in a given data source.
            </summary>
            <param name="lQueryState">Specifies a handle to the query state to use.</param>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <returns>The number of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.GetImagesFromIndex(System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="lQueryState">Specifies a handle to the query state to use.</param>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="nStartIdx">Specifies a starting index from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <param name="bAttemptDirectLoad">Optionaly, specifies to directly load all images not already loaded.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.GetImagesFromTime(System.Int64,System.Int32,System.DateTime,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="lQueryState">Specifies a handle to the query state to use.</param>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="dtStart">Specifies a starting time from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.QueryImage(System.Int64,System.Int32,System.Int32,System.Nullable{MyCaffe.basecode.IMGDB_LABEL_SELECTION_METHOD},System.Nullable{MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Query an image in a given data source.
            </summary>
            <param name="lQueryState">Specifies a handle to the query state to use.</param>
            <param name="nSrcId">Specifies the databse ID of the data source.</param>
            <param name="nIdx">Specifies the image index to query.  Note, the index is only used in non-random image queries.</param>
            <param name="labelSelectionOverride">Optionally, specifies the label selection method override.  The default = null, which directs the method to use the label selection method specified during Initialization.</param>
            <param name="imageSelectionOverride">Optionally, specifies the image selection method override.  The default = null, which directs the method to use the image selection method specified during Initialization.</param>
            <param name="nLabel">Optionally, specifies a label set to use for the image selection.  When specified only images of this label are returned using the image selection method.</param>
            <param name="bLoadDataCriteria">Specifies to load the data criteria data (default = false).</param>
            <param name="bLoadDebugData">Specifies to load the debug data (default = false).</param>
            <returns>The image SimpleDatum is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.ResetAllBoosts(System.Int32)">
            <summary>
            Reset all in-memory image boosts.
            </summary>
            <remarks>
            This does not impact the boost setting within the physical database.
            </remarks>
            <param name="nSrcId">Specifies the source ID of the data set to reset.</param>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.WaitForDatasetToRefresh(System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Wait for the dataset refreshing to complete.
            </summary>
            <param name="nDsId">Specifies the dataset ID.</param>
            <param name="bTraining">Specifies to wait for the training data source to refresh.</param>
            <param name="bTesting">Specifies to wait for the testing data source to refresh.</param>
            <param name="nWait">Specifies the amount of time to wait in ms. (default = int.MaxValue).</param>
            <returns>If the data source(s) complete refreshing, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.WaitForDatasetToRefresh(System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Wait for the dataset refreshing to complete.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="bTraining">Specifies to wait for the training data source to refresh.</param>
            <param name="bTesting">Specifies to wait for the testing data source to refresh.</param>
            <param name="nWait">Specifies the amount of time to wait in ms. (default = int.MaxValue).</param>
            <returns>If the data source(s) complete refreshing, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.IsRefreshRunning(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns true if the refresh operation running.
            </summary>
            <param name="nDsId">Specifies the dataset ID.</param>
            <param name="bTraining">Specifies to check the training data source for refresh.</param>
            <param name="bTesting">Specifies to check the testing data source for refresh.</param>
            <returns>If the refresh is running, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.IsRefreshRunning(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns true if the refresh operation running.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="bTraining">Specifies to check the training data source for refresh.</param>
            <param name="bTesting">Specifies to check the testing data source for refresh.</param>
            <returns>If the refresh is running, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.StartRefresh(System.String,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Start a refresh on the dataset by replacing a specified percentage of the images with images from the physical database.
            </summary>
            <remarks>
            Note, this method is only valid when initialized with LoadLimit > 0.
            </remarks>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="bTraining">Specifies the training data source to refresh.</param>
            <param name="bTesting">Specifies the testing data source to refresh.</param>
            <param name="dfReplacementPct">Optionally, specifies the replacement percentage to use (default = 0.25 for 25%).</param>
            <returns>On succes, true is returned, otherwise false is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.StopRefresh(System.String,System.Boolean,System.Boolean)">
            <summary>
            Stop a refresh operation running on the dataset.
            </summary>
            <remarks>
            Note, this method is only valid when initialized with LoadLimit > 0.
            </remarks>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="bTraining">Specifies the training data source to strop refreshing.</param>
            <param name="bTesting">Specifies the testing data source to stop refreshing.</param>
            <returns>On succes, true is returned, otherwise false is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.StartRefresh(System.Int32,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Start a refresh on the dataset by replacing a specified percentage of the images with images from the physical database.
            </summary>
            <remarks>
            Note, this method is only valid when initialized with LoadLimit > 0.
            </remarks>
            <param name="nDsID">Specifies the dataset ID.</param>
            <param name="bTraining">Specifies the training data source to refresh.</param>
            <param name="bTesting">Specifies the testing data source to refresh.</param>
            <param name="dfReplacementPct">Optionally, specifies the replacement percentage to use (default = 0.25 for 25%).</param>
            <returns>On succes, true is returned, otherwise false is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.StopRefresh(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Stop a refresh operation running on the dataset.
            </summary>
            <remarks>
            Note, this method is only valid when initialized with LoadLimit > 0.
            </remarks>
            <param name="nDsID">Specifies the dataset ID.</param>
            <param name="bTraining">Specifies the training data source to strop refreshing.</param>
            <param name="bTesting">Specifies the testing data source to stop refreshing.</param>
            <returns>On succes, true is returned, otherwise false is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.StartAutomaticRefreshSchedule(System.String,System.Boolean,System.Boolean,System.Int32,System.Double)">
            <summary>
            Start the automatic refresh cycle to occur on specified period increments.
            </summary>
            <param name="strDs">Specifies the dataset name for which the automatic refresh cycle is to run.</param>
            <param name="bTraining">Specifies the training data source to start refreshing.</param>
            <param name="bTesting">Specifies the testing data source to start refreshing.</param>
            <param name="nPeriodInMs">Specifies the period in milliseconds over which the auto refresh cycle is to run.</param>
            <param name="dfReplacementPct">Specifies the percentage of replacement to use on each cycle.</param>
            <returns>If successfully started, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.StopAutomaticRefreshSchedule(System.String,System.Boolean,System.Boolean)">
            <summary>
            Stop the automatic refresh schedule running on a dataset.
            </summary>
            <param name="strDs">Specifies the dataset name for which the automatic refresh cycle is to run.</param>
            <param name="bTraining">Specifies the training data source to stop refreshing.</param>
            <param name="bTesting">Specifies the testing data source to stop refreshing.</param>
            <returns>If successfully stopped, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.GetScheduledAutoRefreshInformation(System.String,System.Int32@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            Returns whether or not a scheduled refresh is running and if so at what period and replacement percent.
            </summary>
            <param name="strDs">Specifies the dataset name for which the automatic refresh cycle is to run.</param>
            <param name="nPeriodInMs">Returns the period in milliseconds over which the auto refresh cycle is run.</param>
            <param name="dfReplacementPct">Returns the percentage of replacement to use on each cycle.</param>
            <param name="nTrainingRefreshCount">Returns the training refrsh count.</param>
            <param name="nTestingRefreshCount">Returns the testing refresh count.</param>
            <returns>If the refresh schedule is running, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.StartAutomaticRefreshSchedule(System.Int32,System.Boolean,System.Boolean,System.Int32,System.Double)">
            <summary>
            Start the automatic refresh cycle to occur on specified period increments.
            </summary>
            <param name="nDsID">Specifies the dataset ID for which the automatic refresh cycle is to run.</param>
            <param name="bTraining">Specifies the training data source to start refreshing.</param>
            <param name="bTesting">Specifies the testing data source to start refreshing.</param>
            <param name="nPeriodInMs">Specifies the period in milliseconds over which the auto refresh cycle is to run.</param>
            <param name="dfReplacementPct">Specifies the percentage of replacement to use on each cycle.</param>
            <returns>If successfully started, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.StopAutomaticRefreshSchedule(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Stop the automatic refresh schedule running on a dataset.
            </summary>
            <param name="nDsID">Specifies the dataset ID for which the automatic refresh cycle is to run.</param>
            <param name="bTraining">Specifies the training data source to stop refreshing.</param>
            <param name="bTesting">Specifies the testing data source to stop refreshing.</param>
            <returns>If successfully stopped, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.basecode.IXImageDatabase2.GetScheduledAutoRefreshInformation(System.Int32,System.Int32@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            Returns whether or not a scheduled refresh is running and if so at what period and replacement percent.
            </summary>
            <param name="nDsID">Specifies the dataset name for which the automatic refresh cycle is to run.</param>
            <param name="nPeriodInMs">Returns the period in milliseconds over which the auto refresh cycle is run.</param>
            <param name="dfReplacementPct">Returns the percentage of replacement to use on each cycle.</param>
            <param name="nTrainingRefreshCount">Returns the training refrsh count.</param>
            <param name="nTestingRefreshCount">Returns the testing refresh count.</param>
            <returns>If the refresh schedule is running, true is returned, otherwise false.</returns>
        </member>
        <member name="T:MyCaffe.basecode.LockBitmap">
            <summary>
            The LockBitmap class provides very efficient SetPixel and GetPixel functionality of a bitmap
            by using LockBits to directly access the bitmap data.
            </summary>
            <remarks>
            @see [Work with Bitmaps Faster in C#](https://www.codeproject.com/Tips/240428/Work-with-Bitmaps-Faster-in-Csharp-3) by Vano Maisuradze, Code Project, 2011
            Used and distributed under the [Code Project Open License (CPOL) 1.02](https://www.codeproject.com/info/cpol10.aspx)
            </remarks>
        </member>
        <member name="P:MyCaffe.basecode.LockBitmap.Pixels">
            <summary>
            Get/set the raw pixel byte data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.LockBitmap.Depth">
            <summary>
            Returns the depth of the bitmap.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.LockBitmap.Width">
            <summary>
            Returns the width of the bitmap.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.LockBitmap.Height">
            <summary>
            Returns the height of the bitmap.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.LockBitmap.#ctor(System.Drawing.Bitmap)">
            <summary>
            Sets the source bitmap.
            </summary>
            <param name="source">Specifies the source bitmap to use.</param>
        </member>
        <member name="M:MyCaffe.basecode.LockBitmap.LockBits">
            <summary>
            Lock bitmap data to access its underlying raw data.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.LockBitmap.UnlockBits">
            <summary>
            Unlock bitmap data, releasing its underlying data.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.LockBitmap.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get the color of the specified pixel
            </summary>
            <param name="x">Specifies the pixel x location.</param>
            <param name="y">Specifies the pixel y location.</param>
            <returns>The color of the pixel is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.LockBitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Set the color of the specified pixel
            </summary>
            <param name="x">Specifies the pixel x location.</param>
            <param name="y">Specifies the pixel y location.</param>
            <param name="color">Specifies the color to set the pixel.</param>
        </member>
        <member name="T:MyCaffe.basecode.Log">
            <summary>
            The Log class provides general output in text form.
            </summary>
        </member>
        <member name="E:MyCaffe.basecode.Log.OnWriteLine">
            <summary>
            The OnWriteLine event fires each time the WriteLine, WriteHeader or WriteError functions are called.
            </summary>
        </member>
        <member name="E:MyCaffe.basecode.Log.OnProgress">
            <summary>
            The OnProgress event fires each time the Progress value is set.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.Log.#ctor(System.String)">
            <summary>
            The Log constructor.
            </summary>
            <param name="strSrc">Specifies the source of the Log.</param>
        </member>
        <member name="P:MyCaffe.basecode.Log.Enable">
            <summary>
            Enables/disables the Log.  When disabled, the Log does not output any data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Log.IsEnabled">
            <summary>
            Returns whether or not the Log is enabled.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Log.PreText">
            <summary>
            Get/set the pre-text prepended to each output line when set.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Log.EnableTrace">
            <summary>
            Enables/disables the Trace.  When enabled, the .Net Trace.WriteLine is called in addition to the normal Log output.  This is primarily used when debugging.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.Log.WriteLine(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Write a line of output.
            </summary>
            <param name="str">Specifies the string to output.</param>
            <param name="bOverrideEnabled">Specifies whether or not to override the enabled state (default = false).</param>
            <param name="bHeader">Specifies whether or not the output text represents a header (default = false).</param>
            <param name="bError">Specfifies whether or not the output text represents an error (default = false).</param>
            <param name="bDisable">Specifies whether or not to disable the output of this line (e.g. used internally).</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.WriteHeader(System.String)">
            <summary>
            Write a header as output.
            </summary>
            <param name="str">Specifies the header text.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.WriteError(System.Exception)">
            <summary>
            Write an error as output.
            </summary>
            <param name="e">Specifies the error.</param>
        </member>
        <member name="P:MyCaffe.basecode.Log.Progress">
            <summary>
            Get/set the progress associated with the Log.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.Log.EXPECT_EQUAL``1(System.Double,System.Double,System.String)">
            <summary>
            Test whether two values are equal using a given type 'T'.
            </summary>
            <typeparam name="T">Specifies the resolution for the test: either <i>double</i> or <i>float</i>.</typeparam>
            <param name="df1">Specifies the first value to test.</param>
            <param name="df2">Specifies the second value to test.</param>
            <param name="str">Specifies the descriptive text to output if the test fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.EXPECT_NEAR_FLOAT(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Test whether two numbers are within a range (<i>dfErr</i>) of one another using the <i>float</i> resolution.
            </summary>
            <param name="df1">Specifies the first value to test.</param>
            <param name="df2">Specifies the second value to test.</param>
            <param name="dfErr">Specifies the acceptable error for the test.</param>
            <param name="str">Specifies the descriptive text to output if the test fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.EXPECT_NEAR(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Test whether two numbers are within a range (<i>dfErr</i>) of one another using the <i>double</i> resolution.
            </summary>
            <param name="df1">Specifies the first value to test.</param>
            <param name="df2">Specifies the second value to test.</param>
            <param name="dfErr">Specifies the acceptable error for the test.</param>
            <param name="str">Specifies the descriptive text to output if the test fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.CHECK(System.Boolean,System.String)">
            <summary>
            Test a flag for <i>true</i>.
            </summary>
            <param name="b">Specifies the flag to test.</param>
            <param name="str">Specifies the description text to output if the flag is <i>false</i>.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.CHECK_EQ(System.Double,System.Double,System.String)">
            <summary>
            Test whether one number is equal to another.
            </summary>
            <param name="df1">Specifies the first value to test.</param>
            <param name="df2">Specifies the second value to test.</param>
            <param name="str">Specifies the descriptive text to output if the test fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.CHECK_NE(System.Double,System.Double,System.String)">
            <summary>
            Test whether one number is not-equal to another.
            </summary>
            <param name="df1">Specifies the first value to test.</param>
            <param name="df2">Specifies the second value to test.</param>
            <param name="str">Specifies the descriptive text to output if the test fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.CHECK_LE(System.Double,System.Double,System.String)">
            <summary>
            Test whether one number is less than or equal to another.
            </summary>
            <param name="df1">Specifies the first value to test.</param>
            <param name="df2">Specifies the second value to test.</param>
            <param name="str">Specifies the descriptive text to output if the test fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.CHECK_LT(System.Double,System.Double,System.String)">
            <summary>
            Test whether one number is less than another.
            </summary>
            <param name="df1">Specifies the first value to test.</param>
            <param name="df2">Specifies the second value to test.</param>
            <param name="str">Specifies the descriptive text to output if the test fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.CHECK_GE(System.Double,System.Double,System.String)">
            <summary>
            Test whether one number is greater than or equal to another.
            </summary>
            <param name="df1">Specifies the first value to test.</param>
            <param name="df2">Specifies the second value to test.</param>
            <param name="str">Specifies the descriptive text to output if the test fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.CHECK_GT(System.Double,System.Double,System.String)">
            <summary>
            Test whether one number is greater than another.
            </summary>
            <param name="df1">Specifies the first value to test.</param>
            <param name="df2">Specifies the second value to test.</param>
            <param name="str">Specifies the descriptive text to output if the test fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.CHECK_EQ(System.Single,System.Single,System.String)">
            <summary>
            Test whether one number is equal to another.
            </summary>
            <param name="f1">Specifies the first value to test.</param>
            <param name="f2">Specifies the second value to test.</param>
            <param name="str">Specifies the descriptive text to output if the test fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.CHECK_NE(System.Single,System.Single,System.String)">
            <summary>
            Test whether one number is not equal to another.
            </summary>
            <param name="f1">Specifies the first value to test.</param>
            <param name="f2">Specifies the second value to test.</param>
            <param name="str">Specifies the descriptive text to output if the test fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.CHECK_LE(System.Single,System.Single,System.String)">
            <summary>
            Test whether one number is less-than or equal to another.
            </summary>
            <param name="f1">Specifies the first value to test.</param>
            <param name="f2">Specifies the second value to test.</param>
            <param name="str">Specifies the descriptive text to output if the test fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.CHECK_LT(System.Single,System.Single,System.String)">
            <summary>
            Test whether one number is less-than another.
            </summary>
            <param name="f1">Specifies the first value to test.</param>
            <param name="f2">Specifies the second value to test.</param>
            <param name="str">Specifies the descriptive text to output if the test fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.CHECK_GE(System.Single,System.Single,System.String)">
            <summary>
            Test whether one number is greater-than or equal to another.
            </summary>
            <param name="f1">Specifies the first value to test.</param>
            <param name="f2">Specifies the second value to test.</param>
            <param name="str">Specifies the descriptive text to output if the test fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.CHECK_GT(System.Single,System.Single,System.String)">
            <summary>
            Test whether one number is greater-than another.
            </summary>
            <param name="f1">Specifies the first value to test.</param>
            <param name="f2">Specifies the second value to test.</param>
            <param name="str">Specifies the descriptive text to output if the test fails.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.CHECK_BOUNDS(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Test whether a number falls within a set bound or not.
            </summary>
            <param name="f1">Specifies the number to test.</param>
            <param name="fmin">Specifies the lower bound.</param>
            <param name="fmax">Specifies the upper bound.</param>
            <param name="str">Specifies the message to output on failure.</param>
        </member>
        <member name="M:MyCaffe.basecode.Log.FAIL(System.String)">
            <summary>
            Causes a failure which throws an exception with the desciptive text.
            </summary>
            <param name="str">Specifies the descriptive text to output.</param>
        </member>
        <member name="T:MyCaffe.basecode.ProjectEx">
            <summary>
            The ProjectEx class manages a project containing the solver description, model description, data set (with training data source and testing data source) and
            project results.
            </summary>
        </member>
        <member name="E:MyCaffe.basecode.ProjectEx.OnOverrideModel">
            <summary>
            The OverrrideModel event fires each time the SetDataset function is called.
            </summary>
        </member>
        <member name="E:MyCaffe.basecode.ProjectEx.OnOverrideSolver">
            <summary>
            The OverrideSolver event fires each time the SetDataset function is called.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.#ctor(System.String,System.String)">
            <summary>
            The ProjectEx constructor.
            </summary>
            <param name="strName">Specifies the name of the project.</param>
            <param name="strDsName">Optionally, specifies the name of the dataset used by the project.</param>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.#ctor(MyCaffe.basecode.descriptors.ProjectDescriptor,MyCaffe.basecode.descriptors.StateDescriptor,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The ProjectEx constructor.
            </summary>
            <param name="prj">Specifies the project descriptor for the project.</param>
            <param name="state">Specifies the state descriptor for the project.</param>
            <param name="bExistTrain">Specifies whether or not training results exist for the proejct.</param>
            <param name="bExistTest">Specifies whether or not testing results exist for the project.</param>
            <param name="bQueryModel">Optionally, specifies whether or not to set (and parse) the model.</param>
            <param name="bQuerySolver">Optionally, specifies whether or not to set (and parse) the solver.</param>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.RequiresDataCriteria">
            <summary>
            Returns whether or not the data criteria is required by the current project model (e.g. the model contains an AnnotatedData layer).
            </summary>
            <returns>If the model requires the data criteria be loaded, then <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.DatasetAdjusted">
            <summary>
            Get/set whether or not the dataset for the project has been changed.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.GetCustomTrainer(System.String@)">
            <summary>
            Returns the custom trainer and properties used by the project (if any).
            </summary>
            <param name="strProperties">Specifies the properties associated with the custom trainer.  The properties are stored in the solver parameter field 'custom_trainer_propeties' as a list of comma ('=') separated key value pairs each separated by ';'</param>
            <remarks>An example set of properties uses the following format: key1=val1;key2=val2;...</remarks>
            <returns>The custom trainer name is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.GetBatchSize(MyCaffe.basecode.Phase)">
            <summary>
            Returns the batch size of the project used in a given Phase.
            </summary>
            <param name="phase">Specifies the Phase to use.</param>
            <returns>The batch size is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.GetLayerSetting(MyCaffe.basecode.Phase,System.String,System.String)">
            <summary>
            Returns the setting of a Layer (if found).
            </summary>
            <param name="phase">Specifies the Phase to use.</param>
            <param name="strLayer">Specifies the Layer name.</param>
            <param name="strParam">Specifies the Layer setting name to look for.</param>
            <returns>If found the setting value is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.GetSolverSetting(System.String)">
            <summary>
            Get a setting from the solver descriptor.
            </summary>
            <param name="strParam">Specifies the setting to retrieve.</param>
            <returns>The setting is returned if found, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.GetSolverSettingAsNumeric(System.String)">
            <summary>
            Get a setting from the solver descriptor as a double value.
            </summary>
            <param name="strParam">Specifies the setting to retrieve.</param>
            <returns>The setting is returned as a double if found, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.GetSolverSettingAsInt(System.String)">
            <summary>
            Get a setting from the solver descriptor as an integer value.
            </summary>
            <param name="strParam">Specifies the setting to retrieve.</param>
            <returns>The setting is returned as a int if found, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.GetSolverSettingAsBool(System.String)">
            <summary>
            Get a setting from the solver descriptor as a boolean value.
            </summary>
            <param name="strParam">Specifies the setting to retrieve.</param>
            <returns>The setting is returned as a bool if found, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.Settings">
            <summary>
            Get/set the Caffe setting to use with the Project.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.Name">
            <summary>
            Get/set the name of the Project.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.ID">
            <summary>
            Returns the ID of the Project in the database.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.Owner">
            <summary>
            Get/set the ID of the Project owner.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.Active">
            <summary>
            Returns whether or not the Project is active.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.TrainingCategory">
            <summary>
            Returns the training category of the project, or NONE if no custom trainer is used.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.Stage">
            <summary>
            Return the stage under which the project was opened.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.SuperBoostProbability">
            <summary>
            Get/set the super boost probability used by the Project.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.UseTrainingSourceForTesting">
            <summary>
            Returns whether or not the Project uses the training data source when testing (default = <i>false</i>).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.EnableLabelBalancing">
            <summary>
            Returns whether or not label balancing is enabled.  When enabled, first the label set is randomly selected and then the image
            is selected from the label set using the image selection criteria (e.g. Random).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.EnableLabelBoosting">
            <summary>
            Returns whether or not label boosting is enabled.  When using Label boosting, images are selected from boosted labels with 
            a higher probability that images from other label sets.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.EnableRandomSelection">
            <summary>
            Returns whether or not random image selection is enabled.  When enabled, images are randomly selected from the entire set, or 
            randomly from a label set when label balancing is in effect.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.EnablePairSelection">
            <summary>
            Returns whether or not pair selection is enabled.  When using pair selection, images are queried in pairs where the first query selects
            the image based on the image selection criteria (e.g. Random), and then the second image query returns the image just following the 
            first image in the database.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.GpuOverride">
            <summary>
            Returns the list of comma separated GPU ID's that are to be used when training this Project.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.ImageLoadMethod">
            <summary>
            Returns the method used to load the images into memory.  Loading all images into memory has the highest training performance for 
            memory access is much faster than disk acces (even with an SSD).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.ImageLoadLimit">
            <summary>
            Returns the image load limit.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.SnapshotWeightUpdateMethod">
            <summary>
            Returns the snapshot weight update favor.  The snapshot can favor an improving accuracy, decreasing error, or both when saving weights.
            </summary>
            <remarks>
            Note, weights updates are saved separately from the entire solver state that is snapshot on regular intervals.
            </remarks>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.SnapshotLoadMethod">
            <summary>
            Returns the snapshot load method.  When loading the best error or accuracy, the snapshot loaded may not be the last one taken.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.SolverDescription">
            <summary>
            Get/set the solver description script used by the Project.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.ModelDescription">
            <summary>
            Get/set the model description script used by the Project.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.ProjectGroup">
            <summary>
            Return the project group descriptor of the group that the Project resides (if any).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.ModelGroup">
            <summary>
            Return the model group descriptor of the group that the Project participates in (if any).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.DatasetGroup">
            <summary>
            Return the dataset group descriptor of the group that the Project participates in (if any).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.Parameters">
            <summary>
            Returns any project parameters that may exist (if any).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.TotalIterations">
            <summary>
            Get/set the total number of iterations that the Project has been trained.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.HasResults">
            <summary>
            Return whether or not the project has results from a training session.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.Iterations">
            <summary>
            Get/set the current number of iterations that the Project has been trained.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.BestAccuracy">
            <summary>
            Get/set the best accuracy observed while testing the Project.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.BestError">
            <summary>
            Get/set the best error observed while training the Project.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.SolverState">
            <summary>
            Get/set the solver state.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.WeightsState">
            <summary>
            Get/set the weight state.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.DatasetName">
            <summary>
            Return the name of the dataset used.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.Dataset">
            <summary>
            Return the descriptor of the dataset used.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.DatasetTarget">
            <summary>
            Returns the target dataset (if exists) or <i>null</i> if it does not.
            </summary>
            <remarks>
            The target dataset only applies when using both a source and target dataset.
            </remarks>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.TargetDatasetID">
            <summary>
            Get/set the dataset ID of the target dataset (if exists), otherwise return 0.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.ExistTestResults">
            <summary>
            Return whether or not testing results exist.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.ExistTrainResults">
            <summary>
            Return whether or not training results exist.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.ProjectPerformanceItems">
            <summary>
            Return Project performance metrics.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.ModelName">
            <summary>
            Return the name of the model used by the Project.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.ProjectEx.SolverType">
            <summary>
            Return the type of the Solver used by the Project.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.SetSolverVariable(System.String,System.String)">
            <summary>
            Set a given Solver variable in the solver description script.
            </summary>
            <param name="strVar">Specifies the variable name.</param>
            <param name="strVal">Specifies the variable value.</param>
            <returns>If the variable is found and set, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.LoadSolverFile(System.String)">
            <summary>
            Load the solver description from a file.
            </summary>
            <param name="strFile">Specifies the solver file.</param>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.LoadModelFile(System.String)">
            <summary>
            Load the model description from a file.
            </summary>
            <param name="strFile">Specifies the model file.</param>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.CreateModelForRunning(System.String,System.Int32,System.Int32,System.Int32,System.Int32,MyCaffe.basecode.RawProto@,MyCaffe.basecode.Stage)">
            <summary>
            Create a model description as a RawProto for running the Project.
            </summary>
            <param name="strName">Specifies the model name.</param>
            <param name="nNum">Specifies the batch size to use.</param>
            <param name="nChannels">Specifies the number of channels of each item in the batch.</param>
            <param name="nHeight">Specifies the height of each item in the batch.</param>
            <param name="nWidth">Specifies the width of each item in the batch.</param>
            <param name="protoTransform">Returns a RawProto describing the Data Transformation parameters to use.</param>
            <param name="stage">Optionally, specifies the stage to create the run network on.</param>
            <returns>The RawProto of the model description is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.CreateModelForTraining(System.String,System.String,System.Boolean)">
            <summary>
            Create a model description as a RawProto for training the Project.
            </summary>
            <param name="strModelDescription">Specifies the model description.</param>
            <param name="strName">Specifies the model name.</param>
            <param name="bCaffeFormat">Specifies whether or not the model description should use the native C++ caffe format where coloring is ordered in BGR, or use the MyCaffe format where coloring is ordered in RGB.</param>
            <returns>The RawProto of the model description is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.CreateModelForRunning(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,MyCaffe.basecode.RawProto@,MyCaffe.basecode.Stage)">
            <summary>
            Create a model description as a RawProto for running the Project.
            </summary>
            <param name="strModelDescription">Specifies the model description to use.</param>
            <param name="strName">Specifies the model name.</param>
            <param name="nNum">Specifies the batch size to use.</param>
            <param name="nChannels">Specifies the number of channels of each item in the batch.</param>
            <param name="nHeight">Specifies the height of each item in the batch.</param>
            <param name="nWidth">Specifies the width of each item in the batch.</param>
            <param name="protoTransform">Returns a RawProto describing the Data Transformation parameters to use.</param>
            <param name="stage">Optionally, specifies the stage to create the run network on.</param>
            <returns>The RawProto of the model description is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.SetDataset(MyCaffe.basecode.descriptors.DatasetDescriptor)">
            <summary>
            Sets the dataset used by the Project, overriding the current dataset used.
            </summary>
            <remarks>
            Note, this function 'fixes' up the model used by the Project to use the new dataset.
            </remarks>
            <param name="dataset">Specifies the new dataset to use.</param>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.SetDataset(System.String,MyCaffe.basecode.descriptors.DatasetDescriptor,System.Boolean@,System.Boolean)">
            <summary>
            Sets the dataset of a model, overriding the current dataset used.
            </summary>
            <remarks>
            Note, this function 'fixes' up the model used by the Project to use the new dataset.
            </remarks>
            <param name="strModelDesc">Specifies the model description to update.</param>
            <param name="dataset">Specifies the new dataset to use.</param>
            <param name="bResized">Returns whether or not the model was resized with a different output size.</param>
            <param name="bUpdateOutputs">Optionally, specifies whether or not to update the number of outputs in the last layer (e.g. the number of classes in the dataset).</param>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.FindLayerParameter(System.String,System.String,System.String,System.String,System.String,MyCaffe.basecode.Phase)">
            <summary>
            This method searches for a given parameter within a given layer, optionally for a certain Phase.
            </summary>
            <remarks>
            An example usage may be: layer = 'data', param = 'data_param', field = 'source'
            </remarks>
            <param name="strModelDescription">Specifies the model description to search.</param>
            <param name="strLayerName">Specifies the name of the layer, when <i>null</i> only the layer type is used..</param>
            <param name="strLayerType">Specifies the type of the layer.</param>
            <param name="strParam">Specifies the name of the parameter, such as 'data_param'.</param>
            <param name="strField">Specifies the field of the parameter, such as 'source'.</param>
            <param name="phaseMatch">Optionally, specifies the phase.</param>
            <returns>If found, the parameter value is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.DisableTesting">
            <summary>
            Disables the testing interval so that no test passes are run.
            </summary>
            <returns>Returns <i>true</i> if the testing was disabled, false if it was not setup in the first place.</returns>
        </member>
        <member name="M:MyCaffe.basecode.ProjectEx.ToString">
            <summary>
            Returns a string representation of the Project.
            </summary>
            <returns>The string describing the Project is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.PropertySet">
            <summary>
            Specifies a key-value pair of properties.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.PropertySet.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            The constructor, initialized with a dictionary of properties.
            </summary>
            <param name="rgProp">Specifies the properties to initialize the property set with.</param>
        </member>
        <member name="M:MyCaffe.basecode.PropertySet.#ctor(System.String)">
            <summary>
            The constructor, initialized with a string containing a set of ';' separated key-value pairs.
            </summary>
            <param name="strProp">Specifies the set of key-value pairs separated by ';'.  Each key-value pair is in the format: 'key'='value'.</param>
        </member>
        <member name="M:MyCaffe.basecode.PropertySet.GetProperty(System.String,System.Boolean)">
            <summary>
            Returns a property as a string value.
            </summary>
            <param name="strName">Specifies the name of the property to retrieve.</param>
            <param name="bThrowExceptions">When <i>true</i> (the default), an exception is thrown if the property is not found, otherwise a value of <i>null</i> is returned when not found.</param>
            <returns>The property value is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.PropertySet.GetPropertyAsDateTime(System.String)">
            <summary>
            Returns a property as a DateTime value.
            </summary>
            <param name="strName">Specifies the name of the property.</param>
            <returns>The property value is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.PropertySet.GetPropertyAsBool(System.String,System.Boolean)">
            <summary>
            Returns a property as a boolean value.
            </summary>
            <param name="strName">Specifies the name of the property.</param>
            <param name="bDefault">Specifies the default value returned when the property is not found.</param>
            <returns>The property value is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.PropertySet.GetPropertyAsInt(System.String,System.Int32)">
            <summary>
            Returns a property as an integer value.
            </summary>
            <param name="strName">Specifies the name of the property.</param>
            <param name="nDefault">Specifies the default value returned when the property is not found.</param>
            <returns>The property value is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.PropertySet.GetPropertyAsDouble(System.String,System.Double)">
            <summary>
            Returns a property as an double value.
            </summary>
            <param name="strName">Specifies the name of the property.</param>
            <param name="dfDefault">Specifies the default value returned when the property is not found.</param>
            <returns>The property value is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.PropertySet.ToString">
            <summary>
            Returns the string representation of the properties.
            </summary>
            <returns>The string representation of the properties is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.RawProto">
            <summary>
            The RawProto class is used to parse and output Google prototxt file data.
            </summary>
            <remarks>
            Each RawProto instance forms a tree of RawProto instances where each Leaf contains the data and branches
            contain a collection of child RawProto's.
            </remarks>
        </member>
        <member name="T:MyCaffe.basecode.RawProto.TYPE">
            <summary>
            Defines the type of a RawProto node.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.RawProto.TYPE.NONE">
            <summary>
            Brach node.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.RawProto.TYPE.NUMERIC">
            <summary>
            Numeric leaf node.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.RawProto.TYPE.STRING">
            <summary>
            Numeric string node.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.RawProto.#ctor(System.String,System.String,MyCaffe.basecode.RawProtoCollection,MyCaffe.basecode.RawProto.TYPE)">
            <summary>
            The RawProto constructor.
            </summary>
            <param name="strName">Specifies the name of the node.</param>
            <param name="strValue">Specifies the value of the node.</param>
            <param name="rgChildren">Specifies the children nodes of this node (if any).</param>
            <param name="type">Specifies the type of the node.</param>
        </member>
        <member name="P:MyCaffe.basecode.RawProto.Name">
            <summary>
            Returns the name of the node.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.RawProto.Value">
            <summary>
            Get/set the value of the node.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.RawProto.Type">
            <summary>
            Returns the type of the node.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.RawProto.Children">
            <summary>
            Returns a collection of this nodes child nodes.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.RawProto.FindValue(System.String)">
            <summary>
            Searches for a falue of a node within this nodes children.
            </summary>
            <param name="strName">Specifies the name of the node to look for.</param>
            <returns>If found, the value of the child is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.RawProto.FindValue(System.String,System.Type)">
            <summary>
            Searches for a value of a node within this nodes children and return it as a given type.
            </summary>
            <param name="strName">Specifies the name of the node to look for.</param>
            <param name="t">Specifies the type to convert the value, if found.</param>
            <returns>If found, the value of the child is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.RawProto.FindArray``1(System.String)">
            <summary>
            Searches for all values of a given name within this nodes children and return it as a generic List.
            </summary>
            <typeparam name="T">Specifies the type of item to return.</typeparam>
            <param name="strName">Specifies the name of the nodes to look for.</param>
            <returns>If found, the generic List of values of the children found is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.RawProto.RemoveChild(MyCaffe.basecode.RawProto)">
            <summary>
            Removes a given child from this node's children.
            </summary>
            <param name="p">Specifies the RawProto to remove.</param>
            <returns>If found and removed, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.RawProto.RemoveChild(System.String,System.String,System.Boolean)">
            <summary>
            Removes a given child with a set value from this node's children.
            </summary>
            <param name="strName">Specifes the name of the node.</param>
            <param name="strValue">Specifies the value to match.</param>
            <param name="bContains">Optionally, specifies whether just 'containing' the value (as opposed to equallying the value) is enough to delete the bottom.</param>
            <returns>If the named node is found and its value matches <i>strValue</i>, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.RawProto.FindChild(System.String)">
            <summary>
            Searches for a given node.
            </summary>
            <param name="strName">Specifies the name of the node to look for.</param>
            <returns>If found, the node is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.RawProto.FindChildIndex(System.String)">
            <summary>
            Searches for the index to a given node's child.
            </summary>
            <param name="strName">Specifies the name of the child node to look for.</param>
            <returns>If found, the index of the child node is returned, otherwise -1 is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.RawProto.FindChildren(System.String[])">
            <summary>
            Searches for all children with a given name in this node's children.
            </summary>
            <param name="rgstrName">Specifies a array of names to look for.</param>
            <returns>The collection of child nodes found is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.RawProto.FromFile(System.String)">
            <summary>
            Parses a prototxt from a file and returns it as a RawProto.
            </summary>
            <param name="strFileName">Specifies the file name.</param>
            <returns>The new RawProto is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.RawProto.ToFile(System.String)">
            <summary>
            Saves a RawProto to a file.
            </summary>
            <param name="strFileName">Specifies the file name.</param>
        </member>
        <member name="M:MyCaffe.basecode.RawProto.Parse(System.String)">
            <summary>
            Parses a prototxt and places it in a new RawProto.
            </summary>
            <param name="str">Specifies the prototxt to parse.</param>
            <returns>The new RawProto is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.RawProto.ToString">
            <summary>
            Returns the RawProto as its full prototxt string.
            </summary>
            <returns>The full prototxt string representing the RawProto is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.RawProtoCollection">
            <summary>
            The RawProtoCollection class is a list of RawProto objects.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoCollection.#ctor">
            <summary>
            The RawProtoCollection constructor.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.RawProtoCollection.Count">
            <summary>
            Returns the number of items in the collection.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.RawProtoCollection.Item(System.Int32)">
            <summary>
            Get/set an item at a given index within the collection.
            </summary>
            <param name="nIdx">Specifies the index.</param>
            <returns>Returns the item at the index in the collection.</returns>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoCollection.Insert(System.Int32,MyCaffe.basecode.RawProto)">
            <summary>
            Inserts a new RawProto into the collection at a given index.
            </summary>
            <param name="nIdx">Specifies the index where the insert should occur.</param>
            <param name="p">Specifies the RawProto to insert.</param>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoCollection.Add(MyCaffe.basecode.RawProto)">
            <summary>
            Adds a RawProto to the collection.
            </summary>
            <param name="p">Specifies the RawProto to add.</param>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoCollection.Add(MyCaffe.basecode.RawProtoCollection)">
            <summary>
            Adds all elements of a RawProtoCollection to this collection.
            </summary>
            <param name="col">Specifies the collection to add.</param>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoCollection.Add(System.String,System.String,MyCaffe.basecode.RawProto.TYPE)">
            <summary>
            Creates a new RawProto and adds it to this collection.
            </summary>
            <param name="strName">Specifies the name of the new RawProto.</param>
            <param name="strVal">Specifies the value of the new RawProto.</param>
            <param name="type">Specifies the type of the new RawProto.</param>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoCollection.Add(System.String,System.String)">
            <summary>
            Creates a new RawProto and adds it to this collection.
            </summary>
            <param name="strName">Specifies the name of the new RawProto.</param>
            <param name="strVal">Specifies the value of the new RawProto.</param>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoCollection.Add(System.String,System.Object)">
            <summary>
            Creates a new RawProto and adds it to this collection.
            </summary>
            <param name="strName">Specifies the name of the new RawProto.</param>
            <param name="val">Specifies a value of the new RawProto, which is converted to a string before creating the new RawProto.</param>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoCollection.Add``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            Creates a new RawProto for each element in <i>rg</i> and gives each the name <i>strName</i>, and add all to this collection.
            </summary>
            <typeparam name="T">Specifies the type of the items in the List <i>rg</i>.</typeparam>
            <param name="strName">Specifies the name to give to each new RawProto created.</param>
            <param name="rg">Specifies a List of values to add.</param>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoCollection.Remove(MyCaffe.basecode.RawProto)">
            <summary>
            Removes a RawProto from the collection.
            </summary>
            <param name="p">Specifies the RawProto to remove.</param>
            <returns>If found and removed, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the RawProto at a given index in the collection.
            </summary>
            <param name="nIdx">Specifies the index.</param>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoCollection.GetEnumerator">
            <summary>
            Returns the enumerator for the collection.
            </summary>
            <returns>The enumerator is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator for the collection.
            </summary>
            <returns>The enumerator is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.RawProtoFile">
            <summary>
            The RawProtoFile class writes and reads prototxt to and from a file.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoFile.#ctor">
            <summary>
            The RawProtoFile constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoFile.SaveToFile(MyCaffe.basecode.RawProto,System.String)">
            <summary>
            Saves the RawProto to a file.
            </summary>
            <param name="p">Specifies the RawProto.</param>
            <param name="strFileName">Specifies the file name where the RawProto is to be saved.</param>
        </member>
        <member name="M:MyCaffe.basecode.RawProtoFile.LoadFromFile(System.String)">
            <summary>
            Loads a RawProto from a prototxt file.
            </summary>
            <param name="strFileName">Specifies the file name.</param>
            <returns>The RawProto read in is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.SettingsCaffe">
            <summary>
            The SettingsCaffe defines the settings used by the MyCaffe CaffeControl.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.SettingsCaffe.#ctor">
            <summary>
            The SettingsCaffe constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.SettingsCaffe.#ctor(MyCaffe.basecode.SettingsCaffe)">
            <summary>
            The SettingsCaffe constructor that copies another SettingsCaffe instance.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.SettingsCaffe.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The SettingsCaffe constructor used during deserialization.
            </summary>
            <param name="info">Specifies the serialization information.</param>
            <param name="context">Specifies the serialization context.</param>
        </member>
        <member name="M:MyCaffe.basecode.SettingsCaffe.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The GetObjectData is used during serialization.
            </summary>
            <param name="info">Specifies the serialization information.</param>
            <param name="context">Specifies the serialization context.</param>
        </member>
        <member name="M:MyCaffe.basecode.SettingsCaffe.Clone">
            <summary>
            Returns a copy of the SettingsCaffe object.
            </summary>
            <returns>The copy of the SettingsCaffe object is returned.</returns>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.ImageDbVersion">
            <summary>
            Get/set the version of the MyCaffeImageDatabase to use.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.EnableLabelBalancing">
            <summary>
            Get/set label balancing.  When enabled, first the label set is randomly selected and then the image
            is selected from the label set using the image selection criteria (e.g. Random).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.EnableLabelBoosting">
            <summary>
            DEPRECIATED: Get/set label boosting.  When using Label boosting, images are selected from boosted labels with 
            a higher probability that images from other label sets.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.EnableRandomInputSelection">
            <summary>
            Get/set random image selection.  When enabled, images are randomly selected from the entire set, or 
            randomly from a label set when label balancing is in effect.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.EnablePairInputSelection">
            <summary>
            Get/set pair image selection.  When using pair selection, images are queried in pairs where the first query selects
            the image based on the image selection criteria (e.g. Random), and then the second image query returns the image just following the 
            first image in the database.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.UseTrainingSourceForTesting">
            <summary>
            Get/set whether or not to use the training datasource when testing.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.SuperBoostProbability">
            <summary>
            Get/set the superboost probability used when selecting boosted images.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.MaximumIterationOverride">
            <summary>
            Get/set the maximum iteration override.  When set, this overrides the training iterations specified in the solver description.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.TestingIterationOverride">
            <summary>
            Get/set the testing iteration override.  When set, this overrides the testing iterations specified in the solver description.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.DefaultModelGroup">
            <summary>
            Get/set the default model group to use.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.GpuIds">
            <summary>
            Get/set the default GPU ID's to use when training.
            </summary>
            <remarks>
            When using multi-GPU training, it is highly recommended to only train on TCC enabled drivers, otherwise driver timeouts may occur on large models.
            @see [NVIDIA Tesla Compute Cluster (TCC) Help](http://docs.nvidia.com/gameworks/content/developertools/desktop/tesla_compute_cluster.htm)
            </remarks>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.ImageDbLoadMethod">
            <summary>
            Get/set the image database loading method.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.ImageDbLoadLimit">
            <summary>
            Get/set the image database load limit.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.ImageDbAutoRefreshScheduledUpdateInMs">
            <summary>
            Get/set the automatic refresh scheduled udpate period (only applies when ImageDbLoadLimit > 0).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.ImageDbAutoRefreshScheduledReplacementPercent">
            <summary>
            Get/set the automatic refresh scheduled update replacement percentage used on refresh (only applies when ImageDbLoadLimit > 0).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.ImageDbLoadDataCriteria">
            <summary>
            Specifies whether or not to load the image criteria data from file (default = false).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.ImageDbLoadDebugData">
            <summary>
            Specifies whether or not to load the debug data from file (default = false).
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.SnapshotWeightUpdateMethod">
            <summary>
            Get/set the snapshot update method.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.SnapshotLoadMethod">
            <summary>
            Get/set the snapshot load method.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SettingsCaffe.SkipMeanCheck">
            <summary>
            Skip checking for the mean of the dataset - this is not recommended for if the mean does not exist, using the mean value from the dataset will fail.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.SimpleDatum">
            <summary>
            The SimpleDatum class holds a data input within host memory.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDatum.m_tag">
            <summary>
            Specifies a user value.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDatum.m_strTagName">
            <summary>
            Specifies the name of the user value.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.SimpleDatum.ANNOTATION_TYPE">
            <summary>
            Specifies the annotation type when using annotations.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDatum.ANNOTATION_TYPE.NONE">
            <summary>
            Specifies that annotations are not used.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDatum.ANNOTATION_TYPE.BBOX">
            <summary>
            Specifies to use the bounding box annoation type.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.SimpleDatum.DATA_FORMAT">
            <summary>
            Defines the data format of the DebugData and DataCriteria when specified.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDatum.DATA_FORMAT.NONE">
            <summary>
            Specifies that there is no data.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDatum.DATA_FORMAT.IMAGE_1CH">
            <summary>
            Specifies that the data contains a black and white square image packed as a set of byte values [0-255] in the order: image wxh.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDatum.DATA_FORMAT.IMAGE_3CH">
            <summary>
            Specifies that the data contains a RGB square image packed as a set of byte values [0-255] in the order: wxh of R, wxh of G and wxh of B.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDatum.DATA_FORMAT.SEGMENTATION">
            <summary>
            Specifies that the data contains segmentation data where the height and width are equal.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDatum.DATA_FORMAT.DICTIONARY">
            <summary>
            Specifies that the data contains a dictionary of values.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDatum.DATA_FORMAT.CUSTOM">
            <summary>
            Specifies that the data contains custom data.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDatum.DATA_FORMAT.BITMAP">
            <summary>
            Specifies that the data contains an image converted to a byte array using ImageTools.ImageToByteArray.
            </summary>
            <remarks>To convert back to an image, use the ImageTools.ByteArrayToImage method.</remarks>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDatum.DATA_FORMAT.LIST_DOUBLE">
            <summary>
            Specifies that the data contains a list of double values where the first item is an Int32 which is the count followed by that many double values.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDatum.DATA_FORMAT.LIST_FLOAT">
            <summary>
            Specifies that the data contains a list of float values where the first item is an Int32 which is the count followed by that many float values.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDatum.DATA_FORMAT.ANNOTATION_DATA">
            <summary>
            Specifies that the data contains annotation data used with SSD.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor">
            <summary>
            The SimpleDatum constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The SimpleDatum constructor.
            </summary>
            <param name="bIsReal">Specifies whether or not the data values are <i>double</i> or <i>byte</i>.</param>
            <param name="nChannels">Specifies the number of channels in the data (e.g. 3 for color, 1 for black and white images)</param>
            <param name="nWidth">Specifies the width of the data (e.g. the number of pixels wide).</param>
            <param name="nHeight">Specifies the height of the data (e.g. the number of pixels high).</param>
            <param name="nLabel">Optionally, specifies the known label of the data (default = -1).</param>
            <param name="dtTime">Optionally, specifies a time-stamp associated with the data (default = null).</param>
            <param name="nBoost">Optionally, specifies the boost to use with the data (default = 0, where a value of 0 indicates no boost).</param>
            <param name="bAutoLabeled">Optionally, specifies whether or not the label was auto-generated (default = false).</param>
            <param name="nIdx">Optionally, specifies the index of the data (default = -1).</param>
            <param name="nVirtualID">Optionally, specifies a virtual index for the data (default = 0).  When specified, the SimpleDatum is used to reference another.</param>
            <param name="nImageID">Optionally, specifies the image ID within the database (default = 0).</param>
            <param name="nSourceID">Optionally, specifies the data source ID of the data source that owns this image (default = 0).</param>
            <param name="nOriginalSourceID">Optionally, specifies the ogiginal source ID which is set when using a virtual ID - the original source ID is the ID of the source associated with the image with the ID of the virtual ID.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Collections.Generic.List{System.Byte},System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The SimpleDatum constructor.
            </summary>
            <param name="bIsReal">Specifies whether or not the data values are <i>double</i> or <i>byte</i>.</param>
            <param name="nChannels">Specifies the number of channels in the data (e.g. 3 for color, 1 for black and white images)</param>
            <param name="nWidth">Specifies the width of the data (e.g. the number of pixels wide).</param>
            <param name="nHeight">Specifies the height of the data (e.g. the number of pixels high).</param>
            <param name="nLabel">Specifies the known label of the data.</param>
            <param name="dtTime">Specifies a time-stamp associated with the data.</param>
            <param name="rgData">Specifies the data as a list of <i>bytes</i> (expects <i>bIsReal</i> = <i>false</i>).</param>
            <param name="nBoost">Specifies the boost to use with the data (a value of 0 indicates no boost).</param>
            <param name="bAutoLabeled">Specifies whether or not the label was auto-generated.</param>
            <param name="nIdx">Specifies the index of the data.</param>
            <param name="nVirtualID">Specifies a virtual index for the data (default = 0).  When specified, the SimpleDatum is used to reference another.</param>
            <param name="nImageID">Specifies the image ID within the database.</param>
            <param name="nSourceID">Specifies the data source ID of the data source that owns this image.</param>
            <param name="nOriginalSourceID">Optionally, specifies the ogiginal source ID which is set when using a virtual ID - the original source ID is the ID of the source associated with the image with the ID of the virtual ID.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Collections.Generic.List{System.Double},System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The SimpleDatum constructor.
            </summary>
            <param name="bIsReal">Specifies whether or not the data values are <i>double</i> or <i>byte</i>.</param>
            <param name="nChannels">Specifies the number of channels in the data (e.g. 3 for color, 1 for black and white images)</param>
            <param name="nWidth">Specifies the width of the data (e.g. the number of pixels wide).</param>
            <param name="nHeight">Specifies the height of the data (e.g. the number of pixels high).</param>
            <param name="nLabel">Specifies the known label of the data.</param>
            <param name="dtTime">Specifies a time-stamp associated with the data.</param>
            <param name="rgfData">Specifies the data as a list of <i>double</i> (expects <i>bIsReal</i> = <i>true</i>).</param>
            <param name="nBoost">Specifies the boost to use with the data (a value of 0 indicates no boost).</param>
            <param name="bAutoLabeled">Specifies whether or not the label was auto-generated.</param>
            <param name="nIdx">Specifies the index of the data.</param>
            <param name="nVirtualID">Specifies a virtual index for the data (default = 0).  When specified, the SimpleDatum is used to reference another.</param>
            <param name="nImageID">Specifies the image ID within the database.</param>
            <param name="nSourceID">Specifies the data source ID of the data source that owns this image.</param>
            <param name="nOriginalSourceID">Optionally, specifies the ogiginal source ID which is set when using a virtual ID - the original source ID is the ID of the source associated with the image with the ID of the virtual ID.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Collections.Generic.List{System.Single},System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The SimpleDatum constructor.
            </summary>
            <param name="bIsReal">Specifies whether or not the data values are <i>double</i> or <i>byte</i>.</param>
            <param name="nChannels">Specifies the number of channels in the data (e.g. 3 for color, 1 for black and white images)</param>
            <param name="nWidth">Specifies the width of the data (e.g. the number of pixels wide).</param>
            <param name="nHeight">Specifies the height of the data (e.g. the number of pixels high).</param>
            <param name="nLabel">Specifies the known label of the data.</param>
            <param name="dtTime">Specifies a time-stamp associated with the data.</param>
            <param name="rgfData">Specifies the data as a list of <i>float</i> (expects <i>bIsReal</i> = <i>true</i>).</param>
            <param name="nBoost">Specifies the boost to use with the data (a value of 0 indicates no boost).</param>
            <param name="bAutoLabeled">Specifies whether or not the label was auto-generated.</param>
            <param name="nIdx">Specifies the index of the data.</param>
            <param name="nVirtualID">Specifies a virtual index for the data (default = 0).  When specified, the SimpleDatum is used to reference another.</param>
            <param name="nImageID">Specifies the image ID within the database.</param>
            <param name="nSourceID">Specifies the data source ID of the data source that owns this image.</param>
            <param name="nOriginalSourceID">Optionally, specifies the ogiginal source ID which is set when using a virtual ID - the original source ID is the ID of the source associated with the image with the ID of the virtual ID.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Byte[],System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The SimpleDatum constructor.
            </summary>
            <param name="bIsReal">Specifies whether or not the data values are <i>double</i> or <i>byte</i>.</param>
            <param name="nChannels">Specifies the number of channels in the data (e.g. 3 for color, 1 for black and white images)</param>
            <param name="nWidth">Specifies the width of the data (e.g. the number of pixels wide).</param>
            <param name="nHeight">Specifies the height of the data (e.g. the number of pixels high).</param>
            <param name="nLabel">Specifies the known label of the data.</param>
            <param name="dtTime">Specifies a time-stamp associated with the data.</param>
            <param name="rgData">Specifies the data as a list of <i>bytes</i> (expects <i>bIsReal</i> = <i>false</i>).</param>
            <param name="nBoost">Specifies the boost to use with the data (a value of 0 indicates no boost).</param>
            <param name="bAutoLabeled">Specifies whether or not the label was auto-generated.</param>
            <param name="nIdx">Specifies the index of the data.</param>
            <param name="nVirtualID">Specifies a virtual index for the data (default = 0).  When specified, the SimpleDatum is used to reference another.</param>
            <param name="nImageID">Specifies the image ID within the database.</param>
            <param name="nSourceID">Specifies the data source ID of the data source that owns this image.</param>
            <param name="nOriginalSourceID">Optionally, specifies the ogiginal source ID which is set when using a virtual ID - the original source ID is the ID of the source associated with the image with the ID of the virtual ID.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Double[],System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The SimpleDatum constructor.
            </summary>
            <param name="bIsReal">Specifies whether or not the data values are <i>double</i> or <i>byte</i>.</param>
            <param name="nChannels">Specifies the number of channels in the data (e.g. 3 for color, 1 for black and white images)</param>
            <param name="nWidth">Specifies the width of the data (e.g. the number of pixels wide).</param>
            <param name="nHeight">Specifies the height of the data (e.g. the number of pixels high).</param>
            <param name="nLabel">Specifies the known label of the data.</param>
            <param name="dtTime">Specifies a time-stamp associated with the data.</param>
            <param name="rgdfData">Specifies the data as a list of <i>double</i> (expects <i>bIsReal</i> = <i>true</i>).</param>
            <param name="nBoost">Specifies the boost to use with the data (a value of 0 indicates no boost).</param>
            <param name="bAutoLabeled">Specifies whether or not the label was auto-generated.</param>
            <param name="nIdx">Specifies the index of the data.</param>
            <param name="nVirtualID">Specifies a virtual index for the data (default = 0).  When specified, the SimpleDatum is used to reference another.</param>
            <param name="nImageID">Specifies the image ID within the database.</param>
            <param name="nSourceID">Specifies the data source ID of the data source that owns this image.</param>
            <param name="nOriginalSourceID">Optionally, specifies the ogiginal source ID which is set when using a virtual ID - the original source ID is the ID of the source associated with the image with the ID of the virtual ID.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Single[],System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The SimpleDatum constructor.
            </summary>
            <param name="bIsReal">Specifies whether or not the data values are <i>double</i> or <i>byte</i>.</param>
            <param name="nChannels">Specifies the number of channels in the data (e.g. 3 for color, 1 for black and white images)</param>
            <param name="nWidth">Specifies the width of the data (e.g. the number of pixels wide).</param>
            <param name="nHeight">Specifies the height of the data (e.g. the number of pixels high).</param>
            <param name="nLabel">Specifies the known label of the data.</param>
            <param name="dtTime">Specifies a time-stamp associated with the data.</param>
            <param name="rgfData">Specifies the data as a list of <i>float</i> (expects <i>bIsReal</i> = <i>true</i>).</param>
            <param name="nBoost">Specifies the boost to use with the data (a value of 0 indicates no boost).</param>
            <param name="bAutoLabeled">Specifies whether or not the label was auto-generated.</param>
            <param name="nIdx">Specifies the index of the data.</param>
            <param name="nVirtualID">Specifies a virtual index for the data (default = 0).  When specified, the SimpleDatum is used to reference another.</param>
            <param name="nImageID">Specifies the image ID within the database.</param>
            <param name="nSourceID">Specifies the data source ID of the data source that owns this image.</param>
            <param name="nOriginalSourceID">Optionally, specifies the ogiginal source ID which is set when using a virtual ID - the original source ID is the ID of the source associated with the image with the ID of the virtual ID.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The SimpleDatum constructor.
            </summary>
            <param name="bIsReal">Specifies whether or not the data values are <i>double</i> or <i>byte</i>.</param>
            <param name="nChannels">Specifies the number of channels in the data (e.g. 3 for color, 1 for black and white images)</param>
            <param name="nWidth">Specifies the width of the data (e.g. the number of pixels wide).</param>
            <param name="nHeight">Specifies the height of the data (e.g. the number of pixels high).</param>
            <param name="nLabel">Specifies the known label of the data.</param>
            <param name="dtTime">Specifies a time-stamp associated with the data.</param>
            <param name="nBoost">Specifies the boost to use with the data (a value of 0 indicates no boost).</param>
            <param name="bAutoLabeled">Specifies whether or not the label was auto-generated.</param>
            <param name="nIdx">Specifies the index of the data.</param>
            <param name="nVirtualID">Specifies a virtual index for the data (default = 0).  When specified, the SimpleDatum is used to reference another.</param>
            <param name="nImageID">Specifies the image ID within the database.</param>
            <param name="nSourceID">Specifies the data source ID of the data source that owns this image.</param>
            <param name="nOriginalSourceID">Optionally, specifies the ogiginal source ID which is set when using a virtual ID - the original source ID is the ID of the source associated with the image with the ID of the virtual ID.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor(System.Int32,System.Int32,System.Int32,System.Single[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            The SimpleDatum constructor.
            </summary>
            <param name="nChannels">Specifies the number of channels in the data (e.g. 3 for color, 1 for black and white images)</param>
            <param name="nWidth">Specifies the width of the data (e.g. the number of pixels wide).</param>
            <param name="nHeight">Specifies the height of the data (e.g. the number of pixels high).</param>
            <param name="rgf">Specifies the data to copy.</param>
            <param name="nOffset">Specifies the offset into the data where the copying should start.</param>
            <param name="nCount">Specifies the number of data items to copy.</param>
            <param name="bDataIsReal">Optionally, specifies whether or not the data is real.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            The SimpleDatum constructor.
            </summary>
            <param name="nChannels">Specifies the number of channels in the data (e.g. 3 for color, 1 for black and white images)</param>
            <param name="nWidth">Specifies the width of the data (e.g. the number of pixels wide).</param>
            <param name="nHeight">Specifies the height of the data (e.g. the number of pixels high).</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor(MyCaffe.basecode.Bytemap)">
            <summary>
            The SimpleDatum constructor.
            </summary>
            <param name="data">Specifies the byte data to fill the SimpleDatum with.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor(MyCaffe.basecode.Valuemap)">
            <summary>
            The SimpleDatum constructor.
            </summary>
            <param name="data">Specifies the valuse data to fill the SimpleDatum with.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor(MyCaffe.basecode.SimpleDatum,System.Boolean)">
            <summary>
            The SimpleDatum constructor.
            </summary>
            <param name="d">Specifies a SimpleDatum used to create this new Datum.</param>
            <param name="bCopyData">Specifies whether or not to copy the data, or just share it (default = false, share the data).</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor(MyCaffe.basecode.SimpleDatum,System.Int32,System.Int32)">
            <summary>
            The SimpleDatum constructor.
            </summary>
            <param name="d">Specifies a SimpleDatum used to create this new Datum.</param>
            <param name="nHeight">Specifies a height override.</param>
            <param name="nWidth">Specifies a width override.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.#ctor(System.Collections.Generic.List{MyCaffe.basecode.SimpleDatum},System.Boolean)">
            <summary>
            Constructor that copies an array into a single SimpleDatum by appending each to the other in order.
            </summary>
            <remarks>
            Data is ordered by HxWxC where C is filled with the channels of each input.  So if three inputs
            are used the output is HxWx[c1,c2,c3].
            </remarks>
            <param name="rg">Specifies the array of SimpleDatum to append together.</param>
            <param name="bAlignChannels">When true, the data is packed with each channel following the other.  For example,
            packing three hxw images together using channel ordering, so three single channel images would then result
            in the following ordering:
            
            h0,w0,c0,c1,c2  h0,w1,c0,c1,c2 ...
            
            When false (default), the channel data from each data item are stacked back to back similar to the way a single
            data item is already ordered.
            </param>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.HitCount">
            <summary>
            Get/set the hit count for the SimpleDatum.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.Tag">
            <summary>
            Specifies user data associated with the SimpleDatum.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.TagName">
            <summary>
            Returns a user-defined name of the tag associated with the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.Min">
            <summary>
            Returns the minimum value in the data or double.NaN if there is no data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.Max">
            <summary>
            Returns the maximum value in the data or double.NaN if there is no data.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.Clip(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Clip the data length down to a smaller size and copies the clipped data.
            </summary>
            <param name="nDataLen">Specifies the new, smaller, size.</param>
            <param name="nNewChannel">Specifies the new channel size, or null to ignore.</param>
            <param name="nNewHeight">Specifies the new height size, or null to ignore.</param>
            <param name="nNewWidth">Specifies the new width size, or null to ignore.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.GetNonZeroIndexes">
            <summary>
            Returns all indexes with non-zero data.
            </summary>
            <returns>The list of indexes corresponding to non-zero data is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.Zero">
            <summary>
            Zero out all data in the datum but keep the size and other settings.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.Sub(MyCaffe.basecode.SimpleDatum)">
            <summary>
            Subtract the data of another SimpleDatum from this one, so this = this - sd.
            </summary>
            <param name="sd">Specifies the other SimpleDatum to subtract.</param>
            <returns>If both data values are different <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.Copy(MyCaffe.basecode.SimpleDatum,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Copy another SimpleDatum into this one.
            </summary>
            <param name="d">Specifies the SimpleDatum to copy.</param>
            <param name="bCopyData">Specifies whether or not to copy the data.</param>
            <param name="nHeight">Optionally, specifies a height override.</param>
            <param name="nWidth">Optionally, specifies a width override.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.CopyData(MyCaffe.basecode.SimpleDatum)">
            <summary>
            Copy just the data from another SimpleDatum, making sure to update the C x H x W dimensions and IsReal settings to fit the new data.
            </summary>
            <param name="d">Specifies the SimpleDatum whos data is to be copied.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.SetData(MyCaffe.basecode.SimpleDatum)">
            <summary>
            Set the data of the current SimpleDatum by copying the data of another.
            </summary>
            <param name="d">Specifies the SimpleDatum to copy.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.GetDataValid(System.Boolean)">
            <summary>
            Returns <i>true</i> if the ByteData or RealDataD or RealDataF are not null, <i>false</i> otherwise.
            </summary>
            <param name="bByType">Specifies to only test if real (RealDataD and RealDataF) or if not real (ByteData).  When false, all data types are tested.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.ClipToLastColumnsX``1(System.Int32)">
            <summary>
            DEPRECIATED: Clips the SimpleDatum to the last <i>nLastColumns</i> and returns the data.
            </summary>
            <typeparam name="T">Specifies base the type of data returned, either <i>double</i> or <i>float</i>.</typeparam>
            <param name="nLastColumns">Specifies the number of last columns of data to keep.</param>
            <returns>The last columns of data are returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.MaskOutAllButLastColumnsX(System.Int32,System.Int32)">
            <summary>
            DEPRECIATED: Masks out all data except for the last columns of data.
            </summary>
            <param name="nLastColumsToRetain">Specifies the number of last columns to retain.</param>
            <param name="nMaskingValue">Specifies the value to use for the masked columns.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.SetData(System.Collections.Generic.List{System.Byte},System.Int32,System.Boolean)">
            <summary>
            Sets the <i>byte</i> data of the SimpleDatum and its Label.
            </summary>
            <param name="rgByteData">Specifies the <i>byte</i> data.</param>
            <param name="bAllowVirtualOverride">Optionally, allow virtual ID override.  When <i>true</i> the data can be set on a virtual SimpleDatum, otherwise it cannot.</param>
            <param name="nLabel">Specifies the label.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.SetData(System.Collections.Generic.List{System.Double},System.Int32,System.Boolean)">
            <summary>
            Sets the <i>double</i> data of the SimpleDatum and its Label.
            </summary>
            <param name="rgRealData">Specifies the <i>double</i> data.</param>
            <param name="nLabel">Specifies the label.</param>
            <param name="bAllowVirtualOverride">Optionally, allow virtual ID override.  When <i>true</i> the data can be set on a virtual SimpleDatum, otherwise it cannot.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.SetData(System.Collections.Generic.List{System.Single},System.Int32,System.Boolean)">
            <summary>
            Sets the <i>float</i> data of the SimpleDatum and its Label.
            </summary>
            <param name="rgRealData">Specifies the <i>float</i> data.</param>
            <param name="nLabel">Specifies the label.</param>
            <param name="bAllowVirtualOverride">Optionally, allow virtual ID override.  When <i>true</i> the data can be set on a virtual SimpleDatum, otherwise it cannot.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.SetData(System.Byte[],System.Int32)">
            <summary>
            Set the data to the <i>byte</i> array specified.
            </summary>
            <param name="rgb">Specifies the data to set.</param>
            <param name="nLabel">Specifies the label to set.</param>
            <remarks>
            The data of the array is cast to either (double) for real data, or (byte) for the byte data.
            </remarks>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.SetData(System.Double[],System.Int32)">
            <summary>
            Set the data to the <i>double</i> array specified.
            </summary>
            <param name="rgdf">Specifies the data to set.</param>
            <param name="nLabel">Specifies the label to set.</param>
            <remarks>
            The data of the array is cast to either (double) for real data, or (byte) for the byte data.
            </remarks>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.SetData(System.Single[],System.Int32)">
            <summary>
            Set the data to the <i>float</i> array specified.
            </summary>
            <param name="rgf">Specifies the data to set.</param>
            <param name="nLabel">Specifies the label to set.</param>
            <remarks>
            The data of the array is cast to either (double) for real data, or (byte) for the byte data.
            </remarks>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.SetLabel(System.Int32)">
            <summary>
            Sets the label.
            </summary>
            <param name="nLabel">Specifies the label.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.ResetLabel">
            <summary>
            Resets the label to the original label used when creating the SimpleDatum.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.ItemCount">
            <summary>
            Returns the number of data items.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.HasRealData">
            <summary>
            Returns <i>true</i> if either the RealDataD or RealDataF are non <i>null</i> and have length > 0.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.GetDataAt``1(System.Int32)">
            <summary>
            Returns the item at a specified index in the type specified.
            </summary>
            <typeparam name="T">Specifies the output type.</typeparam>
            <param name="nIdx">Specifies the index of the data to retrieve.</param>
            <returns>The converted value is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.GetDataAtD(System.Int32)">
            <summary>
            Returns the item at a specified index in the <i>double</i> type.
            </summary>
            <param name="nIdx">Specifies the index of the data to retrieve.</param>
            <returns>The value is returned as a <i>double</i>.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.GetDataAtF(System.Int32)">
            <summary>
            Returns the item at a specified index in the <i>float</i> type.
            </summary>
            <param name="nIdx">Specifies the index of the data to retrieve.</param>
            <returns>The value is returned as a <i>float</i>.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.GetDataAtByte(System.Int32)">
            <summary>
            Returns the item at a specified index in the <i>byte</i> type.
            </summary>
            <param name="nIdx">Specifies the index of the data to retrieve.</param>
            <returns>The value is returned as a <i>byte</i>.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.GetData``1(System.Int32,System.Int32)">
            <summary>
            Returns the data as a generic array and optionally pads the data.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="nImagePadX">Optionally, specifies the amount to pad the data width.</param>
            <param name="nImagePadY">Optionally, specifies the amount to pad the data height.</param>
            <returns>The data is returned as a generic array.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.GetByteData(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the non-real data as a <i>byte</i> array after padding the data.
            </summary>
            <param name="rgData">Specifies the data.</param>
            <param name="nImagePadX">Specifies the amount to pad the data width.</param>
            <param name="nImagePadY">Specifies the amount to pad the data height.</param>
            <param name="nHeight">Specifies the height of the original data.</param>
            <param name="nWidth">Specifies the width of the original data.</param>
            <param name="nChannels">Specifies the number of channels in the original data.</param>
            <returns>The data is returned as a <i>byte</i> array.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.GetRealData(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the real data as a <i>double</i> or <i>float</i> array (depending on the original encoding data type) after padding the data.
            </summary>
            <param name="rgData">Specifies the data.</param>
            <param name="nImagePadX">Specifies the amount to pad the data width.</param>
            <param name="nImagePadY">Specifies the amount to pad the data height.</param>
            <param name="nHeight">Specifies the height of the original data.</param>
            <param name="nWidth">Specifies the width of the original data.</param>
            <param name="nChannels">Specifies the number of channels in the original data.</param>
            <returns>The data is returned as a <i>double</i> or <i>float</i> array depending on the original encoding type.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.PadData``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Padd the data.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="rgData">Specifies the data to pad.</param>
            <param name="nImagePadX">Optionally, specifies the amount to pad the data width.</param>
            <param name="nImagePadY">Optionally, specifies the amount to pad the data height.</param>
            <param name="nHeight">Specifies the height of the original data.</param>
            <param name="nWidth">Specifies the width of the original data.</param>
            <param name="nChannels">Specifies the number of channels in the original data.</param>
            <returns>The padded data is returned as a generic array.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.GetByteData(System.Boolean@)">
            <summary>
            Returns the data as a <i>byte</i> array regardless of how it is stored.
            </summary>
            <param name="bEncoded">Returns whether or not the original data is real (<i>true</i>) or not (<i>false</i>).</param>
            <returns>A <i>byte</i> array of the data is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.GetByteData(System.Collections.Generic.List{System.Double})">
            <summary>
            Encodes a list of <i>double</i> values to an encoded <i>byte</i> array.
            </summary>
            <remarks>
            Each double in the stored data is converted using a BitConverter.
            </remarks>
            <param name="rgData">Specifies the data as list of <i>double</i> values.</param>
            <returns>The encoded doubles are returned as an array of <i>byte</i> values.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.GetByteData(System.Collections.Generic.List{System.Single})">
            <summary>
            Encodes a list of <i>float</i> values to an encoded <i>byte</i> array.
            </summary>
            <remarks>
            Each double in the stored data is converted using a BitConverter.
            </remarks>
            <param name="rgData">Specifies the data as list of <i>float</i> values.</param>
            <returns>The encoded doubles are returned as an array of <i>byte</i> values.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.GetRealData(System.Byte[])">
            <summary>
            Decodes an array of <i>byte</i> values into a array of either <i>double</i> or <i>float</i> values depending on how the original encoding was made.
            </summary>
            <param name="rgData">Specifies the array of <i>byte</i> values containing the encoded <i>double</i> or <i>float</i> values.</param>
            <returns>The array of decoded <i>double</i> or <i>float</i> values is returned in a Tuple where only one item is set depending on the encoding data type used.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.getRealDataD(System.Byte[],System.Int32)">
            <summary>
            Decodes an array of <i>byte</i> values into a array of <i>double</i> values.
            </summary>
            <param name="rgData">Specifies the array of <i>byte</i> values containing the encoded <i>double</i> values.</param>
            <param name="nIdx">Specifies the offset where reading is to start.</param>
            <returns>The array of decoded <i>double</i> values is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.getRealDataF(System.Byte[],System.Int32)">
            <summary>
            Decodes an array of <i>byte</i> values into a array of <i>float</i> values.
            </summary>
            <param name="rgData">Specifies the array of <i>byte</i> values containing the encoded <i>float</i> values.</param>
            <param name="nIdx">Specifies the offset where reading is to start.</param>
            <returns>The array of decoded <i>float</i> values is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.Add(MyCaffe.basecode.SimpleDatum)">
            <summary>
            Creates a new SimpleDatum and adds another SimpleDatum to it.
            </summary>
            <param name="d">Specifies the other SimpleDatum.</param>
            <returns>The new SimpleDatum is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.Div(System.Double,System.Boolean)">
            <summary>
            Divides all elements of the SimpleDatum by a value and returns the result as a new SimpleDatum.
            </summary>
            <param name="dfVal">Specifies the non-zero divisor.</param>
            <param name="bConvertToByte">If the SimpleDatum contains real numbers, specifies whether or not to convert the data to <i>byte</i> data.</param>
            <returns>The new SimpleDatum is returned.</returns>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.SourceID">
            <summary>
            Returns the ID of the data source that owns this image.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.OriginalSourceID">
            <summary>
            Returns the original source ID which is set when using a virtual ID.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.ImageID">
            <summary>
            Returns the ID of the image in the database.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.VirtualID">
            <summary>
            Returns the virtual ID of the SimpleDatum.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.GroupID">
            <summary>
            Get/set the group ID of the SimpleDatum.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.Index">
            <summary>
            Returns the index of the SimpleDatum.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.TimeStamp">
            <summary>
            Get/set the Timestamp.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.AutoLabeled">
            <summary>
            Get/set whether or not the label was auto generated.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.IsRealData">
            <summary>
            Returns whether or not the data contains real numbers or byte data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.Height">
            <summary>
            Return the height of the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.Width">
            <summary>
            Return the width of the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.Channels">
            <summary>
            Return the number of channels of the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.Label">
            <summary>
            Return the known label of the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.OriginalLabel">
            <summary>
            Get/set the original known label of the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.ByteData">
            <summary>
            Return the <i>byte</i> data.  This field is valid when <i>IsRealData</i> = <i>false</i>.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.RealDataD">
            <summary>
            Return the <i>double</i> data.  This field is valid when <i>IsRealData</i> = <i>true</i>.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.RealDataF">
            <summary>
            Return the <i>float</i> data.  This field is valid when <i>IsRealData</i> = <i>true</i>.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.Boost">
            <summary>
            Get/set the boost for this data.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.ResetBoost">
            <summary>
            Reset the boost to the original boost.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.DataCriteriaFormat">
            <summary>
            Get/set the data format of the data criteria.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.DataCriteria">
            <summary>
            Get/set data criteria associated with the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.DebugDataFormat">
            <summary>
            Get/set the data format of the debug data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.DebugData">
            <summary>
            Get/set debug data associated with the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.Description">
            <summary>
            Get/set a description of the data.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.annotation_type">
            <summary>
            When using annotations, the annotation type specifies the type of annotation.  Currently, only
            the BBOX annotation type is supported.
            </summary>
        </member>
        <member name="P:MyCaffe.basecode.SimpleDatum.annotation_group">
            <summary>
            When using annoations, each annotation group contains an annotation for a particular class used with SSD.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the data and return it as a new SimpleDatum.
            </summary>
            <param name="nH">Specifies the new height.</param>
            <param name="nW">Specifies the new width.</param>
            <returns>A new resized SimpleDatum is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.ToString">
            <summary>
            Return a string representation of the SimpleDatum.
            </summary>
            <returns>The string representation is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.ToArrayAsString(System.Int32)">
            <summary>
            Returns a string containing the items of the SimpleDatum.
            </summary>
            <param name="nMaxItems">Specifies the maximum number of items to output.</param>
            <returns>Returns a string containing the data items.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.ToBytemap">
            <summary>
            Return the SimpleData data as a Bytemap.
            </summary>
            <remarks>
            This function is only suported on byte based SimpleDatum's.
            </remarks>
            <returns>The Bytemap data is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.AccumulateMean(System.Double[]@,MyCaffe.basecode.SimpleDatum,System.Int32)">
            <summary>
            Accumulate a portion of a SimpleDatum to calculate the mean value.
            </summary>
            <param name="rgdfMean">Specifies the accumulated mean value.</param>
            <param name="sd">Specifies the SimpleDatum to add to the mean.</param>
            <param name="nTotal">Specifies the overall total used to calculate the portion of the sd to add to the mean value.</param>
            <returns>After successfully adding to the total used to calculate the mean, <i>true</i> is returned, otherwise if the SimpleDatum is a virtual datum <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.CalculateMean(MyCaffe.basecode.Log,MyCaffe.basecode.SimpleDatum[],System.Threading.WaitHandle[])">
            <summary>
            Calculate the mean of an array of SimpleDatum and return the mean as a new SimpleDatum.
            </summary>
            <param name="log">Specifies the Log used for output.</param>
            <param name="rgImg">Specifies the input SimpleDatum.</param>
            <param name="rgAbort">Specifies a set of wait handles used to abort the process.</param>
            <returns>A new SimpleDatum containing the mean is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.SaveAnnotationDataToDataCriteria">
            <summary>
            Save the annotation data and type to the data criteria.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.LoadAnnotationDataFromDataCriteria">
            <summary>
            Load the annotation data and type from the data criteria.
            </summary>
            <returns>When successfully loaded <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.SaveInfo(System.String)">
            <summary>
            Save the SimpleDatum information to a text file.
            </summary>
            <remarks>
            This function is typically used for debugging.
            </remarks>
            <param name="strFile">Specifies the name of the target file.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.LoadInfo(System.String)">
            <summary>
            Load a SimpleData from text file information previously saved with SaveInfo.
            </summary>
            <remarks>
            Note, the SimpleDatum only contains the information but no data for this is used for debugging.
            </remarks>
            <param name="strFile">Specifies the file to load the SimpleDatum from.</param>
            <returns>The SimpleDatum is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDatum.LoadFromPath(System.String)">
            <summary>
            Load all SimpleDatums from a directory of files previously stored with SaveInfo.
            </summary>
            <param name="strPath">Specifies the path to the files to load.</param>
            <returns>The list of SimpleDatum are returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.SimpleDictionary">
            <summary>
            The SimpleDictionary is a dictionary used to store a set of key/value pairs, primarily as the DICTIONARY Data Criteria type.
            </summary>
        </member>
        <member name="T:MyCaffe.basecode.SimpleDictionary.TYPE">
            <summary>
            Defines the value type of each element.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDictionary.TYPE.NONE">
            <summary>
            Specifies no type.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDictionary.TYPE.STRING">
            <summary>
            Specifies a text string value.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDictionary.TYPE.NUMERIC">
            <summary>
            Specifies a <i>double</i> value.
            </summary>
        </member>
        <member name="F:MyCaffe.basecode.SimpleDictionary.TYPE.INTEGER">
            <summary>
            Specifies a 32-bit <i>integer</i> value.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDictionary.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDictionary.GetType(System.String,MyCaffe.basecode.SimpleDictionary.TYPE@)">
            <summary>
            Returns the type of a given item.
            </summary>
            <param name="strName">Specifies the name of the item.</param>
            <param name="type">Returns the type of the item, if found in the dictionary.</param>
            <returns>If the variable 'strName' exists in the dictionary, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDictionary.GetNumeric(System.String)">
            <summary>
            Returns the numeric value of an item.
            </summary>
            <param name="strName">Specifies the name of the item to get.</param>
            <returns>The numeric value of the item is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDictionary.GetInteger(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns the integer value of an item.
            </summary>
            <param name="strName">Specifies the name of the item to get.</param>
            <param name="nDefault">Specifies a default value, which when specified is returned if no value is found.</param>
            <returns>The integer value of the item is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDictionary.GetString(System.String)">
            <summary>
            Returns the string value of an item.
            </summary>
            <param name="strName">Specifies the name of the item to get.</param>
            <returns>The string value of the item is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDictionary.Add(System.String,System.String)">
            <summary>
            Add a new string item to the dictionary.
            </summary>
            <param name="strName">Specifies the item name.</param>
            <param name="strVal">Specifies the item value.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDictionary.Add(System.String,System.Int32)">
            <summary>
            Add a new integer item to the dictionary.
            </summary>
            <param name="strName">Specifies the item name.</param>
            <param name="nVal">Specifies the item value.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDictionary.Add(System.String,System.Double)">
            <summary>
            Add a new numeric item to the dictionary.
            </summary>
            <param name="strName">Specifies the item name.</param>
            <param name="dfVal">Specifies the item value.</param>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDictionary.ToList">
            <summary>
            Get the list of values in the dictionary.
            </summary>
            <returns>The list of values is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDictionary.ToByteArray">
            <summary>
            Converts the dictionary to a byte array.
            </summary>
            <returns>The byte array is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDictionary.FromByteArray(System.Byte[])">
            <summary>
            Creates a new dictionary from a byte array.
            </summary>
            <param name="rg">Specifies the byte array to load.</param>
            <returns>The new dictionary is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDictionary.ToNumericValues(System.Int32,System.String)">
            <summary>
            Convert all numeric values into a standard Dictionary.
            </summary>
            <param name="nCount">Specifies the number of numeric values in the SimpleDictionary.</param>
            <param name="strKey">Specifies the base key used, such as 'A'.</param>
            <returns>A Dictionary of string-double pairs is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.SimpleDictionary.ToStringValues(System.Int32,System.String)">
            <summary>
            Convert all string values into a standard Dictionary.
            </summary>
            <param name="nCount">Specifies the number of string values in the SimpleDictionary.</param>
            <param name="strKey">Specifies the base key used, such as 'Atx'.</param>
            <returns>A Dictionary of string-string pairs is returned.</returns>
        </member>
        <member name="T:MyCaffe.basecode.IBinaryPersist">
            <summary>
            The IBinaryPersist interface provides generic save and load functionality.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.IBinaryPersist.Save(System.IO.BinaryWriter)">
            <summary>
            Save to a binary writer.
            </summary>
            <param name="bw">Specifies the binary writer.</param>
        </member>
        <member name="M:MyCaffe.basecode.IBinaryPersist.Load(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Load from a binary reader.
            </summary>
            <param name="br">Specifies the binary reader.</param>
            <param name="bNewInstance">When <i>true</i>, creates a new instance of the object, otherwise the current instance is loaded.</param>
            <returns></returns>
        </member>
        <member name="T:MyCaffe.basecode.Utility">
            <summary>
            The Utility class provides general utility funtions.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.Utility.#ctor">
            <summary>
            The Utility constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.basecode.Utility.CanonicalAxisIndex(System.Int32,System.Int32)">
            <summary>
            Returns the 'canonical' version of a (usually) user-specified axis,
            allowing for negative indexing (e.g., -1 for the last axis).
            </summary>
            <param name="nIdx">The axis index.</param> 
            <param name="nNumAxes">The total number of axes.</param>
            <returns>The zero based index is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Count(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32)">
            <summary>
            Return the count of items given the shape.
            </summary>
            <param name="rgShape">Specifies the shape to count from the start index through the end index.</param>
            <param name="nStartIdx">Specifies the start index (default = 0).</param>
            <param name="nEndIdx">Specifies the end index (default = -1, which uses length of rgShape).</param>
            <returns>The count is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Save``1(System.IO.BinaryWriter,System.Collections.Generic.List{``0})">
            <summary>
            Save a list of items to a binary writer.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="bw">Specifies the binary writer.</param>
            <param name="rg">Specifies the list of items.</param>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Load``1(System.IO.BinaryReader)">
            <summary>
            Loads a list of items from a binary reader.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="br">Specifies the binary reader.</param>
            <returns>The list of items is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Save(System.IO.BinaryWriter,System.Collections.Generic.List{System.Double})">
            <summary>
            Save a list of <i>double</i> to a binary writer.
            </summary>
            <param name="bw">Specifies the binary writer.</param>
            <param name="rg">Specifies the list of items.</param>
        </member>
        <member name="M:MyCaffe.basecode.Utility.LoadDouble(System.IO.BinaryReader)">
            <summary>
            Loads a list of <i>double</i> from a binary reader.
            </summary>
            <param name="br">Specifies the binary reader.</param>
            <returns>The list of items is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Save(System.IO.BinaryWriter,System.Collections.Generic.List{System.Single})">
            <summary>
            Save a list of <i>float</i> to a binary writer.
            </summary>
            <param name="bw">Specifies the binary writer.</param>
            <param name="rg">Specifies the list of items.</param>
        </member>
        <member name="M:MyCaffe.basecode.Utility.LoadFloat(System.IO.BinaryReader)">
            <summary>
            Loads a list of <i>float</i> from a binary reader.
            </summary>
            <param name="br">Specifies the binary reader.</param>
            <returns>The list of items is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Save(System.IO.BinaryWriter,System.Nullable{System.Int32})">
            <summary>
            Saves a nullable int to a binary writer.
            </summary>
            <param name="bw">Specifies the binary writer.</param>
            <param name="nVal">Specifies the value to write.</param>
        </member>
        <member name="M:MyCaffe.basecode.Utility.LoadInt(System.IO.BinaryReader)">
            <summary>
            Loads a nullable int from a binary reader.
            </summary>
            <param name="br">Specifies the binary reader.</param>
            <returns>The value read in is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.BaseTypeSize``1">
            <summary>
            Returns the base type size, where <i>double</i> = 8, <i>float</i> = 4.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <returns>The base type size (in bytes) is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.ConvertVal``1(``0)">
            <summary>
            Convert a generic to a <i>double</i>.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="fVal">Specifies the generic value.</param>
            <returns>The <i>double</i> value is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.ConvertVal``1(System.Double)">
            <summary>
            Convert a double to a generic.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="dfVal">Specifies the <i>double</i> value.</param>
            <returns>The generic value is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.ConvertVec``1(``0[])">
            <summary>
            Convert an array of generics to an array of <i>double</i>.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="rg">Specifies the array of generics.</param>
            <returns>The array of <i>double</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.ConvertVecF``1(``0[],System.Int32)">
            <summary>
            Convert an array of generics to an array of <i>float</i>.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="rg">Specifies the array of generics.</param>
            <param name="nStart">Specifies a start offset (default = 0).</param>
            <returns>The array of <i>float</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.ConvertVec``1(System.Double[])">
            <summary>
            Convert an array of <i>double</i> to an array of generics.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="rgdf">Specifies the array of <i>double</i>.</param>
            <returns>The array of generics is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.ConvertVec``1(System.Single[])">
            <summary>
            Convert an array of <i>float</i> to an array of generics.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="rgf">Specifies the array of <i>float</i>.</param>
            <returns>The array of generics is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Resize``1(System.Collections.Generic.List{``0}@,System.Int32,``0)">
            <summary>
            Resize a List and fill the new elements with the default value.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="rg">Specifies the List to resize.</param>
            <param name="nCount">Specifies the new count.</param>
            <param name="tDefault">Specifies the default value used when expanding the list.</param>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Clone``1(``0[])">
            <summary>
            Copy an array.
            </summary>
            <typeparam name="T">Specifies the base type.</typeparam>
            <param name="rg">Specifies the source array.</param>
            <returns>The new array is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Clone``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Copy a List up to a maximum count.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="rg">Specifies the list to copy.</param>
            <param name="nMaxCount">Optionally, specifies a maximum count to copy.</param>
            <returns>The new copy of the List is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Clone``1(``0[],System.Int32)">
            <summary>
            Copy a List up to a maximum count.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="rg">Specifies the array to copy.</param>
            <param name="nMaxCount">Optionally, specifies a maximum count to copy.</param>
            <returns>The new copy of the List is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Compare``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Compares one List to another.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="rg1">Specifies the first List.</param>
            <param name="rg2">Specifies the second List.</param>
            <returns>If the Lists are the same, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Create``1(System.Int32,``0)">
            <summary>
            Create a new List and fill it with default values up to a given count.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="nCount">Specifies the number of items.</param>
            <param name="fDefault">Specifies the default value.</param>
            <returns>The new List is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Set``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Set all values of a List with a given value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rg">Specifies the List.</param>
            <param name="fVal">Specifies the value.</param>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Set``1(``0[],``0)">
            <summary>
            Set all values within an array with a given value.
            </summary>
            <typeparam name="T">Specifies the base type <i>float</i> or <i>double</i>.  Using <i>float</i> is recommended to conserve GPU memory.</typeparam>
            <param name="rg">Specifies the array to set.</param>
            <param name="fVal">Specifies the value.</param>
        </member>
        <member name="M:MyCaffe.basecode.Utility.ToString``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Convert an array to a string.
            </summary>
            <typeparam name="T">Specifies the base type of the array.</typeparam>
            <param name="rg">Specifies the array.</param>
            <param name="nDecimals">Optionally, specifies the number of decimals (default = -1, ignored)</param>
            <param name="nIdxHighight">Optionally, specifies the index to highlight (default = -1, ignored)</param>
            <returns>The string representation of the array is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.GetNumber(System.String)">
            <summary>
            Parses a string into a number, or if the string does not contain a number returns 0.
            </summary>
            <param name="str">Specifies the string to parse.</param>
            <returns>The parsed number is returned, or if the string does not contan a number, 0 is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Replace(System.String,System.Char,System.Char)">
            <summary>
            Replaces each instance of one character with another character in a given string.
            </summary>
            <param name="str">Specifies the string.</param>
            <param name="ch1">Specifies the character to find.</param>
            <param name="ch2">Specifies the character replacement.</param>
            <returns>The new string is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Replace(System.String,System.Char,System.String)">
            <summary>
            Replaces each instance of one character with another string in a given string.
            </summary>
            <param name="str">Specifies the string.</param>
            <param name="ch1">Specifies the character to find.</param>
            <param name="str2">Specifies the string replacement.</param>
            <returns>The new string is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.Replace(System.String,System.String,System.Char)">
            <summary>
            Replaces each instance of one character with another string in a given string.
            </summary>
            <param name="str">Specifies the string.</param>
            <param name="str1">Specifies the string to find.</param>
            <param name="ch2">Specifies the char replacement.</param>
            <returns>The new string is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.ReplaceMacro(System.String,System.String,System.String)">
            <summary>
            The <c>ConvertMacro</c> method is used to replace a set of macros in a given string.
            </summary>
            <param name="strRaw">Specifies the raw string.</param>
            <param name="strMacroName">Specifies the macro to be replaced.</param>
            <param name="strReplacement">Specifies the replacement string.</param>
            <returns>The new string with all macros replaced is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.ReplaceMacros(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            The <c>ReplaceMacros</c> method is used to replace a set of macros in a given string.
            </summary>
            <param name="strRaw">Specifies the raw string.</param>
            <param name="rgMacros">Specifies the set of macros.</param>
            <returns>The new string with the macros replaced, is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.ConvertTimeToMinutes(System.DateTime)">
            <summary>
            Convert a date time into minutes since 1/1/1980
            </summary>
            <param name="dt">Specifies the datetime to convert.</param>
            <returns>The minutes since 1/1/1980 is returned.</returns>
        </member>
        <member name="M:MyCaffe.basecode.Utility.ConvertTimeFromMinutes(System.Double)">
            <summary>
            Convert a number of minutes into the date time equivalent to 1/1/1980 + the minutes.
            </summary>
            <param name="dfMin">Specifies the minutes since 1/1/1980.</param>
            <returns>The datetime is returned.</returns>
        </member>
    </members>
</doc>
