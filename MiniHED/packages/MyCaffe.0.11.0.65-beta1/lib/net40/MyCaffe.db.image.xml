<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyCaffe.db.image</name>
    </assembly>
    <members>
        <member name="T:MyCaffe.db.image.Database">
            <summary>
            The Database class manages the actual connection to the physical database using <a href="https://msdn.microsoft.com/en-us/library/aa937723(v=vs.113).aspx">Entity Framworks</a> from Microsoft.
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.Database.m_strPrimaryImgPath">
            <summary>
            Specifies the base path to the file based data.
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.Database.m_strSecondaryImgPath">
            <summary>
            Specifies the secondary base path to the file based data (used when copying a data source)
            </summary> 
        </member>
        <member name="F:MyCaffe.db.image.Database.m_bEnableFileBasedData">
            <summary>
            Specifies whether or not file based data is enabled.
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.Database.m_nLastIndex">
            <summary>
            Specifies the last index added to the data source.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.Database.#ctor">
            <summary>
            The Database constructor.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.Database.LastIndex">
            <summary>
            Returns the last image index added to the database.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.Database.SaveChanges">
            <summary>
            Saves any changes on the open satabase.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.Database.CurrentSource">
            <summary>
            Returns the current entity framwork Source object set during the previous call to Open().
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.Database.Open(System.Int32,System.Boolean)">
            <summary>
            Opens a data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source to open.</param>
            <param name="bForceLoadImageFilePath">Optionally, specifies to force load the image file path (default = <i>false</i>).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.Open(System.String,System.Boolean)">
            <summary>
            Opens a data source.
            </summary>
            <param name="strSrc">Specifies the name of the data source to open.</param>
            <param name="bForceLoadImageFilePath">Optionally, specifies to force load the image file path (default = <i>false</i>) and use file-based data.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.setImagePath(System.Boolean)">
            <summary>
            Sets the image path member to the path used when saving binary data to the file system.
            </summary>
            <param name="bForceLoadImageFilePath">Specifies whether or not to enable saving binary data to the file system.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.getImagePath(System.String)">
            <summary>
            Returns the base image path used when saving binary data to the file system.
            </summary>
            <returns>The base image path is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.Close">
            <summary>
            Close the previously opened data source.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.Database.Refresh">
            <summary>
            Close and re Open with the current data source.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatabaseFilePath(System.String)">
            <summary>
            Query the physical database file path.
            </summary>
            <param name="strName">Specifies the name of the database.</param>
            <returns>The physical file path is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatabaseImagePath(System.String)">
            <summary>
            Query the physical database file path for Images.
            </summary>
            <param name="strName">Specifies the name of the database.</param>
            <returns>The physical file path is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateLabelName(System.Int32,System.String,System.Int32)">
            <summary>
            Update the name of a label.
            </summary>
            <param name="nLabel">Specifies the label.</param>
            <param name="strName">Specifies the new name.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetLabel(System.Int32)">
            <summary>
            Return the Label with the given ID.
            </summary>
            <param name="nID">Specifies the Label ID.</param>
            <returns>When found, the Label with the ID is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetLabelName(System.Int32,System.Int32)">
            <summary>
            Get the Label name of a label within a data source.
            </summary>
            <param name="nLabel">Specifies the label.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>When found, the Label is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.FindLabelInCache(System.Int32)">
            <summary>
            Search for a Label in the label cache.
            </summary>
            <param name="nLabel">Specifies the label.</param>
            <returns>When found, the Label is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetLabelID(System.Int32)">
            <summary>
            Returns the label ID associated with a label value.
            </summary>
            <param name="nLabel">Specifies the label.</param>
            <returns>The ID of the Label is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetLabelCount(System.Int32)">
            <summary>
            Returns the number of images under a given label.
            </summary>
            <param name="nLabel">Specifies the label.</param>
            <returns>The number of images is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.AddLabelToCache(System.Int32)">
            <summary>
            Adds a label to the label cache.
            </summary>
            <param name="nLabel">Specifies the label.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.SaveLabelCache">
            <summary>
            Saves the label cache to the database.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateLabelCounts(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Updates the label counts in the database for the open data source.
            </summary>
            <param name="rgCounts">Specifies a dictionary containing (int nLabel, int nCount) pairs.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.LoadLabelCounts(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)">
            <summary>
            Load the label counts from the database for a data source.
            </summary>
            <param name="rgCounts">Specifies where the counts are loaded.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetLabelCountsAsText(System.Int32)">
            <summary>
            Returns the label counts for a given data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>A string containing the label counts is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateLabelCounts(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)">
            <summary>
            Update the label counts for a given data source.
            </summary>
            <param name="rgCounts">Specifies the counts.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateLabelCounts(System.Int32,System.Int32)">
            <summary>
            Update the label counts for a given data source and project (optionally) by querying the database for the actual counts.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="nProjectId">Optionally, specifies the ID of a project to use (default = 0).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateLabelCounts">
            <summary>
            Update the label counts for the currently open data source by querying the database for the actual counts.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetLabels(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Returns a list of all labels used by a data source.
            </summary>
            <param name="bSort">Specifies to sort the labels by label.</param>
            <param name="bWithImagesOnly">Specifies to only return labels that actually have images associated with them.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.DeleteLabels(System.Int32)">
            <summary>
            Delete the labels of a data source from the database.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.AddLabel(System.Int32,System.String,System.Int32)">
            <summary>
            Add a label to the database for a data source.
            </summary>
            <param name="nLabel">Specifies the label.</param>
            <param name="strName">Optionally, specifies a label name (default = "").</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The ID of the added label is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.AddLabelBoost(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Add a label boost to the database for a given project.
            </summary>
            <param name="nProjectId">Specifies the ID of the project for which the label boost is to be added.</param>
            <param name="nLabel">Specifies the label.</param>
            <param name="dfBoost">Specifies the boost.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.SetLabelMapping(MyCaffe.basecode.LabelMapping,System.Int32)">
            <summary>
            Saves a label mapping in the database for a data source.
            </summary>
            <param name="map">Specifies the label mapping.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateLabelMapping(System.Int32,System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Update a label mapping in the database for a data source.
            </summary>
            <param name="nNewLabel">Specifies the new label.</param>
            <param name="rgOriginalLabels">Specifies the original labels that are to be mapped to the new label.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.ResetLabels(System.Int32,System.Int32)">
            <summary>
            Resets all labels back to their original labels for a project.
            </summary>
            <param name="nProjectId">Optionally, specifies the ID of a project (default = 0).</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.DeleteLabelBoosts(System.Int32,System.Int32)">
            <summary>
            Delete all label boosts for a project.
            </summary>
            <param name="nProjectId">Specifies the ID of a project.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.DeleteLabelBoosts(System.Int32)">
            <summary>
            Delete all label boosts for a project.
            </summary>
            <param name="nProjectId">Specifies the ID of a project.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.ResetLabelBoosts(System.Int32)">
            <summary>
            Reset all label boosts to their orignal settings for a project.
            </summary>
            <param name="nProjectId">Specifies the ID of a project.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetLabelBoosts(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Returns a list of all label boosts set on a project.
            </summary>
            <param name="nProjectId">Specifies the ID of a project.</param>
            <param name="bSort">Optionally, specifies whether or not to sort the labels by active label (default = true).</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>A list of LabelBoosts is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetLabelBoostsAsText(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the Label boosts as a string.
            </summary>
            <param name="nProjectId">Specifies the ID of a project.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="bSort">Optionally, specifies whether or not to sort the labels by active label (default = true).</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.ActivateLabels(System.Collections.Generic.List{System.Int32},System.Boolean,System.Int32[])">
            <summary>
            Activate (or deactivate) the labels specified for each of the source ID's specified.
            </summary>
            <param name="rgLabels">Specifies the labels.</param>
            <param name="bActive">Specifies whether to activate (<i>true</i>) or deactivate (<i>false</i>) the labels.</param>
            <param name="rgSrcId">Specifies the source ID's who's labels are to be activated.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateLabelBoost(System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32[])">
            <summary>
            Update the label and boost for a given search target criteria.
            </summary>
            <param name="nTgtLbl">Specifies the target label to replace, or null to ignore.</param>
            <param name="bTgtLblExact">When a target label is specified, this parameter specifies whether to treat the target label as an exact value (true) for a minimum value (false).</param>
            <param name="nTgtBst">Specifies the target boost to replace, or null to ignore.</param>
            <param name="bTgtBstExact">When a target boost is specified, this parameter specifies whether to treat the target boost as an exact value (true) for a minimum value (false).</param>
            <param name="nNewLbl">Specifies the new label, or null to ignore.</param>
            <param name="nNewBst">Specifies the new boost, or null to ignore.</param>
            <param name="rgSrcId">Specifies the SourceID's on which to alter the label and/or boost.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetImageCount">
            <summary>
            Returns the number of raw images in the database for the open data source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetAllRawImageIndexes(System.Boolean,System.Boolean)">
            <summary>
            Returns the list of the image indexes of all images.
            </summary>
            <param name="bBoostedOnly">Specifies to only retrieve boosted images.</param>
            <param name="bActiveOnly">Optionally, specifies to query active images only (default = true).</param>
            <returns>The image indexes are returned in a list.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.QueryRawImages(System.Int32[])">
            <summary>
            Returns the list of raw images that have a source ID from a selected list.
            </summary>
            <param name="rgSrcId">Specifies the list of source ID.</param>
            <returns>The list of RawImage's is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.QueryRawImageParameters(System.Int32,System.String)">
            <summary>
            Query a list of all raw image parameters of a give name stored with a given source ID.
            </summary>
            <param name="nSrcId">Specifies the source ID.</param>
            <param name="strName">Specifies the parameter name.</param>
            <returns>The list of RawImageParameter values is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.QueryRawImageParameters(System.Int32)">
            <summary>
            Query all image parameters for a given image.
            </summary>
            <param name="nImageID">Specifies the image ID who's image parameters are to be queried.</param>
            <returns>The list of any image parameters forund for the image are returned</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.QueryRawImages(System.Int32,System.Nullable{System.Boolean},System.Int32,System.Boolean)">
            <summary>
            Returns the list of raw images that have a source ID from a selected list.
            </summary>
            <param name="nSrcId">Specifies the source ID.</param>
            <param name="bActive">Optionally, specifies to query active (or non active) images (default = <i>null</i>, which queries all images).</param>
            <param name="nBoostVal">Optionally, specifies a boost value to query (default = 0, which ignores this filter).</param>
            <param name="bExactBoostVal">Optionally, specifies whether or not the boost value is an exact value or to be treated as a value greater than or equal to (default = false).</param>
            <returns>The list of RawImage's is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImagesAt(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Returns a list of RawImages from the database for a data source.
            </summary>
            <param name="nIdx">Specifies the starting image index.</param>
            <param name="nCount">Specifies the number of images to retrieve from the starting index <i>nIdx</i>.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDescription">Optionally, specifies a description to filter the images retrieved (when specified, only images matching the filter are returned) (default = null).</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImagesAt(System.Collections.Generic.List{System.Int32},System.Int32,System.String)">
            <summary>
            Returns a list of RawImages from the database for a data source.
            </summary>
            <param name="rgImageIdx">Specifies the list of image indexes to query (maximum of 100).</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDescription">Optionally, specifies a description to filter the images retrieved (when specified, only images matching the filter are returned) (default = null).</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImagesAtID(System.Collections.Generic.List{System.Int32},System.Int32,System.String)">
            <summary>
            Returns a list of RawImages from the database for a data source.
            </summary>
            <param name="rgImageID">Specifies the list of image IDs to query (maximum of 100).</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDescription">Optionally, specifies a description to filter the images retrieved (when specified, only images matching the filter are returned) (default = null).</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageAt(System.Int32,System.Int32)">
            <summary>
            Returns the RawImage at a given image index.
            </summary>
            <param name="nIdx">Specifies the image index to retrieve.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageID(System.DateTime,System.Int32)">
            <summary>
            Returns the RawImage ID for the image with the given time-stamp. 
            </summary>
            <param name="dt">Specifies the image time-stamp.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The ID of the RawImage is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageData(MyCaffe.db.image.RawImage,System.Boolean,System.Boolean,System.Byte[]@,System.Nullable{System.Int32}@,System.Byte[]@,System.Nullable{System.Int32}@)">
            <summary>
            Returns the raw data of the RawImage.
            </summary>
            <remarks>
            If the RawImage uses its Virtual ID, the RawImage with that ID is queried from the database and its raw data is returned.
            </remarks>
            <param name="img">Specifies the RawImage to use.</param>
            <param name="bLoadDataCriteria">Specifies whether or not to load the data criteria data if any exists.  When false, the data criteria data is not loaded from file.</param>
            <param name="bLoadDebugData">Specifies whether or not to load the debug data if any exists.  When false, the debug data is not loaded from file.</param>
            <param name="rgDataCriteria">Returns the image data criteria (if any).</param>
            <param name="nDataCriteriaFmtId">Returns the image data criteria format (if any).</param>
            <param name="rgDebugData">Returns the image debug data (if any).</param>
            <param name="nDebugDataFmtId">Returns the debug data format (if any).</param>
            <returns>The raw data is returned as a array of <i>byte</i> values.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageDataCriteria(MyCaffe.db.image.RawImage,System.Nullable{System.Int32}@)">
            <summary>
            Returns the raw data criteria data of the RawImage.
            </summary>
            <remarks>
            If the RawImage uses its Virtual ID, the RawImage with that ID is queried from the database and its raw data is returned.
            </remarks>
            <param name="img">Specifies the RawImage to use.</param>
            <param name="nDataCriteriaFmtId">Returns the image data criteria format (if any).</param>
            <returns>The raw data criteria is returned as a array of <i>byte</i> values.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageDebugData(MyCaffe.db.image.RawImage,System.Nullable{System.Int32}@)">
            <summary>
            Returns the raw debug data data of the RawImage.
            </summary>
            <remarks>
            If the RawImage uses its Virtual ID, the RawImage with that ID is queried from the database and its raw data is returned.
            </remarks>
            <param name="img">Specifies the RawImage to use.</param>
            <param name="nDebugDataFormatId">Returns the image debug data format (if any).</param>
            <returns>The raw debug data is returned as a array of <i>byte</i> values.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageDebugData(System.Byte[],System.Nullable{System.Int32})">
            <summary>
            Converts the raw image debug data which may be stored as a path to the underlying data file, to the actual data.
            </summary>
            <param name="rgData">Specifies the raw data, which may contain an image path.</param>
            <param name="nOriginalSourceID">Optionally, specifies the original source ID that stores the image.</param>
            <remarks>
            You must Open the database with the source under which the image is stored.
            </remarks>
            <returns>The actual raw data is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageDataCriteria(System.Byte[],System.Nullable{System.Int32})">
            <summary>
            Converts the raw image data criteria data which may be stored as a path to the underlying data file, to the actual data.
            </summary>
            <param name="rgData">Specifies the raw data, which may contain an image path.</param>
            <param name="nOriginalSourceID">Optionally, specifies the original source ID that stores the image.</param>
            <remarks>
            You must Open the database with the source under which the image is stored.
            </remarks>
            <returns>The actual raw data is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.getRawImage(System.Byte[],System.Nullable{System.Int32})">
            <summary>
            Converts a set of bytes from a file path\name by loading its bytes and returning them, or if the original bytes do not
            contain a path, just returns the original bytes.
            </summary>
            <param name="rgData">Specifies the original bytes.</param>
            <param name="nSecondarySrcId">Optionally, specifies a secondary data Source ID (default = null).</param>
            <returns>The actual data bytes (whether direct or loaded from file) are returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.getImagePath(System.Byte[])">
            <summary>
            Returns the file path contained within a byte array or <i>null</i> if no path is found.
            </summary>
            <param name="rgData">Specifies the bytes to check.</param>
            <returns>The actual embedded file path is returned if found, otherwise, <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.ChangeRawImageSourceID(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Change the data source ID on a raw image - currently only allowed on virtual raw images.
            </summary>
            <param name="nID">Specifies the raw image ID.</param>
            <param name="nNewSrcID">Specifies the ID of the new source.</param>
            <param name="bSave">Optionally, specifies whether or not to save the changes (default = true).</param>
            <returns>If the source ID is replaced, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateActiveLabel(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Update the label value of a label.
            </summary>
            <param name="nID">Specifies the ID of the label.</param>
            <param name="nLabel">Specifies the new label value.</param>
            <param name="bActivate">Specifies whether or not to activate the image, the default = <i>true</i>.</param>
            <param name="bSaveChanges">Specifies whether or not to save the changes, the default = <i>true</i>.</param>
            <returns>If the Label is found and set, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateActiveLabelByIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Update the label value of a label.
            </summary>
            <param name="nSrcId">Specifies the source ID.</param>
            <param name="nIdx">Specifies the ID of the label.</param>
            <param name="nLabel">Specifies the new label value.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateAllActiveLabels(System.Int32,System.Int32)">
            <summary>
            Update the all items to a label value for the given nSrcId.
            </summary>
            <param name="nSrcId">Specifies the source ID.</param>
            <param name="nLabel">Specifies the new label value.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.ActivateRawImageByIndex(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Activate/deactivate a raw image based on its index.
            </summary>
            <param name="nSrcId">Specifies the source ID.</param>
            <param name="nIdx">Specifies the ID of the label.</param>
            <param name="bActive">Specifies the new active state to set.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateActiveLabelDirect(System.Int32,System.Int32)">
            <summary>
            Directly update the active label and activate the image with the specified ID.
            </summary>
            <param name="nID">Specifies the image ID.</param>
            <param name="nLabel">Specifies the new active label.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateRawImageDescription(System.Int32,System.String)">
            <summary>
            Update the description of a RawImage.
            </summary>
            <param name="nID">Specifies the ID of the RawImage.</param>
            <param name="strDescription">Specifies the new description.</param>
            <returns>If the RawImage is found and updated, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateRawImageDescriptionFromParameter(System.Int32,System.String)">
            <summary>
            Update the RawImage description from a RawImage parameter.
            </summary>
            <param name="nID">Specifies the ID of the RawImage.</param>
            <param name="strParamName">Specifies the RawImage parameter name.</param>
            <returns>If the RawImage is found and updated, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.QueryAllRawImageIDs(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the ID's of all RawImages within a data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="nMax">Optionally, specifies the maximum number of ID's to query (default = int.MaxValue).</param>
            <param name="nLabel">Optionally, specifies a label from which images are to be queried (default = -1, which ignores this parameter).</param>
            <param name="nBoost">Optionally, specifies a boost from which images are to be queried (default = -1, which ignores this parameter).</param>
            <param name="bBoostIsExact">Optionally, specifies whether the boost value is exact (<i>true</i>) or the minimum boost where all values equal are greater are retrieved (<i>false</i>).  Default = false.</param>
            <returns>The List of RawImage ID's is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.CreateRawImage(System.Int32,MyCaffe.basecode.SimpleDatum,System.String,System.Nullable{System.Int32})">
            <summary>
            Create a new RawImage but do not add it to the database.
            </summary>
            <param name="nIdx">Specifies the image index.</param>
            <param name="d">Specifies the SimpleDatum containing the data.</param>
            <param name="strDescription">Optionally, specifies the description (default = null).</param>
            <param name="nOriginalSourceID">Optionally, specifies the original source ID (default = null)</param>
            <returns>The RawImage is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.setImageByteData(System.Byte[],System.String,System.String)">
            <summary>
            When enabled, saves the bytes to file and returns the file name of the binary file saved as an
            array of bytes..
            </summary>
            <remarks>
            The path format returned is 'FILE:filepath'
            </remarks>
            <param name="rgImg">Specifies the bytes to check for a path.</param>
            <param name="strType">Specifies an extra name to add to the file name.</param>
            <param name="strGuid">Specifies an optional guid string to use as the file name.</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.ConvertRawImagesSaveToFile(System.Int32,System.Int32,MyCaffe.basecode.CancelEvent)">
            <summary>
            The ConvertRawImagesSaveToFile method saves the image in the database to the file system and replaces the database data with the 
            path to the saved image, thus saving database space.
            </summary>
            <param name="nIdx">Specifies the first index of a RawImage to convert.</param>
            <param name="nCount">Specifies the number of RawImages to convert including and following the RawImage at the index.</param>
            <param name="evtCancel">Optionally, specifies a cancellation event.</param>
            <returns>Upon full completion, <i>true</i> is returned, otherwise <i>false</i> is returned when cancelled.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.ConvertRawImagesSaveToDatabase(System.Int32,System.Int32,MyCaffe.basecode.CancelEvent)">
            <summary>
            The ConvertRawImagesSaveToDatabase method saves the image in the file system to the database and deletes the file from
            the file system.
            </summary>
            <param name="nIdx">Specifies the first index of a RawImage to convert.</param>
            <param name="nCount">Specifies the number of RawImages to convert including and following the RawImage at the index.</param>
            <param name="evtCancel">Optionally, specifies a cancellation event.</param>
            <returns>Upon full completion, <i>true</i> is returned, otherwise <i>false</i> is returned when cancelled.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.FixupRawImageCopy(System.Int32,System.Int32)">
            <summary>
            The FixupRawImageCopy method is used to fixup the OriginalSourceId by setting it to a secondary
            source ID in the event that the path created using the PrimarySourceID does not have the image
            data file.
            </summary>
            <remarks>
            When creating a copy of a Data Source that uses both training and testing Data Sources (e.g., 
            re-arranging the time period used for training vs testing), it is important that the 
            OriginalSourceID be set with the Data Source ID that holds the data file.
            </remarks>
            <param name="nImageID">Specifies the image to update.</param>
            <param name="nSecondarySrcId">Specifies the secondary Source ID to use if the data file is not found.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.PutRawImageParameters(System.Collections.Generic.List{MyCaffe.db.image.ParameterData})">
            <summary>
            Save a list of raw image parameters.
            </summary>
            <param name="rgParam">Specifies the list of parameters to save.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.PutRawImages(System.Collections.Generic.List{MyCaffe.db.image.RawImage},System.Collections.Generic.List{System.Collections.Generic.List{MyCaffe.db.image.ParameterData}})">
            <summary>
            Saves a List of RawImages to the database.
            </summary>
            <param name="rgImg">Specifies the list of RawImages.</param>
            <param name="rgrgParam">Optionally, specifies the List of parameters to also save for each RawImage (default = null).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.PutRawImage(System.Int32,MyCaffe.basecode.SimpleDatum,System.String)">
            <summary>
            Save a SimpleDatum as a RawImage in the database.
            </summary>
            <param name="nIdx">Specifies the image index.</param>
            <param name="d">Specifies the SimpleDatum containing the data.</param>
            <param name="strDescription">Optionally, specifies a description for the RawImage (default = null).</param>
            <returns>The ID of the RawImage is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImage(System.Int32)">
            <summary>
            Returns the RawImage with a given ID.
            </summary>
            <param name="nID">Specifies the RawImage ID.</param>
            <returns>The RawImage is returned, or <i>null</i> if not found.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.QueryRawImageCount(System.Int32)">
            <summary>
            Returns the number of RawImages in a data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The number of RawImages is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.DeleteRawImages(System.Int32)">
            <summary>
            Delete all RawImages in a data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.DeleteRawImageResults(System.Int32)">
            <summary>
            Delete all RawImageResults for a data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageMean(System.Int32)">
            <summary>
            Return the RawImageMean for the image mean from the open data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The RawImageMean is returned if found, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.PutRawImageMean(MyCaffe.basecode.SimpleDatum,System.Boolean,System.Int32)">
            <summary>
            Save the SimpleDatum as a RawImageMean in the database.
            </summary>
            <param name="sd">Specifies the data.</param>
            <param name="bUpdate">Specifies whether or not to update the mean image.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The ID of the RawImageMean is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.CopyImageMean(System.Int32,System.Int32)">
            <summary>
            Copy the raw image mean from one source to another.
            </summary>
            <param name="nSrcIdSrc">Specifies the Data Source ID with the source image mean to copy.</param>
            <param name="nSrcIdDst">Specifies the Data Source ID with the destination image mean where the source is copied to.</param>
            <returns>On success, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.DeleteRawImageMeans(System.Int32)">
            <summary>
            Delete all RawImageMeans for a data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetBoostCount(System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Return the number of boosted images for a data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strFilterVal">Optionally, specifies a parameter filtering value (default = <i>null</i>).</param>
            <param name="nBoostVal">Optionally, specifies a boost filtering value (default = <i>null</i>).</param>
            <returns>The number of boosted images is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.ActivateFiltered(System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Activate the images that meet the filtering criteria in the Data Source.  If no filtering criteria is set, all images are activated.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strFilterVal">Optionally, specifies a parameter filtering value (default = <i>null</i>).</param>
            <param name="nBoostVal">Optionally, specifies a boost filtering value (default = <i>null</i>).</param>
            <returns>The number of activated images is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetImageCount(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Get the number of images in the source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="bActive">Optionally, specifies to get the active image count.</param>
            <param name="bInactive">Optionally, specifies to get the inactive image count.</param>
            <returns>The number of images is returned.  When both 'bActive' and 'bInactive' are <i>true</i> the total image count is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.ResetAllBoosts(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Reset all image boosts for a data set.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="nMinBoost">Optionally, specifies a minimum boost where all ActiveBoost values of this value or higher are reset (default = 0 which resets all boosts to their original setting).</param>
            <param name="bExactVal">Optionally, specifies that the min boost value is an exact value instead of a minimum value.</param>
            <param name="nDesiredBoostVal">Optionally, specifies the desired boost value (default = -1, which resets to the OriginalBoost value).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateBoost(System.Int64,System.Int32)">
            <summary>
            Update the image boost of a given image.
            </summary>
            <param name="nImageID">Specifies the ID of the RawImage.</param>
            <param name="nBoost">Specifies the new boost value.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateBoosts(System.Int32,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Update the boost of all images between a date range.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="dtStart">Specifies the start of the date range.</param>
            <param name="dtEnd">Specifies the end of the date range.</param>
            <param name="nBoost">Specifies the new boost value.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.ReindexRawImages(MyCaffe.basecode.Log,MyCaffe.basecode.CancelEvent,System.Int32)">
            <summary>
            Reindex the RawImages of a data source.
            </summary>
            <param name="log">Specifies the Log to use for status output.</param>
            <param name="evtCancel">Specifies the cancel event used to cancel the operation.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>Upon completion the list of raw images reindexed is returned, otherwise <i>null</i> is returned when cancelled.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateRawImageSourceID(System.Int32,System.Int32)">
            <summary>
            Updates a given image's source ID.
            </summary>
            <param name="nImageID">Specifies the ID of the image to update.</param>
            <param name="nSrcID">Specifies the new source ID.</param>
            <returns>If the source ID is updated, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.ActivateRawImage(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Activate/Deactivate a given image.
            </summary>
            <param name="nImageID">Specifies the ID of the image to activate/deactivate.</param>
            <param name="bActivate">Specifies whether to activate (<i>true</i>) or deactivate (<i>false</i>) the image.</param>
            <param name="bSave">Specifies whether or not to save the changes (when false, calling SaveChanges() is needed).</param>
            <returns>If the active state is changed, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.ActivateAllRawImages(System.Boolean,System.Int32[])">
            <summary>
            Activate all raw images associated with a set of source ID's.
            </summary>
            <param name="bActive">Specifies whether or not to activate the images.</param>
            <param name="rgSrcId">Specifies the source ID's.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.PutRawImageResults(System.Int32,System.Int32,System.Int32,System.DateTime,System.Collections.Generic.List{MyCaffe.basecode.Result},System.Boolean)">
            <summary>
            Save the results of a Run as a RawImageResult.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <param name="nIdx">Specifies the index of the result.</param>
            <param name="nLabel">Specifies the expected label of the result.</param>
            <param name="dt">Specifies the time-stamp of the result.</param>
            <param name="rgResults">Specifies the results of the run as a list of (int nLabel, double dfReult) values.</param>
            <param name="bInvert">Specifies whether or not the results are inverted.</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageResults(System.Int32)">
            <summary>
            Returns the RawImageResults for a data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The list of RawImageResults is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageParameter(System.Int32,System.String,System.String)">
            <summary>
            Return the string value of a RawImage parameter.
            </summary>
            <param name="nRawImageID">Specifies the ID of the RawImage.</param>
            <param name="strName">Specifies the name of the parameter.</param>
            <param name="strDefault">Specifies the default value to return if the RawImage or parameter are not found.</param>
            <returns>The parameter value is returned as a string.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageParameter(System.Int32,System.String,System.Int32)">
            <summary>
            Return the <i>int</i> value of a RawImage parameter.
            </summary>
            <param name="nRawImageID">Specifies the ID of the RawImage.</param>
            <param name="strName">Specifies the name of the parameter.</param>
            <param name="nDefault">Specifies the default value to return if the RawImage or parameter are not found.</param>
            <returns>The parameter value is returned as a <i>int</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageParameter(System.Int32,System.String,System.Double)">
            <summary>
            Return the <i>double</i> value of a RawImage parameter.
            </summary>
            <param name="nRawImageID">Specifies the ID of the RawImage.</param>
            <param name="strName">Specifies the name of the parameter.</param>
            <param name="dfDefault">Specifies the default value to return if the RawImage or parameter are not found.</param>
            <returns>The parameter value is returned as a <i>double</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageParameter(System.Int32,System.String,System.Boolean)">
            <summary>
            Return the <i>bool</i> value of a RawImage parameter.
            </summary>
            <param name="nRawImageID">Specifies the ID of the RawImage.</param>
            <param name="strName">Specifies the name of the parameter.</param>
            <param name="bDefault">Specifies the default value to return if the RawImage or parameter are not found.</param>
            <returns>The parameter value is returned as a <i>bool</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageParameterData(System.Int32,System.String)">
            <summary>
            Return the <i>byte</i> array data of a RawImage parameter.
            </summary>
            <param name="nRawImageID">Specifies the ID of the RawImage.</param>
            <param name="strName">Specifies the name of the parameter.</param>
            <returns>The parameter <i>byte</i> array data is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageParameterEx(System.Int32,System.String)">
            <summary>
            Returns the RawImageParameter entity given the image ID and parameter name..
            </summary>
            <param name="nRawImageID">Specifies the ID of the RawImage.</param>
            <param name="strName">Specifies the parameter name.</param>
            <returns>The RawImageParameter entity is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.SetRawImageParameter(System.Int32,System.String,System.String,System.Nullable{System.Double},System.Byte[],System.Boolean,System.Boolean,MyCaffe.db.image.DNNEntities)">
            <summary>
            Add a new RawImage parameter (or update an existing if found).
            </summary>
            <param name="nRawImageID">Specifies the ID of the RawImage.</param>
            <param name="strName">Specifies the name of the parameter.</param>
            <param name="strValue">Specifies the value of the parameter as a string.</param>
            <param name="dfVal">Specifies the value of the parameter as a numeric value (default = null).</param>
            <param name="rgData">Optionally, specifies the <i>byte</i> data associated with the parameter (default = null).</param>
            <param name="bSave">Optionally, specifies to save the data to the database (default = true).</param>
            <param name="bOnlyAddNew">Optionally, specifies to only add the parameter if it doesnt exist (default = false).</param>
            <param name="entities">Optionally, specifies the entities to use (default = null in which case the open data source entities are used).</param>
            <returns>The ID of the RawImageParameter is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.SetRawImageParameter(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Double},System.Byte[])">
            <summary>
            Add a new RawImage parameter (or update an existing if found).
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <param name="nRawImageID">Specifies the ID of the RawImage.</param>
            <param name="strName">Specifies the name of the parameter.</param>
            <param name="strValue">Specifies the value of the parameter as a string.</param>
            <param name="dfVal">Specifies the value of the parameter as a numeric value (default = null).</param>
            <param name="rgData">Optionally, specifies the <i>byte</i> data associated with the parameter (default = null).</param>
            <returns>The ID of the RawImageParameter is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.SetRawImageParameterAt(System.DateTime,System.String,System.String,System.Nullable{System.Double},System.Byte[])">
            <summary>
            Set the RawImage parameter for all RawImages with the given time-stamp in the data source.
            </summary>
            <param name="dt">Specifies the time-stamp.</param>
            <param name="strName">Specifies the name of the parameter.</param>
            <param name="strValue">Specifies the value of the parameter as a string.</param>
            <param name="dfVal">Specifies the value of the parameter as a numeric value.</param>
            <param name="rgData">Optionally, specifies the <i>byte</i> data associated with the parameter (default = null).</param>
            <returns>The ID of the RawImageParameter is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.DeleteRawImageParameters(System.Int32)">
            <summary>
            Delete all RawImage parameters within a data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageParameterCount(System.String,System.Int32,System.String)">
            <summary>
            Returns the RawImage parameter count for a data source.
            </summary>
            <param name="strName">Specifies the parameter name.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strType">Optionally, specifies the parameter type of 'TEXT', 'NUMERIC' or 'VALUE' (default = "TEXT").</param>
            <returns>The number of RawImage parameters is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageParameterExist(System.String,System.Int32,System.String)">
            <summary>
            Returns whether or not a given RawImage parameter exists.
            </summary>
            <param name="strName">Specifies the parameter name.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strType">Optionally, specifies the parameter type of 'TEXT', 'NUMERIC' or 'VALUE' (default = "TEXT").</param>
            <returns>Returns <i>true</i> if the parameter exists, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetRawImageDistinctParameterDescriptions(System.Int32)">
            <summary>
            Returns a list of distinct RawImage parameter descriptions for a data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The list of distinct descriptions is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.AddRawImageGroup(System.Drawing.Image,System.Int32,System.DateTime,System.DateTime,System.Collections.Generic.List{System.Double})">
            <summary>
            Adds a new RawImage group to the database.
            </summary>
            <param name="img">Specifies an image associated with the group.</param>
            <param name="nIdx">Specifies an index associated with the group.</param>
            <param name="dtStart">Specifies the start time stamp for the group.</param>
            <param name="dtEnd">Specifies the end time stamp for the group.</param>
            <param name="rgProperties">Specifies the properties of the group.</param>
            <returns>The ID of the RawImageGroup is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.PutRawImageGroup(MyCaffe.db.image.RawImageGroup)">
            <summary>
            Adds a RawImageGroup to the database.
            </summary>
            <param name="g">Specifies the group to add.</param>
            <returns>The ID of the RawImageGroup is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.FindRawImageGroup(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Searches for a RawImageGroup by index, start time-stamp and end time-stamp.
            </summary>
            <param name="nIdx">Specifies the index of the raw image group.</param>
            <param name="dtStart">Specifies the start time-stamp of the image group.</param>
            <param name="dtEnd">Specifies the end time-stamp of the image group.</param>
            <returns>If found, the RawImageGroup is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.FindRawImageGroupID(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Searches fro the RawImageGroup ID.
            </summary>
            <param name="nIdx">Specifies the index of the raw image group.</param>
            <param name="dtStart">Specifies the start time-stamp of the image group.</param>
            <param name="dtEnd">Specifies the end time-stamp of the image group.</param>
            <returns>If found, the RawImageGroup ID is returned, otherwise 0 is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.DeleteRawImageGroups">
            <summary>
            Deletes all RawImage groups
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.Database.DeleteSourceData">
            <summary>
            Deletes the data source data for the open data source.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateSaveImagesToFile(System.Boolean,System.Int32)">
            <summary>
            Update the SaveImagesToFile flag in a given Data Source.
            </summary>
            <param name="bSaveToFile">Specifies whether images are saved to the file system (<i>true</i>), or the directly to the database (<i>false</i>).</param>
            <param name="nSrcId">Optionally, specifies a source ID to use.  When 0, this parameter is ignored and the open Source is used instead.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateSource(System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Updates a data source.
            </summary>
            <param name="nChannels">Specifies the number of channels per item.</param>
            <param name="nWidth">Specifies the width of each item.</param>
            <param name="nHeight">Specifies the height of each item.</param>
            <param name="bDataIsReal">Specifies whether or not the item uses real or <i>byte</i> data.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateSourceCounts(System.Int32)">
            <summary>
            Updates the source counts for the open data source.
            </summary>
            <param name="nImageCount">Specifies the new image count.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateSourceCounts">
            <summary>
            Updates the source counts for the open data source by querying the database for the counts.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetSourceID(System.String)">
            <summary>
            Returns the ID of a data source given its name.
            </summary>
            <param name="strName">Specifies the data source name.</param>
            <returns>The ID of the data source is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetSourceName(System.Int32)">
            <summary>
            Returns the name of a data source given its ID.
            </summary>
            <param name="nID">Specifies the ID of the data source.</param>
            <returns>The data source name is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetSource(System.String)">
            <summary>
            Returns the Source entity given a data source name.
            </summary>
            <param name="strName">Specifies the data source name.</param>
            <returns>The Source entity is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetSource(System.Int32)">
            <summary>
            Returns the Source entity given a data source ID.
            </summary>
            <param name="nID">Specifies the ID of the data source.</param>
            <returns>The data source name is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.PutSource(MyCaffe.db.image.Source)">
            <summary>
            Adds or updates (if exists) a data source to the database.
            </summary>
            <param name="src">Specifies the Source entity to add.</param>
            <returns>The ID of the data source added is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.AddSource(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Adds a new data source to the database.
            </summary>
            <param name="strName">Specifies the data source name.</param>
            <param name="nChannels">Specifies the number of channels per item.</param>
            <param name="nWidth">Specifies the width of each item.</param>
            <param name="nHeight">Specifies the height of each item.</param>
            <param name="bDataIsReal">Specifies whether or not the item uses real or <i>byte</i> data.</param>
            <param name="nCopyOfSourceID">Optionally, specifies the ID of the source from which this source was copied.  If this is an original source, this parameter should be 0.</param>
            <param name="bSaveImagesToFile">Optionally, specifies whether or not to save the images to the file system (<i>true</i>) or directly into the database (<i>false</i>)  The default = <i>true</i>.</param>
            <returns>The ID of the data source added is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.DeleteSource(System.Int32)">
            <summary>
            Delete a data source from the database.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.DeleteSources(System.String[])">
            <summary>
            Delete the list of data sources, listed by name, from the database.
            </summary>
            <param name="rgstrSrc">Specifies the list of data sources.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.DeleteSourceData(System.Int32)">
            <summary>
            Delete the data source data (images, means, results and parameters) from the database.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.DeleteSourceData(System.String)">
            <summary>
            Delete the data source data (images, means, results and parameters) from the database.
            </summary>
            <param name="strSrc">Specifies the data source name.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetSourceParameters(System.Int32)">
            <summary>
            Returns a dictionary of the data source parameters.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The dictionary of source parameter values is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetSourceParameter(System.String,System.Int32)">
            <summary>
            Return the data source parameter as a string.
            </summary>
            <param name="strName">Specifies the parameter name.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The parameter value is returned as a string.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetSourceParameter(System.String,System.Int32,System.Int32)">
            <summary>
            Return the data source parameter as an <i>int</i>.
            </summary>
            <param name="strName">Specifies the parameter name.</param>
            <param name="nDefault">Specifies the default value returned if the parameter is not found.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The parameter value is returned as an <i>int</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetSourceParameter(System.String,System.Double,System.Int32)">
            <summary>
            Return the data source parameter as a <i>double</i>.
            </summary>
            <param name="strName">Specifies the parameter name.</param>
            <param name="dfDefault">Specifies the default value returned if the parameter is not found.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The parameter value is returned as a <i>double</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetSourceParameter(System.String,System.Boolean,System.Int32)">
            <summary>
            Return the data source parameter as a <i>bool</i>.
            </summary>
            <param name="strName">Specifies the parameter name.</param>
            <param name="bDefault">Specifies the default value returned if the parameter is not found.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The parameter value is returned as a <i>bool</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.SetSourceParameter(System.String,System.String,System.Int32)">
            <summary>
            Set the value of a data source parameter.
            </summary>
            <param name="strName">Specifies the parameter name.</param>
            <param name="strValue">Specifies the value of the parameter.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetFirstTimeStamp(System.Int32,System.String)">
            <summary>
            Returns the first time-stamp in the data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDesc">Optionally, specifies a description to filter the values with (default = null, no filter).</param>
            <returns>If found, the time-stamp is returned, otherwise, DateTime.MinValue is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetLastTimeStamp(System.Int32,System.String)">
            <summary>
            Returns the last time-stamp in the data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDesc">Optionally, specifies a description to filter the values with (default = null, no filter).</param>
            <returns>If found, the time-stamp is returned, otherwise, DateTime.MinValue is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetLastTimeStamp(System.DateTime,System.DateTime,System.Boolean,System.Int32,System.String)">
            <summary>
            Returns the last time-stamp in the data source.
            </summary>
            <param name="dtStart">Specifies the start of the time range.</param>
            <param name="dtEnd">Specifies the end of the time range.</param>
            <param name="bEndInclusive">Specifies whether or not to include the end time in the range.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDesc">Optionally, specifies a description to filter the values with (default = null, no filter).</param>
            <returns>If found, the time-stamp is returned, otherwise, DateTime.MinValue is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetLastTimeStamp(System.Int32@,System.Int32,System.String)">
            <summary>
            Returns the last time-stamp and index in the data source.
            </summary>
            <param name="nIndex">Returns the index of the last item.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDesc">Optionally, specifies a description to filter the values with (default = null, no filter).</param>
            <returns>If found, the time-stamp is returned, otherwise, DateTime.MinValue is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetLastTimeStamp(System.DateTime,System.DateTime,System.Boolean,System.Int32@,System.Int32,System.String)">
            <summary>
            Returns the last time-stamp and index in the data source falling within a time range.
            </summary>
            <param name="dtStart">Specifies the start of the time range.</param>
            <param name="dtEnd">Specifies the end of the time range.</param>
            <param name="bEndInclusive">Specifies whether or not to include the end time in the range.</param>
            <param name="nIndex">Returns the index of the last item.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDesc">Optionally, specifies a description to filter the values with (default = null, no filter).</param>
            <returns>If found, the time-stamp is returned, otherwise, DateTime.MinValue is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.FindDatasetNameFromSourceName(System.String,System.String)">
            <summary>
            Searches for the data set name based on the training and testing source names.
            </summary>
            <param name="strTrainSrc">Specifies the data source name for training.</param>
            <param name="strTestSrc">Specifies the data source name for testing.</param>
            <returns>If found, the dataset name is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatasetID(System.String)">
            <summary>
            Returns a datasets ID given its name.
            </summary>
            <param name="strName">Specifies the dataset name.</param>
            <returns>The ID of the dataset is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatasetName(System.Int32)">
            <summary>
            Returns the name of a dataset given its ID.
            </summary>
            <param name="nID">Specifies the dataset ID.</param>
            <returns>The dataset name is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDataset(System.Int32)">
            <summary>
            Returns the Dataset entity for a dataset ID.
            </summary>
            <param name="nID">Specifies the dataset ID.</param>
            <returns>The Dataset entity is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDataset(System.String)">
            <summary>
            Returns the Dataset entity for a dataset name.
            </summary>
            <param name="strName">Specifies the dataset name.</param>
            <returns>The Dataset entity is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDataset(System.String,System.String)">
            <summary>
            Returns the Dataset entity containing the training and testing source names.
            </summary>
            <param name="strTestingSrc">Specifies the data source name for testing.</param>
            <param name="strTrainingSrc">Specifies the data source name for training.</param>
            <returns>If found the Dataset entity is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.AddDataset(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a new (or update an existing if exists) dataset to the database.
            </summary>
            <param name="nDsCreatorID">Specifies the ID of the creator.</param>
            <param name="strName">Specifies the name of the dataset.</param>
            <param name="nTestSrcId">Specifies the ID of the testing data source.</param>
            <param name="nTrainSrcId">Specifies the ID of the training data source.</param>
            <param name="nDsGroupID">Optionally, specifies the ID of the dataset group (default = 0).</param>
            <param name="nModelGroupID">Optionally, specifies the ID of the model group (default = 0).</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateDatasetDescription(System.Int32,System.String)">
            <summary>
            Update the description of a given dataset.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset to update.</param>
            <param name="strDesc">Specifies the new description.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateDatasetCounts(System.Int32)">
            <summary>
            Update the dataset counts.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset to update.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.PutDataset(MyCaffe.db.image.Dataset)">
            <summary>
            Save the Dataset entity to the database.
            </summary>
            <param name="ds">Specifies the Dataset entity.</param>
            <returns>The ID of the dataset is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatasetGroup(System.Int32)">
            <summary>
            Returns the DatasetGroup entity given a group ID.
            </summary>
            <param name="nGroupID">Specifies the ID of the group.</param>
            <returns>If found, the DatasetGroup is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatasetGroupName(System.Int32)">
            <summary>
            Returns the name of a dataset group given its ID.
            </summary>
            <param name="nGroupID">Specifies the ID of the group.</param>
            <returns>The dataset group name is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatasetParameters(System.Int32)">
            <summary>
            Returns all dataset parameters for a given dataset.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset.</param>
            <returns>A dictionary of the dataset parameters is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatasetParameter(System.Int32,System.String)">
            <summary>
            Returns the value of a dataset parameter as a string.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset.</param>
            <param name="strName">Specifies the name of the parameter.</param>
            <returns>If the parameter is found it is returned as a string, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatasetParameter(System.Int32,System.String,System.Int32)">
            <summary>
            Returns the value of a dataset parameter as an <i>int</i>.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset.</param>
            <param name="strName">Specifies the name of the parameter.</param>
            <param name="nDefault">Specifies the default value to return if not found.</param>
            <returns>If the parameter is found it is returned as an <i>int</i>, otherwise the default value is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatasetParameter(System.Int32,System.String,System.Double)">
            <summary>
            Returns the value of a dataset parameter as a <i>double</i>.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset.</param>
            <param name="strName">Specifies the name of the parameter.</param>
            <param name="dfDefault">Specifies the default value to return if not found.</param>
            <returns>If the parameter is found it is returned as a <i>double</i>, otherwise the default value is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatasetParameter(System.Int32,System.String,System.Boolean)">
            <summary>
            Returns the value of a dataset parameter as a <i>bool</i>.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset.</param>
            <param name="strName">Specifies the name of the parameter.</param>
            <param name="bDefault">Specifies the default value to return if not found.</param>
            <returns>If the parameter is found it is returned as a <i>bool</i>, otherwise the default value is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.SetDatasetParameter(System.Int32,System.String,System.String)">
            <summary>
            Adds a new parameter or Sets the value of an existing dataset parameter.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset.</param>
            <param name="strName">Specifies the name of the parameter.</param>
            <param name="strValue">Specifies the value of the parameter.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.DeleteDataset(System.String,System.Boolean,MyCaffe.basecode.Log,MyCaffe.basecode.CancelEvent)">
            <summary>
            Delete a dataset.
            </summary>
            <param name="strDsName">Specifies the dataset name.</param>
            <param name="bDeleteRelatedProjects">Specifies whether or not to also delete all projects using the dataset.  <b>WARNING!</b> Use this with caution for it will permenantly delete the projects and their results.</param>
            <param name="log">Specifies the Log object for status output.</param>
            <param name="evtCancel">Specifies the cancel event used to cancel the delete.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetAllDatasets(System.Int32)">
            <summary>
            Returns a list of all datasets within a group.
            </summary>
            <param name="nDatasetGroupID">Specifies the ID of the dataset group.</param>
            <returns>The list of Dataset entities is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetAllDatasetsWithCreators(System.Int32)">
            <summary>
            Returns a list of all datasets within a group with dataset creators.
            </summary>
            <param name="nDatasetGroupID">Specifies the ID of the dataset group.</param>
            <returns>The list of Dataset entities is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetAllDatasetsWithCreator(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Returns a list of all datasets within a group with dataset creators.
            </summary>
            <param name="nDsCreatorID">Specifies the ID of the dataset creator.</param>
            <param name="bRelabeled">Optionally, specifies whether or not only re-labeled datasets should be returned.</param>
            <returns>The list of Dataset entities is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatasetGroupID(System.String)">
            <summary>
            Returns the ID of a dataset group given its name.
            </summary>
            <param name="strName">Specifies the name of the group.</param>
            <returns>Returns the ID of the dataset group, or 0 if not found.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatasetCreatorName(System.Int32)">
            <summary>
            Returns the name of a dataset creator given its ID.
            </summary>
            <param name="nDatasetCreatorID">Specifies the ID of the dataset creator.</param>
            <returns>Returns name of the dataset creator, or <i>null</i> if not found.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatasetCreatorID(System.String)">
            <summary>
            Returns the ID of a dataset creator given its name.
            </summary>
            <param name="strName">Specifies the name of the dataset creator.</param>
            <returns>Returns the ID of the dataset creator, or 0 if not found.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.ResetAllDatasetRelabelWithCreator(System.Int32)">
            <summary>
            Reset all dataset relabel flags with a given creator.
            </summary>
            <param name="nDsCreatorID">Specifies the ID of the dataset creator.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateDatasetRelabel(System.Int32,System.Boolean)">
            <summary>
            Update the dataset relabel flag for a dataset.
            </summary>
            <param name="nDsID">Specifies the ID of the dataset.</param>
            <param name="bRelabel">Specifies the re-label flag.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatasetMinimumTimestamp(System.Int32)">
            <summary>
            Returns the minimum time-stamp for a dataset.
            </summary>
            <param name="nDsID">Specifies the ID of the dataset.</param>
            <returns>IF found, the minimum time-stamp is returned, otherwiseo the DateTime.MinValue is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetDatasetMaximumTimestamp(System.Int32)">
            <summary>
            Returns the maximum time-stamp for a dataset.
            </summary>
            <param name="nDsID">Specifies the ID of the dataset.</param>
            <returns>IF found, the maximum time-stamp is returned, otherwiseo the DateTime.MinValue is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.UpdateDatasetCounts(MyCaffe.basecode.CancelEvent,MyCaffe.basecode.Log,System.Int32,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Updates the dataset counts for a set of datasets.
            </summary>
            <param name="evtCancel">Specifies a cancel event used to abort the process.</param>
            <param name="log">Specifies the Log used for status output.</param>
            <param name="nDatasetCreatorID">Specifies the ID of the dataset creator.</param>
            <param name="rgstrDs">Specifies a list of the dataset names to update.</param>
            <param name="strParamNameForDescription">Specifies the parameter name used for descriptions.</param>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetModelGroup(System.Int32)">
            <summary>
            Returns the ModelGroup entity given the ID of a model group.
            </summary>
            <param name="nGroupID">Specifies the ID of the model group.</param>
            <returns>If found, the ModelGroup entity is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetModelGroupName(System.Int32)">
            <summary>
            Returns the name of a model group given its ID.
            </summary>
            <param name="nGroupID">Specifies the ID of the model group.</param>
            <returns>The model group name is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetModelGroupID(System.String)">
            <summary>
            Retruns the ID of a model group given its name.
            </summary>
            <param name="strGroup">Specifies the name of the model group.</param>
            <returns>The ID of the model group is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.GetAllDatasetsInModelGroup(System.Int32)">
            <summary>
            Returns all Dataset entities within a given model group.
            </summary>
            <param name="nModelGroupId">Specifies the ID of a model group.</param>
            <returns>The list of Dataset entities is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.Database.DeleteModelGroup(System.String,MyCaffe.basecode.Log,MyCaffe.basecode.CancelEvent)">
            <summary>
            Deletes a model group from the database.
            </summary>
            <param name="strGroup">Specifies the name of the group.</param>
            <param name="log">Specifies the Log object for status output.</param>
            <param name="evtCancel">Specifies the cancel event used to cancel the delete.</param>
        </member>
        <member name="T:MyCaffe.db.image.ParameterData">
            <summary>
            The ParameterData class is used to save and retrieve parameter data.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.ParameterData.#ctor(System.String,System.String,System.Nullable{System.Double},System.Byte[],System.Int32,System.Boolean,System.Int32)">
            <summary>
            The ParameterData constructor.
            </summary>
            <param name="strName">Specifies the name of the parameter.</param>
            <param name="strValue">Specifies the value of the parameter.</param>
            <param name="dfVal">Specifies the numeric value of the parameter (default = null).</param>
            <param name="rgData">Specifies the raw data associated with the parameter (default = null).</param>
            <param name="nImageID">Specifies a RawImage ID from which the parameter should be associated (default = 0).</param>
            <param name="bOnlyAddNew">Optionally, specifies to only add new parameters (default = false).</param>
            <param name="nSrcId">Optionally, specifies the source ID of the images (default = 0).</param>
        </member>
        <member name="M:MyCaffe.db.image.ParameterData.#ctor(System.String,System.Int32)">
            <summary>
            The ParameterData constructor.
            </summary>
            <param name="strName">Specifies the name of the parameter.</param>
            <param name="nImageID">Specifies a RawImage ID from which the parameter should be queried.</param>
        </member>
        <member name="P:MyCaffe.db.image.ParameterData.Name">
            <summary>
            Returns the parameter name.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.ParameterData.SourceID">
            <summary>
            Specifies the source ID that the images belong to.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.ParameterData.OnlyAddNew">
            <summary>
            Returns whether or not to only add the parameter if it does not exist.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.ParameterData.Value">
            <summary>
            Returns the parameter value.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.ParameterData.NumericValue">
            <summary>
            Returns the parameter numeric value.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.ParameterData.Data">
            <summary>
            Returns the raw data associated with the parameter.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.ParameterData.ImageID">
            <summary>
            When specified, returns the RawImage ID from which the parameter is to be queried or is associated, otherwise returns 0.
            </summary>
        </member>
        <member name="T:MyCaffe.db.image.DbItem">
            <summary>
            Specifies a database item used when querying boosted items.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DbItem.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DbItem.Clone">
            <summary>
            Create a copy of the DbItem.
            </summary>
            <returns>The copy is returned.</returns>
        </member>
        <member name="P:MyCaffe.db.image.DbItem.Tag">
            <summary>
            Get/set a user defined item.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DbItem.ID">
            <summary>
            Specifies the image ID.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DbItem.id">
            <summary>
            Specifies the image ID used within the lambda statement.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DbItem.Index">
            <summary>
            Specifies the image index.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DbItem.index">
            <summary>
            Specifies the image index used within the lambda statement.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DbItem.Label">
            <summary>
            Specifies the image label.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DbItem.label">
            <summary>
            Specifies the image label used within the lambda statement.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DbItem.Boost">
            <summary>
            Specifies the image boost.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DbItem.boost">
            <summary>
            Specifies the image boost used within the lambda statement.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DbItem.Time">
            <summary>
            Specifies the image time.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DbItem.time">
            <summary>
            Specifies the image time within the lambda statement.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DbItem.Desc">
            <summary>
            Specifies the image description.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DbItem.desc">
            <summary>
            Specifies the image description used within the lambda statement.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DbItem.ToString">
            <summary>
            Returns the string representation of the DbItem.
            </summary>
            <returns>The string representation is returned.</returns>
        </member>
        <member name="T:MyCaffe.db.image.DatabaseInstanceQuery">
            <summary>
            The DatabaseInstanceQuery class is used to find all installed instances of SQL on a given machine.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatabaseInstanceQuery.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatabaseInstanceQuery.GetInstancesAsText">
            <summary>
            Returns a list of the SQL instances as a string.
            </summary>
            <returns>The list of SQL instances is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatabaseInstanceQuery.GetInstances">
            <summary>
            Returns a list of the SQL instances as a list of strings.
            </summary>
            <returns>A list of SQL instance strings is returned.</returns>
        </member>
        <member name="T:MyCaffe.db.image.DatabaseManagement">
            <summary>
            The DatabaseManagement class is used to create the image database.
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.DatabaseManagement.m_bUpdateDatabase">
            <summary>
            Specifies whether or not the database is just being updated or not.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatabaseManagement.#ctor(System.String,System.String,System.String)">
            <summary>
            The DatabaseManagement constructor.
            </summary>
            <param name="strName">Specifies the name of the database (recommended value = "DNN").</param>
            <param name="strPath">Specifies the file path where the database should be created.</param>
            <param name="strInstance">Specifies the instance name to use (recommended value = ".")</param>
        </member>
        <member name="P:MyCaffe.db.image.DatabaseManagement.Name">
            <summary>
            Returns the name of the database.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatabaseManagement.GetConnectionString(System.String)">
            <summary>
            Returns the connection string used to connect to the database named 'strName'.
            </summary>
            <param name="strName">Specifies the database name of the database to connect to.</param>
            <returns>The connection string is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatabaseManagement.DatabaseExists(System.Boolean@)">
            <summary>
            Queries whether or not the database exists.
            </summary>
            <param name="bExists">Returns <i>true</i> if the database exists, <i>false</i> otherwise.</param>
            <returns>Returns <i>null</i> on success, an Exception on error.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatabaseManagement.PurgeDatabase">
            <summary>
            The PurgeDatabase function delete the data from the database.
            </summary>
            <returns>Returns <i>null</i> on success, an Exception on error.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatabaseManagement.CreateDatabase(System.Boolean)">
            <summary>
            The CreateDatabae creates a new instance of the database in Microsoft SQL.
            </summary>
            <param name="bUpdateDatabase">Specifies to update an existing database.</param>
            <returns>Returns <i>null</i> on success, an Exception on error.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatabaseManagement.createTables(System.Data.SqlClient.SqlConnection,System.Boolean,System.Boolean)">
            <summary>
            The createTables function creates the tables of the database.
            </summary>
            <param name="connection">Specifies the SQL connection.</param>
            <param name="bFullCreate">When <i>true</i> the full database is created, otherwise all tables are created except the DatasetCreators table.</param>
            <param name="bUpdateOnly">When <i>true</i> an existing database is being updated.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatabaseManagement.deleteTables(System.Data.SqlClient.SqlConnection)">
            <summary>
            The deleteTables function deletes all tables except for the DatasetCreators table.
            </summary>
            <param name="connection">Specifies the SQL connection.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatabaseManagement.getQueryDatabaseCmd(System.String)">
            <summary>
            Returns the query database command.
            </summary>
            <param name="strName">Specifies the database name.</param>
            <returns>The SQL command is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatabaseManagement.getCreateDatabaseCmd(System.String,System.String)">
            <summary>
            Returns the create database command.
            </summary>
            <param name="strName">Specifies the database name.</param>
            <param name="strPath">Specifies the file path where the database is to be created.</param>
            <returns>The SQL command is returned.</returns>
        </member>
        <member name="T:MyCaffe.db.image.DatasetEx2">
            <summary>
            [V2 Image Database]
            The DatasetEx2 class provides the in-memory dataset functionality that is used by the image database to manage data sets.  
            Both the Testing and Training ImageSet2 objects are managed by the DatasetEx2, which in turn coordinates the loading and usage of each.
            </summary>
        </member>
        <member name="E:MyCaffe.db.image.DatasetEx2.OnCalculateImageMean">
            <summary>
            The OnCalculateImageMean event is passed to each image set and fires each time the Image set need to calcualte its image mean.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.#ctor(System.Guid,MyCaffe.db.image.DatasetFactory,MyCaffe.basecode.CryptoRandom)">
            <summary>
            The DatasetEx constructor.
            </summary>
            <param name="user">Specifies the unique ID of the dataset user.</param>
            <param name="factory">Specifies the DatasetFactory used to manage the database datasets.</param>
            <param name="random">Specifies the random number generator.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.AddUser(System.Guid)">
            <summary>
            Adds a user of the dataset.
            </summary>
            <param name="user">Specifies the unique ID of the dataset user.</param>
            <returns>The number of users is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.RemoveUser(System.Guid)">
            <summary>
            Remove a user of the dataset.
            </summary>
            <param name="user">Specifies the unique ID of the dataset user.</param>
            <returns>The number of users is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.Initialize(MyCaffe.basecode.descriptors.DatasetDescriptor,System.Threading.WaitHandle[],System.Int32,System.Int32,MyCaffe.basecode.Log,MyCaffe.basecode.IMAGEDB_LOAD_METHOD,System.Boolean,System.Int32,System.Int32,System.Double)">
            <summary>
            Initialize the DatasetEx by loading the training and testing data sources into memory.
            </summary>
            <param name="ds">Specifies the dataset to load.</param>
            <param name="rgAbort">Specifies a set of wait handles used to cancel the load.</param>
            <param name="nPadW">Optionally, specifies a pad to apply to the width of each item (default = 0).</param>
            <param name="nPadH">Optionally, specifies a pad to apply to the height of each item (default = 0).</param>
            <param name="log">Optionally, specifies an external Log to output status (default = null).</param>
            <param name="loadMethod">Optionally, specifies the load method to use (default = LOAD_ALL).</param>
            <param name="bSkipMeanCheck">Optionally, specifies to skip the mean check (default = false).</param>
            <param name="nImageDbLoadLimit">Optionally, specifies the load limit (default = 0).</param>
            <param name="nImageDbAutoRefreshScheduledUpdateInMs">Optionally, specifies the scheduled refresh update period in ms (default = 0).</param>
            <param name="dfImageDbAutoRefreshScheduledReplacementPct">Optionally, specifies the scheduled refresh replacement percent (default = 0).</param>
            <returns>Upon loading the dataset a handle to the default QueryState is returned, or 0 on cancel.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.WaitForLoadingToComplete(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Wait for either the training, testing or both data sources to complete loading.
            </summary>
            <param name="bTraining">Specifies to wait for the training data source.</param>
            <param name="bTesting">Specifies to wait for the testing data source.</param>
            <param name="nWait"></param>
            <returns>If aborted, false is returned, otherwise true is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.WaitForRefreshToComplete(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Wait for either the training, testing or both data sources to complete refreshing.
            </summary>
            <param name="bTraining">Specifies to wait for the training data source.</param>
            <param name="bTesting">Specifies to wait for the testing data source.</param>
            <param name="nWait"></param>
            <returns>If aborted, false is returned, otherwise true is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.IsRefreshRunning(System.Boolean,System.Boolean)">
            <summary>
            Returns whether or not the refresh is running on the training and/or testing data source.
            </summary>
            <param name="bTraining">Specifies to check the training data source.</param>
            <param name="bTesting">Specifies to check the testing data source.</param>
            <returns>If the refresh is running, true is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.StartRefresh(System.Boolean,System.Boolean,System.Double)">
            <summary>
            Start an image refresh on the training and/or testing data sources. 
            </summary>
            <remarks>
            Note this method is only valid when initializing with LoadLimit > 0.
            </remarks>
            <param name="bTraining">Optionally, specifies to refresh the training data source (default = true).</param>
            <param name="bTesting">Optionally, specifies to refresh the testing data source (default = true).</param>
            <param name="dfReplacementPct">Optionally, specifies the percentage of the loaded image set to refresh (default = 0.25 for 25%)</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.StopRefresh(System.Boolean,System.Boolean)">
            <summary>
            Stop any refresh operation currently running.
            </summary>
            <param name="bTraining">Optionally, specifies to stop refreshing the training data source (default = true).</param>
            <param name="bTesting">Optionally, specifies to stop refreshing the testing data source (default = true).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.StartAutomaticRefreshSchedule(System.Boolean,System.Boolean,System.Int32,System.Double)">
            <summary>
            Start the automatic refresh schedule on the training and/or testing data sources.
            </summary>
            <param name="bTraining">Optionally, specifies to stop refreshing the training data source (default = true).</param>
            <param name="bTesting">Optionally, specifies to stop refreshing the testing data source (default = true).</param>
            <param name="nPeriodInMs">Specifies the period in milliseconds over which the auto refresh cycle is to run.</param>
            <param name="dfReplacementPct">Specifies the percentage of replacement to use on each cycle.</param>
            <returns>If successfully started, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.StopAutomaticRefreshSchedule(System.Boolean,System.Boolean)">
            <summary>
            Stop the automatic refresh schedule on the training and/or testing data sources.
            </summary>
            <param name="bTraining">Optionally, specifies to stop refreshing the training data source (default = true).</param>
            <param name="bTesting">Optionally, specifies to stop refreshing the testing data source (default = true).</param>
            <returns>If successfully stopped, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.GetAutomaticRefreshSchedule(System.Int32@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            Get the automatic refresh schedule status and its period and replacement percentage.
            </summary>
            <param name="nPeriodInMs">Specifies the period in milliseconds over which the auto refresh cycle is to run.</param>
            <param name="dfReplacementPct">Specifies the percentage of replacement to use on each cycle.</param>
            <param name="nTrainingRefreshCount">Returns the training refrsh count.</param>
            <param name="nTestingRefreshCount">Returns the testing refresh count.</param>
            <returns>If successfully stopped, true is returned, otherwise false.</returns>
        </member>
        <member name="P:MyCaffe.db.image.DatasetEx2.DefaultQueryState">
            <summary>
            Returns the default query state created when first initializing the dataset.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.Dispose(System.Boolean)">
            <summary>
            Releases all resources used.
            </summary>
            <param name="bDisposing">Set to <i>true</i> when called by Dispose().</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.Dispose">
            <summary>
            Releases all resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.CreateQueryState(System.Boolean,System.Boolean,MyCaffe.basecode.IMGDB_SORT)">
            <summary>
            Create a new QueryState on the dataset.
            </summary>
            <param name="bUseUniqueLabelIndexes">Optionally, specifies to use unique label indexes which is slightly slower, but ensures each label is hit per epoch (default = true).</param>
            <param name="bUseUniqueImageIndexes">Optionally, specifies to use unique image indexes which is slightly slower, but ensures each image is hit per epoch (default = true).</param>
            <param name="sort">Optionally, specifies an ordering for the query state (default = NONE).</param>
            <returns>The new query state is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.SetDefaultQueryState(System.Int64)">
            <summary>
            Set the default query state to a new query state.
            </summary>
            <param name="lQueryState">Specifies the query state to set.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> on failure.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.FreeQueryState(System.Int64)">
            <summary>
            Free an existing query state.
            </summary>
            <param name="lHandle">Specifies the handle to the query state to be freed.</param>
            <returns>If found and freed, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.FindQueryState(System.Int64,MyCaffe.db.image.ImageSet2.TYPE)">
            <summary>
            Returns the query state for a given query state handle and type.
            </summary>
            <param name="lQueryState">Specifies the handle to the query state.</param>
            <param name="type">Specifies the query state type to retrieve.</param>
            <returns>The QueryState is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.ReloadIndexing">
            <summary>
            Reload the indexing for both the training and testing data sources.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.Relabel(MyCaffe.basecode.LabelMappingCollection)">
            <summary>
            Relabels both the testing and training image sets using the label mapping collection.
            </summary>
            <param name="col">Specifies the label mapping collection.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.ResetLabels">
            <summary>
            Resets the labels to their original labels.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.ResetAllBoosts">
            <summary>
            Reset all boosts for both the testing and training image sets.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DatasetEx2.UseTrainingImagesForTesting">
            <summary>
            Get/set whether or not to use the training images when testing.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.SaveImageMean(System.Int32,MyCaffe.basecode.SimpleDatum,System.Boolean)">
            <summary>
            Saves the image mean in a SimpleDatum to the database.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source to use.</param>
            <param name="sd">Specifies the image mean data.</param>
            <param name="bUpdate">Specifies whether or not to update the mean image.</param>
            <returns>If saved successfully, this method returns <i>true</i>, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.QueryImageMean(System.Int32)">
            <summary>
            Query the image mean for a data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source to use.</param>
            <returns>The SimpleDatum containing the image mean is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.Unload(System.Boolean)">
            <summary>
            Unload the images of the training and testing image sets.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.GetPercentageLoaded(System.Double@,System.Double@)">
            <summary>
            Returns the total percentage of images loaded for testing, training and combined.
            </summary>
            <param name="dfTraining">Returns the total percentage of training images loaded.</param>
            <param name="dfTesting">Returns the total percentage of testing images loaded.</param>
            <returns>Returns the combined total percentage of images loaded for both testing and training.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.Find(System.Int32)">
            <summary>
            Returns the ImageSet corresponding to a data source ID.
            </summary>
            <param name="nSourceID">Specifies the ID of the data source to use.</param>
            <returns>The ImageSet of images is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx2.Find(System.String)">
            <summary>
            Returns the ImageSet corresponding to a data source name.
            </summary>
            <param name="strSource">Specifies the name of the data source to use.</param>
            <returns>The ImageSet of images is returned.</returns>
        </member>
        <member name="P:MyCaffe.db.image.DatasetEx2.Descriptor">
            <summary>
            Returns the dataset descriptor of the dataset managesd by the DatasetEx object.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DatasetEx2.DatasetID">
            <summary>
            Returns the dataset ID of the dataset managesd by the DatasetEx object.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DatasetEx2.OriginalDatasetID">
            <summary>
            Returns the original DatsetID if this is a cloned re-organized dataset, otherwise 0 is returned.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DatasetEx2.DatasetName">
            <summary>
            Returns the dataset name of the dataset managesd by the DatasetEx object.
            </summary>
        </member>
        <member name="T:MyCaffe.db.image.DatasetExCollection2">
            <summary>
            [V2 Image Database]
            The DatasetExCollection2 contains a list of DatasetEx2 objects.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.#ctor">
            <summary>
            The DatasetExCollection2 constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.RemoveDataset(MyCaffe.db.image.DatasetEx2)">
            <summary>
            Remove the dataset specified.
            </summary>
            <param name="ds">Specifies the dataset to remove.</param>
            <returns>If the dataset is found and removed, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.RemoveUser(System.Guid)">
            <summary>
            Removes a user from the list of users using the DatasetExCollection.
            </summary>
            <param name="user">Specifies the unique user ID.</param>
            <returns>Returns <i>true</i> after all users are released from all datasets, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.SaveImageMean(System.Int32,MyCaffe.basecode.SimpleDatum,System.Boolean)">
            <summary>
            Saves the image mean in a SimpleDatum to the database for a data source.
            </summary>
            <param name="nSrcID">Specifies the ID of the data source.</param>
            <param name="sd">Specifies the image mean data.</param>
            <param name="bUpdate">Specifies whether or not to update the mean image.</param>
            <returns>Returns <i>true</i> after a successful save, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.QueryImageMean(System.Int32)">
            <summary>
            Returns the image mean for a data source.
            </summary>
            <param name="nSrcID">Specifies the ID of the data source.</param>
            <returns>The image mean queried is returned as a SimpleDatum.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.Reset">
            <summary>
            Resets the last image set used to <i>null</i>, thus clearing it.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.ReloadIndexing(System.Int32)">
            <summary>
            Reload the dataset's indexing.
            </summary>
            <param name="nDsId">Specifies the dataset ID.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.ReloadIndexing(System.String)">
            <summary>
            Reload the dataset's indexing.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.Relabel(MyCaffe.basecode.LabelMappingCollection)">
            <summary>
            Relabels all datasets using a label mapping collection.
            </summary>
            <param name="col">Specifies the label mapping collection.</param>
        </member>
        <member name="P:MyCaffe.db.image.DatasetExCollection2.Count">
            <summary>
            Returns the number of datasets in the collection.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.EnableUsingTrainingSourcesForTesting(System.Boolean)">
            <summary>
            Enable/disable the using of the training sources for testing on all datasets.
            </summary>
            <param name="bEnable">Enable/disable the training sources for testing.</param>
        </member>
        <member name="P:MyCaffe.db.image.DatasetExCollection2.UseTrainingSourcesForTesting">
            <summary>
            Returns whether or not the training sources are set to be used for testing.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DatasetExCollection2.Item(System.Int32)">
            <summary>
            Returns the dataset at a given index.
            </summary>
            <param name="nIdx">Specifies the index.</param>
            <returns>The dataset at a the index is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.FindDataset(System.Int32)">
            <summary>
            Searches for the dataset with a dataset ID.
            </summary>
            <param name="nDatasetID">Specifies the dataset ID.</param>
            <returns>If found, the DatasetEx is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.FindDataset(System.String)">
            <summary>
            Searches for the dataset with the dataset name.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <returns>If found, the DatasetEx is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.FindDatasetFromSource(System.Int32)">
            <summary>
            Searches for the dataset containing the given Source ID.
            </summary>
            <param name="nSrcId">Specifies the source ID.</param>
            <returns>If found, the dataset is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.FindImageset(System.Int32)">
            <summary>
            Searches for the ImageSet with a given data source ID.
            </summary>
            <param name="nSourceID">Specifies the ID of the data source.</param>
            <returns>If found, the ImageSet is returned, otherwise an Exception is thrown.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.FindImageset(System.String)">
            <summary>
            Searches for the ImageSet with a given data source name.
            </summary>
            <param name="strSource">Specifies the name of the data source.</param>
            <returns>If found, the ImageSet is returned, otherwise an Exception is thrown.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.WaitForDatasetToLoad(System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Wait for the dataset loading to complete.
            </summary>
            <param name="nDsId">Specifies the dataset ID.</param>
            <param name="bTraining">Specifies to wait for the training data source to load.</param>
            <param name="bTesting">Specifies to wait for the testing data source to load.</param>
            <param name="nWait">Specifies the amount of time to wait in ms. (default = int.MaxValue).</param>
            <returns>If the data source(s) complete loading, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.WaitForDatasetToLoad(System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Wait for the dataset loading to complete.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="bTraining">Specifies to wait for the training data source to load.</param>
            <param name="bTesting">Specifies to wait for the testing data source to load.</param>
            <param name="nWait">Specifies the amount of time to wait in ms. (default = int.MaxValue).</param>
            <returns>If the data source(s) complete loading, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.WaitForDatasetToRefresh(System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Wait for the dataset refreshing to complete.
            </summary>
            <param name="nDsId">Specifies the dataset ID.</param>
            <param name="bTraining">Specifies to wait for the training data source to refresh.</param>
            <param name="bTesting">Specifies to wait for the testing data source to refresh.</param>
            <param name="nWait">Specifies the amount of time to wait in ms. (default = int.MaxValue).</param>
            <returns>If the data source(s) complete refreshing, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.WaitForDatasetToRefresh(System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Wait for the dataset refreshing to complete.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="bTraining">Specifies to wait for the training data source to refresh.</param>
            <param name="bTesting">Specifies to wait for the testing data source to refresh.</param>
            <param name="nWait">Specifies the amount of time to wait in ms. (default = int.MaxValue).</param>
            <returns>If the data source(s) complete refreshing, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.IsRefreshRunning(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns true if the refresh operation running.
            </summary>
            <param name="nDsId">Specifies the dataset ID.</param>
            <param name="bTraining">Specifies to check the training data source for refresh.</param>
            <param name="bTesting">Specifies to check the testing data source for refresh.</param>
            <returns>If the refresh is running, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.IsRefreshRunning(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns true if the refresh operation running.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="bTraining">Specifies to check the training data source for refresh.</param>
            <param name="bTesting">Specifies to check the testing data source for refresh.</param>
            <returns>If the refresh is running, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.StartRefresh(System.String,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Start a refresh on the dataset by replacing a specified percentage of the images with images from the physical database.
            </summary>
            <remarks>
            Note, this method is only valid when initialized with LoadLimit > 0.
            </remarks>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="bTraining">Specifies the training data source to refresh.</param>
            <param name="bTesting">Specifies the testing data source to refresh.</param>
            <param name="dfReplacementPct">Optionally, specifies the replacement percentage to use (default = 0.25 for 25%).</param>
            <returns>On succes, true is returned, otherwise false is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.StopRefresh(System.String,System.Boolean,System.Boolean)">
            <summary>
            Stop a refresh operation running on the dataset.
            </summary>
            <remarks>
            Note, this method is only valid when initialized with LoadLimit > 0.
            </remarks>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="bTraining">Specifies the training data source to strop refreshing.</param>
            <param name="bTesting">Specifies the testing data source to stop refreshing.</param>
            <returns>On succes, true is returned, otherwise false is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.StartRefresh(System.Int32,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Start a refresh on the dataset by replacing a specified percentage of the images with images from the physical database.
            </summary>
            <remarks>
            Note, this method is only valid when initialized with LoadLimit > 0.
            </remarks>
            <param name="nDsID">Specifies the dataset ID.</param>
            <param name="bTraining">Specifies the training data source to refresh.</param>
            <param name="bTesting">Specifies the testing data source to refresh.</param>
            <param name="dfReplacementPct">Optionally, specifies the replacement percentage to use (default = 0.25 for 25%).</param>
            <returns>On succes, true is returned, otherwise false is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.StopRefresh(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Stop a refresh operation running on the dataset.
            </summary>
            <remarks>
            Note, this method is only valid when initialized with LoadLimit > 0.
            </remarks>
            <param name="nDsID">Specifies the dataset ID.</param>
            <param name="bTraining">Specifies the training data source to strop refreshing.</param>
            <param name="bTesting">Specifies the testing data source to stop refreshing.</param>
            <returns>On succes, true is returned, otherwise false is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.StartAutomaticRefreshSchedule(System.String,System.Boolean,System.Boolean,System.Int32,System.Double)">
            <summary>
            Start the automatic refresh cycle to occur on specified period increments.
            </summary>
            <param name="strDs">Specifies the dataset name for which the automatic refresh cycle is to run.</param>
            <param name="bTraining">Specifies to operate on the training data source.</param>
            <param name="bTesting">Specifies to operate on the testing data source.</param>
            <param name="nPeriodInMs">Specifies the period in milliseconds over which the auto refresh cycle is to run.</param>
            <param name="dfReplacementPct">Specifies the percentage of replacement to use on each cycle.</param>
            <returns>If successfully started, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.StopAutomaticRefreshSchedule(System.String,System.Boolean,System.Boolean)">
            <summary>
            Stop the automatic refresh schedule running on a dataset.
            </summary>
            <param name="strDs">Specifies the dataset name for which the automatic refresh cycle is to run.</param>
            <param name="bTraining">Specifies to operate on the training data source.</param>
            <param name="bTesting">Specifies to operate on the testing data source.</param>
            <returns>If successfully stopped, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.GetScheduledAutoRefreshInformation(System.String,System.Int32@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            Returns whether or not a scheduled refresh is running and if so at what period and replacement percent.
            </summary>
            <param name="strDs">Specifies the dataset name for which the automatic refresh cycle is to run.</param>
            <param name="nPeriodInMs">Returns the period in milliseconds over which the auto refresh cycle is run.</param>
            <param name="dfReplacementPct">Returns the percentage of replacement to use on each cycle.</param>
            <param name="nTrainingRefreshCount">Returns the training refrsh count.</param>
            <param name="nTestingRefreshCount">Returns the testing refresh count.</param>
            <returns>If the refresh schedule is running, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.StartAutomaticRefreshSchedule(System.Int32,System.Boolean,System.Boolean,System.Int32,System.Double)">
            <summary>
            Start the automatic refresh cycle to occur on specified period increments.
            </summary>
            <param name="nDsID">Specifies the dataset ID for which the automatic refresh cycle is to run.</param>
            <param name="bTraining">Specifies to operate on the training data source.</param>
            <param name="bTesting">Specifies to operate on the testing data source.</param>
            <param name="nPeriodInMs">Specifies the period in milliseconds over which the auto refresh cycle is to run.</param>
            <param name="dfReplacementPct">Specifies the percentage of replacement to use on each cycle.</param>
            <returns>If successfully started, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.StopAutomaticRefreshSchedule(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Stop the automatic refresh schedule running on a dataset.
            </summary>
            <param name="nDsID">Specifies the dataset ID for which the automatic refresh cycle is to run.</param>
            <param name="bTraining">Specifies to operate on the training data source.</param>
            <param name="bTesting">Specifies to operate on the testing data source.</param>
            <returns>If successfully stopped, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.GetScheduledAutoRefreshInformation(System.Int32,System.Int32@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            Returns whether or not a scheduled refresh is running and if so at what period and replacement percent.
            </summary>
            <param name="nDsID">Specifies the dataset name for which the automatic refresh cycle is to run.</param>
            <param name="nPeriodInMs">Returns the period in milliseconds over which the auto refresh cycle is run.</param>
            <param name="dfReplacementPct">Returns the percentage of replacement to use on each cycle.</param>
            <param name="nTrainingRefreshCount">Returns the training refrsh count.</param>
            <param name="nTestingRefreshCount">Returns the testing refresh count.</param>
            <returns>If the refresh schedule is running, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.CreateQueryState(System.Int32,System.Boolean,System.Boolean,MyCaffe.basecode.IMGDB_SORT)">
            <summary>
            Create a new query state, optionally with a certain sorting.
            </summary>
            <param name="nDsId">Specifies the dataset on which to create the query state.</param>
            <param name="bUseUniqueLabelIndexes">Optionally, specifies to use unique label indexes which is slightly slower, but ensures each label is hit per epoch eually (default = true).</param>
            <param name="bUseUniqueImageIndexes">Optionally, specifies to use unique image indexes which is slightly slower, but ensures each image is hit per epoch (default = true).</param>
            <param name="sort">Specifies the sorting method, if any.</param>
            <returns>The query state is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.CreateQueryState(System.String,System.Boolean,System.Boolean,MyCaffe.basecode.IMGDB_SORT)">
            <summary>
            Create a new query state, optionally with a certain sorting.
            </summary>
            <param name="strDs">Specifies the dataset on which to create the query state.</param>
            <param name="bUseUniqueLabelIndexes">Optionally, specifies to use unique label indexes which is slightly slower, but ensures each label is hit per epoch (default = true).</param>
            <param name="bUseUniqueImageIndexes">Optionally, specifies to use unique image indexes which is slightly slower, but ensures each image is hit per epoch (default = true).</param>
            <param name="sort">Specifies the sorting method, if any.</param>
            <returns>The query state is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.SetDefaultQueryState(System.Int32,System.Int64)">
            <summary>
            Set the default query state to the query state specified for the dataset specified.
            </summary>
            <param name="nDsId">Specifies the dataset ID.</param>
            <param name="lQueryState">Specifies the query state to set.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> on failure.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.SetDefaultQueryState(System.String,System.Int64)">
            <summary>
            Set the default query state to the query state specified for the dataset specified.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="lQueryState">Specifies the query state to set.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> on failure.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.FreeQueryState(System.Int32,System.Int64)">
            <summary>
            Frees a query state from a given dataset.
            </summary>
            <param name="nDsId">Specifies the dataset on which to free the query state.</param>
            <param name="lHandle">Specifies the handle to the query state to free.</param>
            <returns>If found and freed, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.FreeQueryState(System.String,System.Int64)">
            <summary>
            Frees a query state from a given dataset.
            </summary>
            <param name="strDs">Specifies the dataset name on which to free the query state.</param>
            <param name="lHandle">Specifies the handle to the query state to free.</param>
            <returns>If found and freed, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.FindQueryState(System.Int64,System.String)">
            <summary>
            Returns the query state based on the handle and data source where the dataset that owns the data source is first located and the query handle is then used to lookup
            the QueryState for that dataset.
            </summary>
            <param name="lQueryState">Specifies the query state handle.</param>
            <param name="strSource">Specifies the dataset source who's dataset is used.</param>
            <returns>The query state is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.FindQueryState(System.Int64,System.Int32)">
            <summary>
            Returns the query state based on the handle and data source where the dataset that owns the data source is first located and the query handle is then used to lookup
            the QueryState for that dataset.
            </summary>
            <param name="lQueryState">Specifies the query state handle.</param>
            <param name="nSrcId">Specifies the dataset source who's dataset is used.</param>
            <returns>The query state is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.Add(MyCaffe.db.image.DatasetEx2)">
            <summary>
            Adds a DatasetEx to the collection.
            </summary>
            <param name="ds">Specifies the DatasetEx.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the collection.
            </summary>
            <param name="bDisposing">Set to <i>true</i> when called from Dispose().</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.Dispose">
            <summary>
            Releases all resources used by the collection.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.GetEnumerator">
            <summary>
            Returns the enumerator for the collection.
            </summary>
            <returns>The collection's enumerator is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator for the collection.
            </summary>
            <returns>The collection's enumerator is returned.</returns>
        </member>
        <member name="T:MyCaffe.db.image.DatasetFactory">
            <summary>
            The DatasetFactory manages the connection to the Database object.
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.DatasetFactory.m_db">
            <summary>
            Specifies the Database managed.
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.DatasetFactory.m_openSource">
            <summary>
            Specifies the open source descriptor (if any).
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.DatasetFactory.m_nOriginalSourceID">
            <summary>
            Specifies the original source ID (if any).
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.DatasetFactory.m_bLoadDataCriteria">
            <summary>
            Specifies whether or not to load the data criteria data if any exists.  When false, the data criteria data is not loaded from file (default = false).
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.DatasetFactory.m_bLoadDebugData">
            <summary>
            Specifies whether or not to load the debug data if any exists.  When false, the debug data is not loaded from file (default = false).
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.#ctor">
            <summary>
            The DatasetFactory constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.#ctor(System.Boolean,System.Boolean)">
            <summary>
            The DatasetFactory constructor.
            </summary>
            <param name="bLoadDataCriteria">Optionally, specifies to load the data criteria when loading images.</param>
            <param name="bLoadDebugData">Optionally, specifies to load the debug data when loading images.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.#ctor(MyCaffe.db.image.DatasetFactory)">
            <summary>
            The DatasetFactory constructor.
            </summary>
            <param name="factory">Specifies the DatasetFactory to create this one from.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.#ctor(System.Int32)">
            <summary>
            The DatasetFactory constructor.
            </summary>
            <param name="nSrcId">Specifies the data source ID of data source to open within the constructor.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.Dispose">
            <summary>
            Releases all resources used.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DatasetFactory.LastIndex">
            <summary>
            Returns the index of the last image added to the database.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.SetLoadingParameters(System.Boolean,System.Boolean)">
            <summary>
            Sets the loading parameters that are used to determine which data to load with each image.
            </summary>
            <param name="bLoadDataCriteria">Specifies whether or not to load the data criteria data if any exists.  When false, the data criteria data is not loaded from file. (default = true).</param>
            <param name="bLoadDebugData">Specifies whether or not to load the debug data if any exists.  When false, the debug data is not loaded from file. (default = true).</param>
        </member>
        <member name="P:MyCaffe.db.image.DatasetFactory.LoadDataCriteria">
            <summary>
            Returns whether or not the image data criteria is to be loaded when loading each image.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DatasetFactory.LoadDebugData">
            <summary>
            Returns whether or not the image debug data is to be loaded when loading each image.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.ChangeRawImageSourceID(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Change the data source ID on a raw image - currently only allowed on virtual raw images.
            </summary>
            <param name="nID">Specifies the raw image ID.</param>
            <param name="nNewSrcID">Specifies the ID of the new source.</param>
            <param name="bSave">Optionally, specifies whether or not to save the changes (default = true).</param>
            <returns>If the source ID is replaced, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.SaveChanges">
            <summary>
            Save the changes on the open data source.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.Open(MyCaffe.basecode.descriptors.SourceDescriptor,System.Int32)">
            <summary>
            Open a given data source.
            </summary>
            <param name="src">Specifies the data source.</param>
            <param name="nCacheMax">Specifies the maximum cache count to use when adding RawImages (default = 500).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.Open(System.Int32,System.Int32,System.Boolean,MyCaffe.basecode.Log)">
            <summary>
            Open a given data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source to use.</param>
            <param name="nCacheMax">Optionally, specifies the maximum cache count to use when adding RawImages (default = 500).</param>
            <param name="bForceLoadImageFilePath">Optionally, specfies to force load the image file path (default = <i>false</i>) and use file based data.</param>
            <param name="log">Optionally, specifies the output log (default = null).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.Close">
            <summary>
            Close the current data source used.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.Refresh">
            <summary>
            Close and re-open the current data source used.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DatasetFactory.OpenSource">
            <summary>
            Returns the currently open data source.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.PutRawImageParameterCache(System.Int32,System.String,System.String,System.Nullable{System.Double},System.Byte[],System.Boolean)">
            <summary>
            Add a new parameter to the parameter cache making sure to save once a maximum count is reached.
            </summary>
            <param name="nImageID">Specifies the image ID associated with the parameter.</param>
            <param name="strParam">Specifies the parameter name.</param>
            <param name="strVal">Specifies the parameter value.</param>
            <param name="dfVal">Specifies the parameter numeric value.</param>
            <param name="rgData">Specifies the parameter data.</param>
            <param name="bOnlyAddNew">Specifies to only add the parameter if it does not already exist.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.ClearParamCache(System.Boolean)">
            <summary>
            Clear the param cache and save when specified.
            </summary>
            <param name="bSave">Specifies to save the parameter values in the cache before clearing.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.PutRawImageCache(System.Int32,MyCaffe.basecode.SimpleDatum,System.String,MyCaffe.db.image.ParameterData[])">
            <summary>
            Add a SimpleDatum to the RawImage cache.
            </summary>
            <param name="nIdx">Specifies the RawImage index.</param>
            <param name="sd">Specifies the data.</param>
            <param name="strDescription">Optionally, specifies the description (default = null).</param>
            <param name="rgParams">Optionally, specifies a variable number of parameters to add to the RawImage.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.ClearImageCashe(System.Boolean)">
            <summary>
            Clear the RawImage cache and optionally save the images.
            </summary>
            <param name="bSave">When <i>true</i> the images in the cache are saved to the database in a bulk save, otherwise they are just flushed from the cache.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.PutRawImage(System.Int32,MyCaffe.basecode.SimpleDatum,System.String)">
            <summary>
            Save a SimpleDatum to the database.
            </summary>
            <param name="nIdx">Specifies the RawImage index.</param>
            <param name="sd">Specifies the data.</param>
            <param name="strDescription">Optionally, specifies the description (default = null).</param>
            <returns>The ID of the saved RawImage is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.SetRawImageParameter(System.Int32,System.String,System.String,System.Nullable{System.Double},System.Byte[],System.Boolean)">
            <summary>
            Add a new or Set an existing RawImage parameter.
            </summary>
            <param name="nRawImageID">Specifies the ID of the RawImage.</param>
            <param name="strName">Specifies the name of the parameter.</param>
            <param name="strValue">Specifies the value of the parameter.</param>
            <param name="dfVal">Specifies the numeric value of the parameter (default = null).</param>
            <param name="rgData">Optionally, specifies raw data to associate with the RawImage (default = null).</param>
            <param name="bOnlyAddNew">Optionally, specifies to only add the parameter if it doesnt exist (default = false).</param>
            <returns>The ID of the parameter is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.SetRawImageParameterAt(System.DateTime,System.String,System.String,System.Nullable{System.Double},System.Byte[])">
            <summary>
            Set the RawImage parameter for all RawImages with the given time-stamp in the data source.
            </summary>
            <param name="dt">Specifies the time-stamp.</param>
            <param name="strName">Specifies the name of the parameter.</param>
            <param name="strValue">Specifies the value of the parameter as a string.</param>
            <param name="dfVal">Specifies the numeric value of the parameter (default = null).</param>
            <param name="rgData">Optionally, specifies the <i>byte</i> data associated with the parameter (default = null).</param>
            <returns>The ID of the RawImageParameter is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.QueryRawImageParameters(System.Int32,System.String)">
            <summary>
            Query a list of all raw image parameters of a give name stored with a given source ID.
            </summary>
            <param name="nSrcId">Specifies the source ID.</param>
            <param name="strName">Specifies the parameter name.</param>
            <returns>The list of RawImageParameter values is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.QueryRawImageParameters(System.Int32)">
            <summary>
            Query all image parameters for a given image.
            </summary>
            <param name="nImageID">Specifies the image ID who's image parameters are to be queried.</param>
            <returns>The list of any image parameters forund for the image are returned</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetRawImageMean">
            <summary>
            Return the RawImageMean for the open data source.
            </summary>
            <returns>The RawImageMean is returned if found, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetRawImagesAt(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Returns a list of RawImages from the database for a data source.
            </summary>
            <param name="nImageIdx">Specifies the starting image index.</param>
            <param name="nImageCount">Specifies the number of images to retrieve from the starting index <i>nIdx</i>.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDescription">Optionally, specifies a description to filter the images retrieved (when specified, only images matching the filter are returned) (default = null).</param>
            <returns>The list of RawImage items is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetRawImagesAt(System.Collections.Generic.List{System.Int32},System.Threading.ManualResetEvent,System.Int32,System.String)">
            <summary>
            Returns a list of RawImages from the database for a data source.
            </summary>
            <param name="rgImageIdx">Specifies the list of image indexes (no maximum).</param>
            <param name="evtCancel">Specifies the cancel event.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDescription">Optionally, specifies a description to filter the images retrieved (when specified, only images matching the filter are returned) (default = null).</param>
            <returns>The list of RawImage items is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetRawImagesAt(System.Collections.Generic.List{MyCaffe.db.image.DbItem},System.Threading.ManualResetEvent,System.Int32,System.String)">
            <summary>
            Returns a list of RawImages from the database for a data source.
            </summary>
            <param name="rgImgItems">Specifies the list of image DbItems.</param>
            <param name="evtCancel">Specifies the cancel event.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDescription">Optionally, specifies a description to filter the images retrieved (when specified, only images matching the filter are returned) (default = null).</param>
            <returns>The list of RawImage items is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetImagesAt(System.Collections.Generic.List{System.Int32},System.Threading.ManualResetEvent,System.Int32,System.String)">
            <summary>
            Returns a list of SimpleDatum from the database for a data source.
            </summary>
            <param name="rgImageIdx">Specifies the list of image indexes (no maximum).</param>
            <param name="evtCancel">Specifies the cancel event.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDescription">Optionally, specifies a description to filter the images retrieved (when specified, only images matching the filter are returned) (default = null).</param>
            <returns>The list of SimpleDatum items is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetImagesAt(System.Collections.Generic.List{MyCaffe.db.image.DbItem},System.Threading.ManualResetEvent,System.Int32,System.String)">
            <summary>
            Returns a list of SimpleDatum from the database for a data source.
            </summary>
            <param name="rgImageItems">Specifies the list of image DbItems.</param>
            <param name="evtCancel">Specifies the cancel event.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDescription">Optionally, specifies a description to filter the images retrieved (when specified, only images matching the filter are returned) (default = null).</param>
            <returns>The list of SimpleDatum items is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.QueryRawImages(System.Int32,System.Nullable{System.Boolean},System.Boolean,System.Boolean,MyCaffe.basecode.Log,MyCaffe.basecode.CancelEvent,System.Int32,System.Boolean)">
            <summary>
            Returns the list of raw images that have a source ID from a selected list.
            </summary>
            <param name="nSrcId">Specifies the source ID.</param>
            <param name="bActive">Optionally, specifies to query active (or non active) images (default = <i>null</i>, which queries all images).</param>
            <param name="bLoadCriteria">Optionally, specifies to load the data criteria which can take longer (default = <i>false</i>).</param>
            <param name="bLoadDebug">Optionally, specifies to load the debug data which can take longer (default = <i>false</i>).</param>
            <param name="log">Optionally, specifies the output log (default = <i>null</i>).</param>
            <param name="evtCancel">Optionally, specifies the cancel event to abort loading (default = <i>null</i>).</param>
            <param name="nBoostVal">Optionally, specifies a boost value to query (default = 0, which ignores this filter).</param>
            <param name="bExactBoostVal">Optionally, specifies whether or not the boost value is an exact value or to be treated as a value greater than or equal to (default = false).</param>
            <returns>The list of RawImage's is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadRawImageData(MyCaffe.db.image.RawImage,System.Boolean,System.Boolean)">
            <summary>
            Returns the list of raw images that have a source ID from a selected list.
            </summary>
            <param name="img">Specifies the Raw Image.</param>
            <param name="bLoadCriteria">Optionally, specifies to load the data criteria.</param>
            <param name="bLoadDebug">Optionally, specifies to load the debug data.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.PutRawImageMean(MyCaffe.basecode.SimpleDatum,System.Boolean)">
            <summary>
            Save the SimpleDatum as a RawImageMean in the database for the open data source.
            </summary>
            <param name="sd">Specifies the data.</param>
            <param name="bUpdate">Specifies whether or not to update the mean image.</param>
            <returns>The ID of the RawImageMean is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.SaveImageMean(MyCaffe.basecode.SimpleDatum,System.Boolean,System.Int32)">
            <summary>
            Save the SimpleDatum as a RawImageMean in the database.
            </summary>
            <param name="sd">Specifies the data.</param>
            <param name="bUpdate">Specifies whether or not to update the mean image.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The ID of the RawImageMean is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.QueryImageMean(System.Int32)">
            <summary>
            Return the SimpleDatum for the image mean from the open data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The SimpleDatum is returned if found, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.CopyImageMean(System.String,System.String)">
            <summary>
            Copy the raw image mean from one source to another.
            </summary>
            <param name="strSrcSrc">Specifies the Data Source with the source image mean to copy.</param>
            <param name="strDstSrc">Specifies the Data Source with the destination image mean where the source is copied to.</param>
            <returns>On success, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetImageCount">
            <summary>
            Returns the number of images in the database for the open data source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.QueryRawImageIDs(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns all raw image IDs for a given data source.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="nMax">Optionally, specifies the maximum number of ID's to query (default = int.MaxValue).</param>
            <param name="nLabel">Optionally, specifies a label from which images are to be queried (default = -1, which ignores this parameter).</param>
            <param name="nBoost">Optionally, specifies a boost from which images are to be queried (default = -1, which ignores this parameter).</param>
            <param name="bBoostIsExact">Optionally, specifies whether the boost value is exact (<i>true</i>) or the minimum boost where all values equal are greater are retrieved (<i>false</i>).  Default = false.</param>
            <returns>The list of raw image ID's is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetRawImageMeanID(System.Int32)">
            <summary>
            Returns the raw image ID for the image mean associated with a data source.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <returns>The raw image ID is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetRawImageID(System.DateTime,System.Int32)">
            <summary>
            Returns the RawImage ID for the image with the given time-stamp. 
            </summary>
            <param name="dt">Specifies the image time-stamp.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The ID of the RawImage is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetRawImageFromID(System.Int32)">
            <summary>
            Returns the raw image with a specified image ID.
            </summary>
            <param name="nImageID">Specifies the image ID of the image to retrieve.</param>
            <returns>The raw image is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.DeleteRawImageResults(System.Int32)">
            <summary>
            Delete all RawImageResults for a data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.PutRawImageResults(System.Int32,System.Int32,System.Int32,System.DateTime,System.Collections.Generic.List{MyCaffe.basecode.Result},System.Boolean)">
            <summary>
            Save the results of a Run as a RawImageResult.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <param name="nIdx">Specifies the index of the result.</param>
            <param name="nLabel">Specifies the expected label of the result.</param>
            <param name="dt">Specifies the time-stamp of the result.</param>
            <param name="rgResults">Specifies the results of the run as a list of (int nLabel, double dfReult) values.</param>
            <param name="bInvert">Specifies whether or not the results are inverted.</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.AddRawImageGroup(System.Drawing.Image,System.Int32,System.DateTime,System.DateTime,System.Collections.Generic.List{System.Double})">
            <summary>
            Adds a new RawImage group to the database.
            </summary>
            <param name="img">Specifies an image associated with the group.</param>
            <param name="nIdx">Specifies an index associated with the group.</param>
            <param name="dtStart">Specifies the start time stamp for the group.</param>
            <param name="dtEnd">Specifies the end time stamp for the group.</param>
            <param name="rgProperties">Specifies the properties of the group.</param>
            <returns>The ID of the RawImageGroup is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.FindRawImageGroupID(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Searches fro the RawImageGroup ID.
            </summary>
            <param name="nIdx">Specifies the index of the raw image group.</param>
            <param name="dtStart">Specifies the start time-stamp of the image group.</param>
            <param name="dtEnd">Specifies the end time-stamp of the image group.</param>
            <returns>If found, the RawImageGroup ID is returned, otherwise 0 is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetRawImageDistinctParameterDescriptions(System.Int32)">
            <summary>
            Returns a list of distinct RawImage parameter descriptions for a data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The list of distinct descriptions is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetRawImageParameterData(System.Int32,System.String)">
            <summary>
            Return the <i>byte</i> array data of a RawImage parameter.
            </summary>
            <param name="nRawImageID">Specifies the ID of the RawImage.</param>
            <param name="strParam">Specifies the name of the parameter.</param>
            <returns>The parameter <i>byte</i> array data is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetRawImageParameterCount(System.String,System.Int32,System.String)">
            <summary>
            Returns the RawImage parameter count for a data source.
            </summary>
            <param name="strParam">Specifies the parameter name.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strType">Optionally, specifies the parameter type (default = "TEXT").</param>
            <returns>The number of RawImage parameters is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetRawImageParameterExist(System.String,System.Int32,System.String)">
            <summary>
            Returns whether or not a given RawImage parameter exists.
            </summary>
            <param name="strName">Specifies the parameter name.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strType">Optionally, specifies the parameter type (default = "TEXT").</param>
            <returns>Returns <i>true</i> if the parameter exists, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateActiveLabel(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Update the active label on a given raw image.
            </summary>
            <param name="nImageID">Specifies the raw image ID.</param>
            <param name="nNewActiveLabel">Specifies the new active label.</param>
            <param name="bActivate">Optionally, specifies whether or not to activate/deactivate the image.</param>
            <param name="bSaveChanges">Optionally, save the changes if any.</param>
            <returns>If the image is updated this function returns <i>true</i>, otherwise it returns <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateActiveLabelDirect(System.Int32,System.Int32)">
            <summary>
            Directly update the active label and activate the image with the specified ID.
            </summary>
            <param name="nID">Specifies the image ID.</param>
            <param name="nLabel">Specifies the new active label.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateAllActiveLabelsDirect(System.Int32)">
            <summary>
            Directly update all active labels and activate all of the images for the open Source ID.
            </summary>
            <param name="nLabel">Specifies the new active label.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateActiveLabelByIndex(System.Int32,System.Int32)">
            <summary>
            Update the active label on a given raw image by its index.
            </summary>
            <param name="nIdx">Specifies the raw image index.</param>
            <param name="nNewActiveLabel">Specifies the new active label.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.ActivateRawImageByIndex(System.Int32,System.Boolean)">
            <summary>
            Activate/deactivate a raw image based on its index.
            </summary>
            <param name="nIdx">Specifies the raw image index.</param>
            <param name="bActive">Specifies the new active state of the image to set.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateRawImageSourceID(System.Int32,System.Int32)">
            <summary>
            Change the source ID on an image to another source ID.
            </summary>
            <param name="nImageID">Specifies the ID of the image to update.</param>
            <param name="nSrcID">Specifies the new source ID.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.ActivateRawImage(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Activate/Deactivate a given image.
            </summary>
            <param name="nImageID">Specifies the ID of the image to activate/deactivate.</param>
            <param name="bActive">Specifies whether to activate (<i>true</i>) or deactivate (<i>false</i>) the image.</param>
            <param name="bSave">Specifies whether or not to save the changes (when false, calling SaveChanges() is needed).</param>
            <returns>If the active state is changed, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.ActivateAllRawImages(System.Boolean,System.Int32[])">
            <summary>
            Activates all images with the given source ID's.
            </summary>
            <param name="bActive">Specifies whether or not to activate the images.</param>
            <param name="rgSrcId">Specifies the source ID's who's images are to be activated.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.FixupRawImageCopy(System.Int32,System.Int32)">
            <summary>
            The FixupRawImageCopy function is used to fix errors in the copy source ID of a copied
            raw image.  For original images, this function does nothing.
            </summary>
            <remarks>
            When creating a copy of a Data Source that uses both training and testing Data Sources (e.g., 
            re-arranging the time period used for training vs testing), it is important that the 
            OriginalSourceID be set with the Data Source ID that holds the data file.
            </remarks>
            <param name="nImageID">Specifies the ID of the raw image to fixup.</param>
            <param name="nSecondarySrcId">Specifies the secondary Source ID to use if the data file is not found.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetRawImageDataCriteria(System.Byte[],System.Int32)">
            <summary>
            Converts the raw image data criteria data which may be stored as a path to the underlying data file, to the actual data.
            </summary>
            <param name="rgData">Specifies the raw data, which may contain an image path.</param>
            <param name="nOriginalSourceID">Specifies the original source ID that stores the image.</param>
            <returns>The actual raw data is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetRawImageDebugData(System.Byte[],System.Int32)">
            <summary>
            Converts the raw image debug data which may be stored as a path to the underlying data file, to the actual data.
            </summary>
            <param name="rgData">Specifies the raw data, which may contain an image path.</param>
            <param name="nOriginalSourceID">Specifies the original source ID that stores the image.</param>
            <returns>The actual raw data is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetLabelBoosts(System.Int32,System.Int32)">
            <summary>
            Returns a list of all label boosts set on a project.
            </summary>
            <param name="nProjectId">Specifies the ID of a project.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>A list of LabelBoostDescriptors is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.SetLabelMapping(MyCaffe.basecode.LabelMapping,System.Int32)">
            <summary>
            Saves a label mapping in the database for a data source.
            </summary>
            <param name="map">Specifies the label mapping.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateLabelMapping(System.Int32,System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Update a label mapping in the database for a data source.
            </summary>
            <param name="nNewLabel">Specifies the new label.</param>
            <param name="rgOriginalLabels">Specifies the original labels that are to be mapped to the new label.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.ResetLabels(System.Int32,System.Int32)">
            <summary>
            Resets all labels back to their original labels for a project.
            </summary>
            <param name="nProjectId">Optionally, specifies the ID of a project (default = 0).</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.DeleteLabelBoosts(System.Int32,System.Int32)">
            <summary>
            Delete all label boosts for a project.
            </summary>
            <param name="nProjectId">Specifies the ID of a project.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.AddLabelBoost(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Add a label boost to the database for a given project.
            </summary>
            <param name="nProjectId">Specifies the ID of the project for which the label boost is to be added.</param>
            <param name="nLabel">Specifies the label.</param>
            <param name="dfBoost">Specifies the boost.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetLabelBoostsAsText(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the Label boosts as a string.
            </summary>
            <param name="nProjectId">Specifies the ID of a project.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="bSort">Optionally, specifies whether or not to sort the labels by active label (default = true).</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadLabelCounts(System.Int32)">
            <summary>
            Load the label counts from the database for a data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>A dictionary containing (int nLabel, int nCount) pairs is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateLabelCounts(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Updates the label counts in the database for the open data source.
            </summary>
            <param name="rgCounts">Specifies a dictionary containing (int nLabel, int nCount) pairs.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateLabelCounts(System.Int32,System.Int32)">
            <summary>
            Update the label counts for a given data source and project (optionally) by querying the database for the actual counts.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="nProjectId">Optionally, specifies the ID of a project to use (default = 0).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetLabelCountsAsText(System.Int32)">
            <summary>
            Returns the label counts for a given data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>A string containing the label counts is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateLabelName(System.Int32,System.String,System.Int32)">
            <summary>
            Update the name of a label.
            </summary>
            <param name="nLabel">Specifies the label.</param>
            <param name="strName">Specifies the new name.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetLabelName(System.Int32,System.Int32)">
            <summary>
            Get the Label name of a label within a data source.
            </summary>
            <param name="nLabel">Specifies the label.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>When found, the Label is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.AddLabel(System.Int32,System.String,System.Int32)">
            <summary>
            Add a label to the database for a data source.
            </summary>
            <param name="nLabel">Specifies the label.</param>
            <param name="strName">Optionally, specifies a label name (default = "").</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The ID of the added label is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.DeleteLabels(System.Int32)">
            <summary>
            Delete the labels of a data source from the database.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.ActivateLabels(System.Collections.Generic.List{System.Int32},System.Boolean,System.Int32[])">
            <summary>
            Activate (or deactivate) the labels specified for each of the source ID's specified.
            </summary>
            <param name="rgLabels">Specifies the labels.</param>
            <param name="bActive">Specifies whether to activate (<i>true</i>) or deactivate (<i>false</i>) the labels.</param>
            <param name="rgSrcId">Specifies the source ID's who's labels are to be activated.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateLabelBoost(System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32[])">
            <summary>
            Update the label and boost for a given search target criteria.
            </summary>
            <param name="nTgtLbl">Specifies the target label to replace, or null to ignore.</param>
            <param name="bTgtLblExact">When a target label is specified, this parameter specifies whether to treat the target label as an exact value (true) for a minimum value (false).</param>
            <param name="nTgtBst">Specifies the target boost to replace, or null to ignore.</param>
            <param name="bTgtBstExact">When a target boost is specified, this parameter specifies whether to treat the target boost as an exact value (true) for a minimum value (false).</param>
            <param name="nNewLbl">Specifies the new label, or null to ignore.</param>
            <param name="nNewBst">Specifies the new boost, or null to ignore.</param>
            <param name="rgSrcId">Specifies the SourceID's on which to alter the label and/or boost.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetSourceID(System.String)">
            <summary>
            Returns the ID of a data source given its name.
            </summary>
            <param name="strName">Specifies the data source name.</param>
            <returns>The ID of the data source is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetSourceName(System.Int32)">
            <summary>
            Returns the name of a data source given its ID.
            </summary>
            <param name="nId">Specifies the ID of the data source.</param>
            <returns>The data source name is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.AddSource(MyCaffe.basecode.descriptors.SourceDescriptor)">
            <summary>
            Adds a new data source to the database.
            </summary>
            <param name="src">Specifies source desciptor to add.</param>
            <returns>The ID of the data source added is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.AddSource(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Adds a new data source to the database.
            </summary>
            <param name="strName">Specifies the data source name.</param>
            <param name="nChannels">Specifies the number of channels per item.</param>
            <param name="nWidth">Specifies the width of each item.</param>
            <param name="nHeight">Specifies the height of each item.</param>
            <param name="bDataIsReal">Specifies whether or not the item uses real or <i>byte</i> data.</param>
            <param name="nCopyOfSourceID">Optionally, specifies the ID of the source from which this source was copied (and has virtual raw image references).  The default 
            of 0 specifies that this is an original source.</param>
            <param name="bSaveImagesToFile">Optionally, specifies whether or not to save the images to the file system (<i>true</i>) or directly into the database (<i>false</i>).  The default is <i>true</i>.</param>
            <returns>The ID of the data source added is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.DeleteSources(System.String[])">
            <summary>
            Delete the list of data sources, listed by name, from the database.
            </summary>
            <param name="rgstrSrc">Specifies the list of data sources.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.DeleteSourceData(System.Int32)">
            <summary>
            Delete the data source data (images, means, results and parameters) from the database.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetBoostCount(System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Return the number of boosted images for a data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strFilterVal">Optionally, specifies a parameter filtering value (default = <i>null</i>).</param>
            <param name="nBoostVal">Optionally, specifies a boost filtering value (default = <i>null</i>).</param>
            <returns>The number of boosted images is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.ActivateFiltered(System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Activate the images that meet the filtering criteria in the Data Source.  If no filtering criteria is set, all images are activated.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strFilterVal">Optionally, specifies a parameter filtering value (default = <i>null</i>).</param>
            <param name="nBoostVal">Optionally, specifies a boost filtering value (default = <i>null</i>).</param>
            <returns>The number of activated images is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.ReindexRawImages(MyCaffe.basecode.Log,MyCaffe.basecode.CancelEvent,System.Int32,System.Boolean)">
            <summary>
            Reindex the RawImages of a data source.
            </summary>
            <param name="log">Specifies the Log to use for status output.</param>
            <param name="evtCancel">Specifies the cancel event used to cancel the operation.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="bCreateImageMean">Optionally, specifies whether or not to create (or recreate) the image mean (default = false).</param>
            <returns>Upon completion <i>true</i> is returned, otherwise <i>false</i> is returned when cancelled.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateSource(System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Updates a data source.
            </summary>
            <param name="nChannels">Specifies the number of channels per item.</param>
            <param name="nWidth">Specifies the width of each item.</param>
            <param name="nHeight">Specifies the height of each item.</param>
            <param name="bDataIsReal">Specifies whether or not the item uses real or <i>byte</i> data.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateSourceCounts">
            <summary>
            Saves the label cache, updates the label counts from the database and then updates the source counts from the database.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.SetSourceParameter(System.String,System.String,System.Int32)">
            <summary>
            Set the value of a data source parameter.
            </summary>
            <param name="strParam">Specifies the parameter name.</param>
            <param name="strValue">Specifies the value of the parameter.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetSourceParameter(System.String,System.Int32)">
            <summary>
            Return the data source parameter as a string.
            </summary>
            <param name="strParam">Specifies the parameter name.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The parameter value is returned as a string.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetSourceParameter(System.String,System.Int32,System.Int32)">
            <summary>
            Return the data source parameter as an <i>int</i>.
            </summary>
            <param name="strParam">Specifies the parameter name.</param>
            <param name="nDefault">Specifies the default value returned if the parameter is not found.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The parameter value is returned as an <i>int</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetSourceParameter(System.String,System.Boolean,System.Int32)">
            <summary>
            Return the data source parameter as a <i>bool</i>.
            </summary>
            <param name="strParam">Specifies the parameter name.</param>
            <param name="bDefault">Specifies the default value returned if the parameter is not found.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The parameter value is returned as a <i>bool</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetSourceParameter(System.String,System.Double,System.Int32)">
            <summary>
            Return the data source parameter as a <i>double</i>.
            </summary>
            <param name="strParam">Specifies the parameter name.</param>
            <param name="dfDefault">Specifies the default value returned if the parameter is not found.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>The parameter value is returned as a <i>double</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetFirstTimeStamp(System.Int32,System.String)">
            <summary>
            Returns the first time-stamp in the data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDesc">Optionally, specifies a description to filter the values with (default = null, no filter).</param>
            <returns>If found, the time-stamp is returned, otherwise, DateTime.MinValue is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetLastTimeStamp(System.Int32,System.String)">
            <summary>
            Returns the last time-stamp in the data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDesc">Optionally, specifies a description to filter the values with (default = null, no filter).</param>
            <returns>If found, the time-stamp is returned, otherwise, DateTime.MinValue is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetLastTimeStamp(System.DateTime,System.DateTime,System.Boolean,System.Int32,System.String)">
            <summary>
            Returns the last time-stamp in the data source from within a time period.
            </summary>
            <param name="dtStart">Specifies the start of the time range.</param>
            <param name="dtEnd">Specifies the end of the time range.</param>
            <param name="bEndInclusive">Specifies whether or not to include the end time in the range.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDesc">Optionally, specifies a description to filter the values with (default = null, no filter).</param>
            <returns>If found, the time-stamp is returned, otherwise, DateTime.MinValue is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetLastTimeStamp(System.Int32@,System.Int32,System.String)">
            <summary>
            Returns the last time-stamp and index in the data source.
            </summary>
            <param name="nIndex">Specifies the index of the last item.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDesc">Optionally, specifies a description to filter the values with (default = null, no filter).</param>
            <returns>If found, the time-stamp is returned, otherwise, DateTime.MinValue is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetLastTimeStamp(System.DateTime,System.DateTime,System.Boolean,System.Int32@,System.Int32,System.String)">
            <summary>
            Returns the last time stamp within a given time range.
            </summary>
            <param name="dtStart">Specifies the start of the time range.</param>
            <param name="dtEnd">Specifies the end of the time range.</param>
            <param name="bEndInclusive">Specifies whether or not to include the end time in the range.</param>
            <param name="nIndex">Returns the index of the last item.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="strDesc">Optionally, specifies a description to filter the values with (default = null, no filter).</param>
            <returns>If found, the time-stamp is returned, otherwise, DateTime.MinValue is returned.</returns>
        </member>
        <member name="P:MyCaffe.db.image.DatasetFactory.OriginalSourceID">
            <summary>
            Get/set the original source ID (if any).  This field is used when copying a source and using the virutal image reference,
            but retaining the original source ID for the internal image lookup.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetDatasetID(System.String)">
            <summary>
            Returns a datasets ID given its name.
            </summary>
            <param name="strDsName">Specifies the dataset name.</param>
            <returns>The ID of the dataset is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetDatasetName(System.Int32)">
            <summary>
            Returns the name of a dataset given its ID.
            </summary>
            <param name="nId">Specifies the dataset ID.</param>
            <returns>The dataset name is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.AddDataset(MyCaffe.basecode.descriptors.DatasetDescriptor)">
            <summary>
            Adds or updates the training source, testing source, dataset creator and dataset to the database.
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.AddDataset(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a new (or update an existing if exists) dataset to the database.
            </summary>
            <param name="nDsCreatorID">Specifies the ID of the creator.</param>
            <param name="strName">Specifies the name of the dataset.</param>
            <param name="nTestSrcId">Specifies the ID of the testing data source.</param>
            <param name="nTrainSrcId">Specifies the ID of the training data source.</param>
            <param name="nDsGroupID">Optionally, specifies the ID of the dataset group (default = 0).</param>
            <param name="nModelGroupID">Optionally, specifies the ID of the model group (default = 0).</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateDatasetDescription(System.Int32,System.String)">
            <summary>
            Update the description of a given dataset.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset to update.</param>
            <param name="strDesc">Specifies the new description.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateDatasetCounts(System.Int32)">
            <summary>
            Updates the dataset counts, and training/testing source counts.
            </summary>
            <param name="nDsId"></param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateDatasetCounts(MyCaffe.basecode.CancelEvent,MyCaffe.basecode.Log,System.Int32,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Updates the dataset counts for a set of datasets.
            </summary>
            <param name="evtCancel">Specifies a cancel event used to abort the process.</param>
            <param name="log">Specifies the Log used for status output.</param>
            <param name="nDatasetCreatorID">Specifies the ID of the dataset creator.</param>
            <param name="rgstrDs">Specifies a list of the dataset names to update.</param>
            <param name="strParamNameForDescription">Specifies the parameter name used for descriptions.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.FindDatasetNameFromSourceName(System.String,System.String)">
            <summary>
            Searches for the data set name based on the training and testing source names.
            </summary>
            <param name="strTrainSrc">Specifies the data source name for training.</param>
            <param name="strTestSrc">Specifies the data source name for testing.</param>
            <returns>If found, the dataset name is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.ResetAllDatasetRelabelWithCreator(System.Int32)">
            <summary>
            Reset all dataset relabel flags with a given creator.
            </summary>
            <param name="nDsCreatorId">Specifies the ID of the dataset creator.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.UpdateDatasetRelabel(System.Int32,System.Boolean)">
            <summary>
            Update the dataset relabel flag for a dataset.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset.</param>
            <param name="bRelabel">Specifies the re-label flag.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.SetDatasetParameter(System.Int32,System.String,System.String)">
            <summary>
            Adds a new parameter or Sets the value of an existing dataset parameter.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset.</param>
            <param name="strParam">Specifies the name of the parameter.</param>
            <param name="strValue">Specifies the value of the parameter.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetDatasetParameter(System.Int32,System.String)">
            <summary>
            Returns the value of a dataset parameter as a string.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset.</param>
            <param name="strParam">Specifies the name of the parameter.</param>
            <returns>If the parameter is found it is returned as a string, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetDatasetParameter(System.Int32,System.String,System.Int32)">
            <summary>
            Returns the value of a dataset parameter as an <i>int</i>.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset.</param>
            <param name="strParam">Specifies the name of the parameter.</param>
            <param name="nDefault">Specifies the default value to return if not found.</param>
            <returns>If the parameter is found it is returned as an <i>int</i>, otherwise the default value is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetDatasetParameter(System.Int32,System.String,System.Boolean)">
            <summary>
            Returns the value of a dataset parameter as a <i>bool</i>.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset.</param>
            <param name="strParam">Specifies the name of the parameter.</param>
            <param name="bDefault">Specifies the default value to return if not found.</param>
            <returns>If the parameter is found it is returned as a <i>bool</i>, otherwise the default value is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetDatasetParameter(System.Int32,System.String,System.Double)">
            <summary>
            Returns the value of a dataset parameter as a <i>double</i>.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset.</param>
            <param name="strParam">Specifies the name of the parameter.</param>
            <param name="dfDefault">Specifies the default value to return if not found.</param>
            <returns>If the parameter is found it is returned as a <i>double</i>, otherwise the default value is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.GetDatasetGroupID(System.String)">
            <summary>
            Returns the ID of a dataset group given its name.
            </summary>
            <param name="strName">Specifies the name of the group.</param>
            <returns>Returns the ID of the dataset group, or 0 if not found.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadImageIndexes(System.Boolean,System.Boolean)">
            <summary>
            Returns a list of the image indexes of all boosted images in the Data Source.
            </summary>
            <param name="bBoostedOnly">Specifies to only return the indexes of boosted images.</param>
            <param name="bActiveOnly">Optionally, specifies to query active images only (default = true).</param>
            <returns>The list of DbItem's is returned where each DbItem contains the image index, label, and boost.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadImages(MyCaffe.basecode.CancelEvent,System.Int32[])">
            <summary>
            Load the image descriptors for a set of given source ID's.
            </summary>
            <param name="evtCancel">Optionally specifies to cancel the load, when <i>null</i> this parameter is ignored.</param>
            <param name="rgSrcId">Specifies the source ID's to load.</param>
            <returns>A list of image descriptors for each image is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadDatum(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Loads a new SimpleDataum from a RawImage ID.
            </summary>
            <param name="nImageId">Specifies the RawImage ID.</param>
            <param name="nChannels">Specifies the number of channels.</param>
            <param name="bDataIsReal">Specifies whether or not the data contains real or <i>byte</i> data.</param>
            <param name="nLabel">Specifies the label.</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>A new SimpleDatum is returned containing the image.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadDatum(MyCaffe.db.image.RawImage,System.Int32,System.Int32)">
            <summary>
            Loads a new SimpleDatum from a RawImage.
            </summary>
            <param name="img">Specifies the RawImage.</param>
            <param name="nPadW">Optionally, specifies a pad to apply to the width (default = 0).</param>
            <param name="nPadH">Optionally, specifies a pad to apply to the height (default = 0).</param>
            <returns>A new SimpleDatum is returned containing the image.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadDatum(MyCaffe.db.image.RawImageMean,System.Int32,System.Int32)">
            <summary>
            Loads a new image mean from a RawImageMean.
            </summary>
            <param name="img">Specifies the RawImageMean.</param>
            <param name="nPadW">Optionally, specifies a pad to apply to the width (default = 0).</param>
            <param name="nPadH">Optionally, specifies a pad to apply to the height (default = 0).</param>
            <returns>A new SimpleDatum is returned containing the image mean.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadImage(System.Int32,System.Int32)">
            <summary>
            Returns the image at a given image ID.
            </summary>
            <param name="nImageId">Specifies the image ID within the database.</param>
            <param name="nSrcId">Optionally, specifies the expected Source ID.  The default is 0, which specifies to use the open Source ID.</param>
            <returns>The SimpleDatum containing the image is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadImageMean(System.Int32)">
            <summary>
            Returns the image mean for a give data source.
            </summary>
            <param name="nSrcId">Specifies the source data ID.</param>
            <returns>The image mean is returned in a SimpleDatum.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadImageAt(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Int32,System.Int32)">
            <summary>
            Load an image at a given index.
            </summary>
            <param name="nIdx">Specifies the image index.</param>
            <param name="bLoadDataCriteria">Optionally, specifies to load the data criteria data (default = null, which uses the default of false).</param>
            <param name="bLoadDebugData">Optionally, specifies to load the debug data (default = null, which uses the default of false).</param>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="nPadW">Optionally, specifies a pad to apply to the width (default = 0).</param>
            <param name="nPadH">Optionally, specifies a pad to apply to the height (default = 0).</param>
            <returns>A new SimpleDatum is returned containing the image.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadRawData(MyCaffe.basecode.SimpleDatum,System.Boolean,System.Boolean)">
            <summary>
            Load the data criteria and/or debug data.
            </summary>
            <param name="sd">Specifies the SimpleDatum to load.</param>
            <param name="bLoadDataCriteria">Specifies to load the data criteria data (default = false).</param>
            <param name="bLoadDebugData">Specifies to load the debug data (default = false).</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadLabels(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Load a list of LabelDescriptors for a data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <param name="bSort">Specifies whether or not to sort the labels (default = false).</param>
            <param name="bWithImagesOnly">Specifies whether or not to only load labels with images associated with them (default = false).</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadSource(System.String)">
            <summary>
            Load the source descriptor from a data source name.
            </summary>
            <param name="strSource">Specifies the Id of the data source.</param>
            <returns>The SourceDescriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadSource(System.Int32)">
            <summary>
            Load the source descriptor from a data source ID.
            </summary>
            <param name="nSrcId">Specifies the name of the data source.</param>
            <returns>The SourceDescriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadSourceParameters(System.Int32)">
            <summary>
            Loads the data source parameters for a given source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>The collection of data source parameters is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadDatasetGroup(System.Int32)">
            <summary>
            Load a dataset group descriptor from a group ID.
            </summary>
            <param name="nGroupId">Specifies the ID of the group.</param>
            <returns>The GroupDescriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadModelGroup(System.Int32)">
            <summary>
            Load a model group descriptor from a group ID.
            </summary>
            <param name="nGroupId">Specifies the ID of the group.</param>
            <returns>The GroupDescriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadDataset(System.String)">
            <summary>
            Load a dataset descriptor from a dataset name.
            </summary>
            <param name="strDataset">Specifies the dataset name.</param>
            <returns>The DatasetDescriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadDataset(System.Int32)">
            <summary>
            Load a dataset descriptor from a dataset ID.
            </summary>
            <param name="nDatasetID">Specifies the dataset ID.</param>
            <returns>The DatasetDescriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadDataset(System.Int32,System.String)">
            <summary>
            Load a dataset descriptor from a dataset ID or name, where the ID is tried first and name second.
            </summary>
            <param name="nDatasetID">Specifies the dataset ID.</param>
            <param name="strDataset">Specifies the dataset name.</param>
            <returns>The DatasetDescriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadDataset(System.String,System.String)">
            <summary>
            Load the dataset descriptor that contains the testing and training data source names.
            </summary>
            <param name="strTestingSrc">Specifies the testing data source name.</param>
            <param name="strTrainingSrc">Specifies the training data source name.</param>
            <returns>The DatasetDescriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadAllDatasetsWithCreators(System.Int32)">
            <summary>
            Loads all dataset descriptors within a group that have a creator.
            </summary>
            <param name="nGroupId">Specifies the ID of the dataset group.</param>
            <returns>A list of DatasetDescriptors is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadAllDatasetsWithCreator(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Loads all dataset descriptors with a given dataset creator.
            </summary>
            <param name="nCreatorID">Specifies the ID of the dataset creator.</param>
            <param name="bRelabeled">Optionally, specifies whether or not only re-labeled datasets should be returned.</param>
            <returns>A list of DatasetDescriptors is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.loadDataset(MyCaffe.db.image.Dataset)">
            <summary>
            Loads a dataset creator from a Dataset entity.
            </summary>
            <param name="ds">Specifies the Dataset entity.</param>
            <returns>The DatasetDescriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadDatasetParameters(System.Int32)">
            <summary>
            Loads the dataset parameters for a given dataset.
            </summary>
            <param name="nDsId">Specifies the ID of the dataset.</param>
            <returns>The collection of dataset parameters is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetFactory.LoadRawImageResults(System.Int32)">
            <summary>
            Loads a list of RawImage results for a data source.
            </summary>
            <param name="nSrcId">Optionally, specifies the ID of the data source (default = 0, which then uses the open data source ID).</param>
            <returns>A list of the ResultDescriptors is returned.</returns>
        </member>
        <member name="T:MyCaffe.db.image.LabelBoostDescriptor">
            <summary>
            The LabelBoostDescriptor class describes a label boost.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.LabelBoostDescriptor.#ctor(System.Int32,System.Double)">
            <summary>
            The LabelBoostDescriptor constructor.
            </summary>
            <param name="nLabel">Specifies the label.</param>
            <param name="dfBoost">Specifies the boost.</param>
        </member>
        <member name="P:MyCaffe.db.image.LabelBoostDescriptor.Label">
            <summary>
            Returns the label.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.LabelBoostDescriptor.Boost">
            <summary>
            Returns the boost.
            </summary>
        </member>
        <member name="T:MyCaffe.db.image.DNNEntities">
            <summary>
            The DNNEntities class defines the entities used to connecto the database via Entity Frameworks.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DNNEntities.#ctor(System.String)">
            <summary>
            The DNNEntities constructor.
            </summary>
            <param name="strConnectionString">Specifies the connection string.</param>
        </member>
        <member name="T:MyCaffe.db.image.EntitiesConnection">
            <summary>
            The EntitiesConnection class defines how to connect to the database via Entity Frameworks.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.EntitiesConnection.#ctor">
            <summary>
            The EntitiesConnection constructor.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.EntitiesConnection.GlobalDatabaseServerName">
            <summary>
            Get/set the global database server name.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.EntitiesConnection.CreateConnectionString(System.String,System.String)">
            <summary>
            Creates the connection string used.
            </summary>
            <param name="strDb">Specifies the database name (default = "DNN")</param>
            <param name="strServerName">Specifies the server instance (default = ".")</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.EntitiesConnection.CreateEntities(System.String)">
            <summary>
            Returns the DNNEntities to use.
            </summary>
            <param name="strDb">Specifies the database name (default = "DNN")</param>
            <returns></returns>
        </member>
        <member name="T:MyCaffe.db.image.ImageSetBase">
            <summary>
            The ImageSetBase class contains the list of image for a data source as well as a list of LabelSets that map into it.
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.ImageSetBase.m_factory">
            <summary>
            Specifies the DatasetFactory used to work with the underlying database.
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.ImageSetBase.m_src">
            <summary>
            Specifies the data source used with this Image Set.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.ImageSetBase.#ctor(MyCaffe.db.image.DatasetFactory,MyCaffe.basecode.descriptors.SourceDescriptor)">
            <summary>
            The ImageSet constructor.
            </summary>
            <param name="factory">Specifies the DatasetFactory.</param>
            <param name="src">Specifies the data source.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSetBase.Dispose(System.Boolean)">
            <summary>
            Releases the resouces used.
            </summary>
            <param name="bDisposing">Set to <i>true</i> when called by Dispose()</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSetBase.Dispose">
            <summary>
            Releases the resouces used.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.ImageSetBase.Source">
            <summary>
            Returns the data source of the image set.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.ImageSetBase.SetLabelMapping(MyCaffe.basecode.LabelMapping)">
            <summary>
            Set the label mapping of the ImageSet.
            </summary>
            <param name="map">Specifies the label map.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSetBase.UpdateLabelMapping(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Update the label mapping on the ImageSet.
            </summary>
            <param name="nNewLabel">Specifies the new label.</param>
            <param name="rgOriginalLabels">Specifies the labels to be mapped to the new label.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSetBase.ResetLabels(System.Int32)">
            <summary>
            Resets the labels for a project.
            </summary>
            <param name="nProjectId">Specifies the ID of the project.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSetBase.DeleteLabelBoosts(System.Int32)">
            <summary>
            Deletes the label boosts for a project.
            </summary>
            <param name="nProjectId">Specifies the ID of the project.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSetBase.AddLabelBoost(System.Int32,System.Int32,System.Double)">
            <summary>
            Adds a label boost for a project.
            </summary>
            <param name="nProjectId">Specifies the ID of the project.</param>
            <param name="nLabel">Specifies the label.</param>
            <param name="dfBoost">Specifies the label boost.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSetBase.GetLabelBoostsAsText(System.Int32)">
            <summary>
            Returns the label boosts as text.
            </summary>
            <param name="nProjectId">Specifies the ID of the project.</param>
            <returns>The label boosts are returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSetBase.LoadLabelCounts">
            <summary>
            Returns the label counts as a dictionary of item pairs (int nLabel, int nCount).
            </summary>
            <returns>The label counts are returned as item pairs (int nLabel, int nCount).</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSetBase.UpdateLabelCounts(System.Int32)">
            <summary>
            Updates the label counts for a project.
            </summary>
            <param name="nProjectId">Specifies the ID of the project.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSetBase.GetLabelCountsAsText">
            <summary>
            Returns the label counts for the ImageList as text.
            </summary>
            <returns>The label counts are retuned.</returns>
        </member>
        <member name="T:MyCaffe.db.image.ImageSet">
            <summary>
            The ImageSet class contains the list of image for a data source as well as a list of LabelSets that map into it.
            </summary>
        </member>
        <member name="E:MyCaffe.db.image.ImageSet.OnCalculateImageMean">
            <summary>
            The OnCalculateImageMean event fires when the ImageSet needs to calculate the image mean for the image set.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.#ctor(MyCaffe.db.image.DatasetFactory,MyCaffe.basecode.descriptors.SourceDescriptor,MyCaffe.basecode.IMAGEDB_LOAD_METHOD,System.Int32,MyCaffe.basecode.CryptoRandom)">
            <summary>
            The ImageSet constructor.
            </summary>
            <param name="factory">Specifies the DatasetFactory.</param>
            <param name="src">Specifies the data source.</param>
            <param name="loadMethod">Specifies the method to use when loading the images.</param>
            <param name="nLoadLimit">Specifies the image load limit.</param>
            <param name="random">Specifies the random number generator.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.#ctor">
            <summary>
            The Imageset constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.Dispose(System.Boolean)">
            <summary>
            Releases the resouces used.
            </summary>
            <param name="bDisposing">Set to <i>true</i> when called by Dispose()</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.Dispose">
            <summary>
            Releases the resouces used.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetQueryLabelCounts">
            <summary>
            Retrieves the label counts.
            </summary>
            <returns>The label counts is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.SetQueryLabelCount(System.Int32,System.Int32)">
            <summary>
            Increase the query label count for a specific label.
            </summary>
            <param name="nLabel">Specifies the label who's query count is to be increased.</param>
            <param name="nBoost">Specifies the boost of the image, or 0 if not boosted.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetQueryBoostHitPrecentsAsText">
            <summary>
            Get the queried boost hit percents as a string.
            </summary>
            <returns>The queried boost hit percent is returned as a string where each % represents the percentage of the queried made for boosted images.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetQueryLabelHitPrecentsAsText">
            <summary>
            Get the queried label hit percents as a string.
            </summary>
            <returns>The queried label hit percent is returned as a string where each % represents the percentage of the queried made for that label.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetQueryLabelEpocsAsText">
            <summary>
            Get the queried label epoc per label as a text string.
            </summary>
            <returns>The label epoc per label is returned as a string.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetLabels">
            <summary>
            Returns a list of label descriptors used by the image set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetLabelName(System.Int32)">
            <summary>
            Returns the label name of a label.
            </summary>
            <param name="nLabel">Specifies the label.</param>
            <returns>Returns the string name of the label.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.Relabel(MyCaffe.basecode.LabelMappingCollection)">
            <summary>
            Applies the label mapping to the image set.
            </summary>
            <param name="col"></param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.Clone">
            <summary>
            Returns a copy of the ImageSet.
            </summary>
            <returns>The ImageSet copy is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.FindImageIndex(System.DateTime,System.String)">
            <summary>
            Searches for an image index based on its time-stamp and description.
            </summary>
            <param name="dt">Specifies the time-stamp.</param>
            <param name="strDesc">Specifies the description.</param>
            <returns>If found the image index is returned, otherwise -1 is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.Reset">
            <summary>
            Resets the indexes and limited loaded images (if used).
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.Add(System.Int32,MyCaffe.basecode.SimpleDatum)">
            <summary>
            Adds a new image to the image set.
            </summary>
            <param name="nIdx">Specifies the index on where to add the image.</param>
            <param name="d">Specifies the image data.</param>
            <returns>If added successfully within the load limit, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.ReloadLabelSets">
            <summary>
            Reload the label sets.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.CompleteLoad(System.Int32)">
            <summary>
            Complete the image loading process.
            </summary>
            <param name="nLastImageIdx">Specifies the last image index loaded.</param>
        </member>
        <member name="P:MyCaffe.db.image.ImageSet.Source">
            <summary>
            Returns the data source of the image set.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.ImageSet.SourceID">
            <summary>
            Returns the data source ID of the image set.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.ImageSet.SourceName">
            <summary>
            Returns the data source name of the image set.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.ImageSet.IsRealData">
            <summary>
            Returns whether or not the image set contains real or <i>byte</i> based data.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.ImageSet.Count">
            <summary>
            Returns the number of images in the image set.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.ImageSet.Images">
            <summary>
            Get the array of images.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetCount(System.Boolean,System.String,System.Nullable{System.Int32})">
            <summary>
            Returns the number of images in the image set, optionally with super-boost only.
            </summary>
            <param name="bSuperboostOnly">Specifies whether or not to only count images with super-boost.</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <returns>The number of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetImages(System.Boolean,System.String,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="bSuperboostOnly">Specifies whether or not to return images with super-boost.</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nStartIdx">Optionally, specifies a starting index from which the query is to start within the set of images (default = 0).</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetImages(System.Boolean,System.String,System.Nullable{System.Int32},System.Int32[])">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="bSuperboostOnly">Specifies whether or not to return images with super-boost.</param>
            <param name="strFilterVal">specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="rgIdx">Specifies a set of indexes to search for where the images returned must have an index greater than or equal to the individual index.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetImage(System.Int32,MyCaffe.basecode.IMGDB_LABEL_SELECTION_METHOD,MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD,MyCaffe.basecode.Log,System.Boolean,System.Boolean)">
            <summary>
            Returns the image based on its label and image selection method.
            </summary>
            <param name="nIdx">Specifies the image index to use when loading sequentially.</param>
            <param name="labelSelectionMethod">Specifies the label selection method.</param>
            <param name="imageSelectionMethod">Specifies the image selection method.</param>
            <param name="log">Specifies the Log for status output.</param>
            <param name="bLoadDataCriteria">Specifies to load the data criteria data (default = false).</param>
            <param name="bLoadDebugData">Specifies to load the debug data (default = false).</param>
            <returns>The SimpleDatum containing the image is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetImage(System.Int32)">
            <summary>
            Returns the SimpleDatum of the image at a given ID.
            </summary>
            <param name="nImageID">Specifies the Raw Image ID to get.</param>
            <returns>The SimpleDatum of the image is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetLabelSet(System.Int32)">
            <summary>
            Retuns the LabelSet corresponding to a label.
            </summary>
            <param name="nLabel">Specifies the label.</param>
            <returns>The LabelSet is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.SetImageMean(MyCaffe.basecode.SimpleDatum)">
            <summary>
            Set the image mean on for the ImageSet.
            </summary>
            <param name="d">Specifies the image mean.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetImageMean(MyCaffe.basecode.Log,System.Threading.WaitHandle[])">
            <summary>
            Returns the image mean for the ImageSet.
            </summary>
            <param name="log">Specifies the Log used to output status.</param>
            <param name="rgAbort">Specifies a set of wait handles for aborting the operation.</param>
            <returns>The SimpleDatum with the image mean is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.UpdateLabelBoosts(System.Int32)">
            <summary>
            Update the label boosts for a project.
            </summary>
            <param name="nProjectId">Specifies the ID of the project.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.SetLabelMapping(MyCaffe.basecode.LabelMapping)">
            <summary>
            Set the label mapping of the ImageSet.
            </summary>
            <param name="map">Specifies the label map.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.UpdateLabelMapping(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Update the label mapping on the ImageSet.
            </summary>
            <param name="nNewLabel">Specifies the new label.</param>
            <param name="rgOriginalLabels">Specifies the labels to be mapped to the new label.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.ResetLabels(System.Int32)">
            <summary>
            Resets the labels for a project.
            </summary>
            <param name="nProjectId">Specifies the ID of the project.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.DeleteLabelBoosts(System.Int32)">
            <summary>
            Deletes the label boosts for a project.
            </summary>
            <param name="nProjectId">Specifies the ID of the project.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.AddLabelBoost(System.Int32,System.Int32,System.Double)">
            <summary>
            Adds a label boost for a project.
            </summary>
            <param name="nProjectId">Specifies the ID of the project.</param>
            <param name="nLabel">Specifies the label.</param>
            <param name="dfBoost">Specifies the label boost.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetLabelBoostsAsText(System.Int32)">
            <summary>
            Returns the label boosts as text.
            </summary>
            <param name="nProjectId">Specifies the ID of the project.</param>
            <returns>The label boosts are returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.LoadLabelCounts">
            <summary>
            Returns the label counts as a dictionary of item pairs (int nLabel, int nCount).
            </summary>
            <returns>The label counts are returned as item pairs (int nLabel, int nCount).</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.UpdateLabelCounts(System.Int32)">
            <summary>
            Updates the label counts for a project.
            </summary>
            <param name="nProjectId">Specifies the ID of the project.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetLabelCountsAsText">
            <summary>
            Returns the label counts for the ImageList as text.
            </summary>
            <returns>The label counts are retuned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.Unload">
            <summary>
            Unload all images in the image set.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetLoadedCount">
            <summary>
            Returns the number of images loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetTotalCount">
            <summary>
            Returns the total number of images.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.ResetAllBoosts">
            <summary>
            Resets all image boosts to the original boost loaded from the physical database.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.GetImages(System.DateTime,System.Int32,System.String)">
            <summary>
            Get a set of images, listed in chronological order starting at the next date greater than or equal to 'dt'.
            </summary>
            <param name="dt">Specifies the start date of the images sought.</param>
            <param name="nImageCount">Specifies the number of images to retrieve.</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <returns>The list of SimpleDatum is returned.</returns>
            <remarks> IMPORTANT: You must call Sort(ByDesc|ByDate) before using this function to ensure all loaded images are ordered by their descriptions then by their time.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet.Sort(MyCaffe.basecode.IMGDB_SORT)">
            <summary>
            Sort the internal images.
            </summary>
            <param name="method">Specifies the sorting method.</param>
            <returns>If the sorting is successful, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
            <remarks>NOTE: Sorting only applies to the images currently loaded.</remarks>
        </member>
        <member name="T:MyCaffe.db.image.DatasetEx">
            <summary>
            The DatasetEx class provides the in-memory dataset functionality that is used by the image database to manage data sets.  
            Both the Testing and Training ImageSet objects are managed by the DatasetEx, which in turn coordinates the loading and usage of each.
            </summary>
        </member>
        <member name="E:MyCaffe.db.image.DatasetEx.OnCalculateImageMean">
            <summary>
            The OnCalculateImageMean event is passed to each image set and fires each time the Image set need to calcualte its image mean.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.#ctor(System.Guid,MyCaffe.db.image.DatasetFactory,MyCaffe.basecode.CryptoRandom)">
            <summary>
            The DatasetEx constructor.
            </summary>
            <param name="user">Specifies the unique ID of the dataset user.</param>
            <param name="factory">Specifies the DatasetFactory used to manage the database datasets.</param>
            <param name="random">Specifies the random number generator.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.Reset">
            <summary>
            Reset the image indexes for both the training and testing image sets.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.AddUser(System.Guid)">
            <summary>
            Adds a user of the dataset.
            </summary>
            <param name="user">Specifies the unique ID of the dataset user.</param>
            <returns>The number of users is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.RemoveUser(System.Guid)">
            <summary>
            Remove a user of the dataset.
            </summary>
            <param name="user">Specifies the unique ID of the dataset user.</param>
            <returns>The number of users is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.Initialize(MyCaffe.basecode.descriptors.DatasetDescriptor,System.Threading.WaitHandle[],System.Int32,System.Int32,MyCaffe.basecode.Log,MyCaffe.basecode.IMAGEDB_LOAD_METHOD,System.Int32,System.Boolean)">
            <summary>
            Initialize the DatasetEx by loading the training and testing data sources into memory.
            </summary>
            <param name="ds">Specifies the dataset to load.</param>
            <param name="rgAbort">Specifies a set of wait handles used to cancel the load.</param>
            <param name="nPadW">Optionally, specifies a pad to apply to the width of each item (default = 0).</param>
            <param name="nPadH">Optionally, specifies a pad to apply to the height of each item (default = 0).</param>
            <param name="log">Optionally, specifies an external Log to output status (default = null).</param>
            <param name="loadMethod">Optionally, specifies the load method to use (default = LOAD_ALL).</param>
            <param name="nImageDbLoadLimit">Optionally, specifies the load limit (default = 0).</param>
            <param name="bSkipMeanCheck">Optionally, specifies to skip the mean check (default = false).</param>
            <returns>Upon loading the dataset <i>true</i> is returned, otherwise on failure or abort <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.Clone(System.Boolean)">
            <summary>
            Copy the DatasetEx and its contents.
            </summary>
            <param name="bReOrganizeByTime">Optionally, specifies to re-organize the training and testing sources so that they are both organized chronologically.</param>
            <returns>The new DatasetEx is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.Relabel(MyCaffe.basecode.LabelMappingCollection)">
            <summary>
            Relabels both the testing and training image sets using the label mapping collection.
            </summary>
            <param name="col">Specifies the label mapping collection.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.ReloadLabelSets">
            <summary>
            Reloads bot the training and testing label sets.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DatasetEx.UseTrainingImagesForTesting">
            <summary>
            Get/set whether or not to use the training images when testing.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.SaveImageMean(System.Int32,MyCaffe.basecode.SimpleDatum,System.Boolean)">
            <summary>
            Saves the image mean in a SimpleDatum to the database.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source to use.</param>
            <param name="sd">Specifies the image mean data.</param>
            <param name="bUpdate">Specifies whether or not to update the mean image.</param>
            <returns>If saved successfully, this method returns <i>true</i>, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.QueryImageMean(System.Int32)">
            <summary>
            Query the image mean for a data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source to use.</param>
            <returns>The SimpleDatum containing the image mean is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.Unload">
            <summary>
            Unload the images of the training and testing image sets.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.GetPercentageLoaded(System.Double@,System.Double@)">
            <summary>
            Returns the total percentage of images loaded for testing, training and combined.
            </summary>
            <param name="dfTraining">Returns the total percentage of training images loaded.</param>
            <param name="dfTesting">Returns the total percentage of testing images loaded.</param>
            <returns>Returns the combined total percentage of images loaded for both testing and training.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.Dispose(System.Boolean)">
            <summary>
            Releases all resources used.
            </summary>
            <param name="bDisposing">Set to <i>true</i> when called by Dispose().</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.Dispose">
            <summary>
            Releases all resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.Find(System.Int32)">
            <summary>
            Returns the ImageSet corresponding to a data source ID.
            </summary>
            <param name="nSourceID">Specifies the ID of the data source to use.</param>
            <returns>The ImageSet of images is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetEx.Find(System.String)">
            <summary>
            Returns the ImageSet corresponding to a data source name.
            </summary>
            <param name="strSource">Specifies the name of the data source to use.</param>
            <returns>The ImageSet of images is returned.</returns>
        </member>
        <member name="P:MyCaffe.db.image.DatasetEx.Descriptor">
            <summary>
            Returns the dataset descriptor of the dataset managesd by the DatasetEx object.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DatasetEx.DatasetID">
            <summary>
            Returns the dataset ID of the dataset managesd by the DatasetEx object.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DatasetEx.OriginalDatasetID">
            <summary>
            Returns the original DatsetID if this is a cloned re-organized dataset, otherwise 0 is returned.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DatasetEx.DatasetName">
            <summary>
            Returns the dataset name of the dataset managesd by the DatasetEx object.
            </summary>
        </member>
        <member name="T:MyCaffe.db.image.DatasetExCollection">
            <summary>
            The DatasetExCollection contains a list of DatasetEx objects.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.#ctor">
            <summary>
            The DatasetExCollection constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.RemoveDataset(MyCaffe.db.image.DatasetEx)">
            <summary>
            Remove the dataset specified.
            </summary>
            <param name="ds">Specifies the dataset to remove.</param>
            <returns>If the dataset is found and removed, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.RemoveCreatedDatasets">
            <summary>
            Remove all dynamically created datasets.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.RemoveUser(System.Guid)">
            <summary>
            Removes a user from the list of users using the DatasetExCollection.
            </summary>
            <param name="user">Specifies the unique user ID.</param>
            <returns>Returns <i>true</i> after all users are released from all datasets, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.SaveImageMean(System.Int32,MyCaffe.basecode.SimpleDatum,System.Boolean)">
            <summary>
            Saves the image mean in a SimpleDatum to the database for a data source.
            </summary>
            <param name="nSrcID">Specifies the ID of the data source.</param>
            <param name="sd">Specifies the image mean data.</param>
            <param name="bUpdate">Specifies whether or not to update the mean image.</param>
            <returns>Returns <i>true</i> after a successful save, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.QueryImageMean(System.Int32)">
            <summary>
            Returns the image mean for a data source.
            </summary>
            <param name="nSrcID">Specifies the ID of the data source.</param>
            <returns>The image mean queried is returned as a SimpleDatum.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.Clone">
            <summary>
            Creates a copy of the entire DatasetExCollection.
            </summary>
            <returns>The new DatasetExCollection is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.Reset">
            <summary>
            Resets the last image set used to <i>null</i>, thus clearing it.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.Relabel(MyCaffe.basecode.LabelMappingCollection)">
            <summary>
            Relabels all datasets using a label mapping collection.
            </summary>
            <param name="col">Specifies the label mapping collection.</param>
        </member>
        <member name="P:MyCaffe.db.image.DatasetExCollection.Count">
            <summary>
            Returns the number of datasets in the collection.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.EnableUsingTrainingSourcesForTesting(System.Boolean)">
            <summary>
            Enable/disable the using of the training sources for testing on all datasets.
            </summary>
            <param name="bEnable">Enable/disable the training sources for testing.</param>
        </member>
        <member name="P:MyCaffe.db.image.DatasetExCollection.UseTrainingSourcesForTesting">
            <summary>
            Returns whether or not the training sources are set to be used for testing.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.DatasetExCollection.Item(System.Int32)">
            <summary>
            Returns the dataset at a given index.
            </summary>
            <param name="nIdx">Specifies the index.</param>
            <returns>The dataset at a the index is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.FindDataset(System.Int32)">
            <summary>
            Searches for the dataset with a dataset ID.
            </summary>
            <param name="nDatasetID">Specifies the dataset ID.</param>
            <returns>If found, the DatasetEx is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.FindDataset(System.String)">
            <summary>
            Searches for the dataset with the dataset name.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <returns>If found, the DatasetEx is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.FindImageset(System.Int32)">
            <summary>
            Searches for the ImageSet with a given data source ID.
            </summary>
            <param name="nSourceID">Specifies the ID of the data source.</param>
            <returns>If found, the ImageSet is returned, otherwise an Exception is thrown.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.FindImageset(System.String)">
            <summary>
            Searches for the ImageSet with a given data source name.
            </summary>
            <param name="strSource">Specifies the name of the data source.</param>
            <returns>If found, the ImageSet is returned, otherwise an Exception is thrown.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.Add(MyCaffe.db.image.DatasetEx)">
            <summary>
            Adds a DatasetEx to the collection.
            </summary>
            <param name="ds">Specifies the DatasetEx.</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the collection.
            </summary>
            <param name="bDisposing">Set to <i>true</i> when called from Dispose().</param>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.Dispose">
            <summary>
            Releases all resources used by the collection.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.GetEnumerator">
            <summary>
            Returns the enumerator for the collection.
            </summary>
            <returns>The collection's enumerator is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.DatasetExCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator for the collection.
            </summary>
            <returns>The collection's enumerator is returned.</returns>
        </member>
        <member name="T:MyCaffe.db.image.ImageSet2">
            <summary>
            [V2 Image Database]
            The ImageSet2 manages the data source data including the master list of images, and the master indexes that describe the data source layout (e.g. labels, boosts, etc).
            </summary>
        </member>
        <member name="E:MyCaffe.db.image.ImageSet2.OnCalculateImageMean">
            <summary>
            The OnCalculateImageMean event fires when the ImageSet needs to calculate the image mean for the image set.
            </summary>
        </member>
        <member name="T:MyCaffe.db.image.ImageSet2.TYPE">
            <summary>
            Defines the type of image set.
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.ImageSet2.TYPE.TRAIN">
            <summary>
            Specifies an image set containing the trianing data source.
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.ImageSet2.TYPE.TEST">
            <summary>
            Specifies an image set containing the testing data source.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.#ctor(MyCaffe.db.image.ImageSet2.TYPE,MyCaffe.basecode.Log,MyCaffe.db.image.DatasetFactory,MyCaffe.basecode.descriptors.SourceDescriptor,MyCaffe.basecode.IMAGEDB_LOAD_METHOD,MyCaffe.basecode.CryptoRandom,System.Threading.WaitHandle[])">
            <summary>
            The ImageSet2 constructor.
            </summary>
            <param name="type">Specifies the type of data source managed.</param>
            <param name="log">Specifies the output log.</param>
            <param name="factory">Specifies the data factory used to access the database data.</param>
            <param name="src">Specifies the data source descriptor.</param>
            <param name="loadMethod">Specifies the load method used to load the data.</param>
            <param name="random">Specifies the random number generator.</param>
            <param name="rgAbort">Specifies the cancellation handles.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.Dispose(System.Boolean)">
            <summary>
            Releases the resouces used.
            </summary>
            <param name="bDisposing">Set to <i>true</i> when called by Dispose()</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.Initialize(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Initialize the ImageSet by creating the master list of images, starting its background image loading thread, and then creating the master index that maps the organization of the dataset.
            </summary>
            <param name="bSilentLoad">Specifies to load the data silently without status output.</param>
            <param name="bUseUniqueLabelIndexes">Optionally, specifies to use unique label indexes which is slightly slower, but ensures each label is hit per epoch equally (default = true).</param>
            <param name="bUseUniqueImageIndexes">Optionally, specifies to use unique image indexes which is slightly slower, but ensures each image is hit per epoch (default = true).</param>
            <param name="nMaxLoadCount">Optionally, specifies to automaticall start the image refresh which only applies when the number of images loaded into memory is less than the actual number of images (default = false).</param>
            <returns>Once initialized, the default query state for the image set is returned.  This method may be called multiple times and each time returns a new QueryState.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.WaitForLoadingToComplete(System.Int32)">
            <summary>
            Wait for the image set to complete loading.
            </summary>
            <param name="nWait">Specifies the maximum number of ms to wait (default = int.MaxValue).</param>
            <returns>If the load has completed <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="P:MyCaffe.db.image.ImageSet2.LoadMethod">
            <summary>
            Get the image load method used on initialization.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.ImageSet2.IsRefreshRunning">
            <summary>
            Returns whether or not the refresh is running.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.StartRefresh(System.Double)">
            <summary>
            Start the refresh process which only valid when initialized with LoadLimit > 0.
            </summary>
            <param name="dfReplacementPct">Optionally, specifies the replacement percentage (default = 0.25 or 25%).</param>
            <returns>false is returned if the refresh thread is already running, or if the number of images in memory equal the number of images in the data source.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.WaitForRefreshToComplete(System.Int32)">
            <summary>
            Wait for the image refresh to complete loading.
            </summary>
            <param name="nWait">Specifies the maximum number of ms to wait (default = int.MaxValue).</param>
            <returns>If the refresh has completed <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.StopRefresh">
            <summary>
            Abort any refresh currently running.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.ImageSet2.ImageSetType">
            <summary>
            Returns the type of use for the ImageSet.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.Load">
            <summary>
            Starts loading the image set on the background thread if it is not already loading.
            </summary>
            <returns>If the load is already running <i>false</i> is returned, otherwise <i>true</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.Unload(System.Boolean)">
            <summary>
            Unload all images from the master list (freeing memory) and optionally reload the dataset.
            </summary>
            <param name="bReload">When <i>true</i>, the image set starts loading right after it is unloaded causing a refresh.</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.CreateQueryState(System.Boolean,System.Boolean,MyCaffe.basecode.IMGDB_SORT)">
            <summary>
            Create a new QueryState and optionally sort the results.
            </summary>
            <param name="bUseUniqueLabelIndexes">Optionally, specifies to use unique label indexes which is slightly slower, but ensures each label is hit per epoch equally (default = true).</param>
            <param name="bUseUniqueImageIndexes">Optionally, specifies to use unique image indexes which is slightly slower, but ensures each image is hit per epoch (default = true).</param>
            <param name="sort">Optionally, specifies a sorting method for the query set.</param>
            <returns>The new QueryState is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.GetTotalCount">
            <summary>
            Get the total number of images in the image set whether loaded or not.
            </summary>
            <returns>The total number of images is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.GetLoadedCount">
            <summary>
            Get the total number of images already loaded in the image set.
            </summary>
            <returns>The total number of images loaded is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.GetImageMean(MyCaffe.basecode.Log,System.Threading.WaitHandle[])">
            <summary>
            Get the image mean for the iamge set, or create one if it does not exist.
            </summary>
            <param name="log">Specifies the output log used when creating the image mean.</param>
            <param name="rgAbort">Specifies the cancellation handles used to cancel the creation of the image mean.</param>
            <returns>The image mean is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.ReloadIndexing">
            <summary>
            Reload the indexing for the image set.
            </summary>
            <returns>The new indexes are returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.ResetLabels">
            <summary>
            Reset all labels of the image set to the original labels.
            </summary>
            <returns>The new list of DbItem's is returned based on the newly reset labels.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.Relabel(MyCaffe.basecode.LabelMappingCollection)">
            <summary>
            Reset the image set based on the LabelMappingCollection.
            </summary>
            <param name="col">Specifies the label mapping that defines how to relabel the image set.</param>
            <returns>The new list of DbItem's is returned based on the newly updated labels.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.ResetAllBoosts">
            <summary>
            Reset all boosts to their original settings.
            </summary>
            <returns>The new list of DbItem's is returned based on the newly reset boosts.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.GetLabels">
            <summary>
            Returns a list of all labels used by the data source.
            </summary>
            <returns>A list of LabelDescriptors is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.GetLabelName(System.Int32)">
            <summary>
            Return the label name of a given label.
            </summary>
            <param name="nLabel">Specifies the label.</param>
            <returns>The name of the label is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.SetImageMean(MyCaffe.basecode.SimpleDatum,System.Boolean)">
            <summary>
            Sets the data source image mean.
            </summary>
            <param name="sd">Specifies the iamge mean to set.</param>
            <param name="bSave">Optionally, specifies whether or not to save the image mean in the database (default = false).</param>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.FindImageIndex(System.DateTime,System.String)">
            <summary>
            Find the index of an image with the tiven date and (optionally) description.
            </summary>
            <param name="dt">Specifies the date to look for.</param>
            <param name="strDesc">Specifies the description to look for.</param>
            <returns>If found, the image index is returned, otherwise -1 is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.GetImage(System.Int32)">
            <summary>
            Get the image at a given image ID.
            </summary>
            <param name="nImageId">Specifies the image ID (within the database) of the image to retrieve.</param>
            <returns>The image is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.GetImage(MyCaffe.db.image.QueryState,MyCaffe.basecode.IMGDB_LABEL_SELECTION_METHOD,MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD,MyCaffe.basecode.Log,System.Nullable{System.Int32},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns the image based on its label and image selection method.
            </summary>
            <param name="state">Specifies the query state.</param>
            <param name="labelSelectionMethod">Specifies the label selection method.</param>
            <param name="imageSelectionMethod">Specifies the image selection method.</param>
            <param name="log">Specifies the Log for status output.</param>
            <param name="nLabel">Optionally, specifies the label (default = null).</param>
            <param name="nDirectIdx">Optionally, specifies the image index to use when loading a specific index (default = -1).</param>
            <param name="bLoadDataCriteria">Optionally, specifies to load the data criteria data (default = false).</param>
            <param name="bLoadDebugData">Optionally, specifies to load the debug data (default = false).</param>
            <returns>The SimpleDatum containing the image is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.GetCount(MyCaffe.db.image.QueryState,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the number of images in the image set, optionally with super-boost only.
            </summary>
            <param name="state">Specifies the query state to use.</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <returns>The number of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.GetImages(MyCaffe.db.image.QueryState,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="state">Specifies the query state to use.</param>
            <param name="nStartIdx">Specifies a starting index from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <param name="bAttemptDirectLoad">Optionaly, specifies to directly load all images not already loaded.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.GetImages(MyCaffe.db.image.QueryState,System.DateTime,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="state">Specifies the query state to use.</param>
            <param name="dtStart">Specifies a starting time from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.ImageSet2.GetImages(System.Boolean,System.String,System.Nullable{System.Int32},System.Int32[])">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="bSuperboostOnly">Specifies whether or not to return images with super-boost.</param>
            <param name="strFilterVal">specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="rgIdx">Specifies a set of indexes to search for where the images returned must have an index greater than or equal to the individual index.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="T:MyCaffe.db.image.LabelSet">
            <summary>
            The LabelSet 'points' into the main image list via references objects that are already created in the main image list of the ImageSet.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.LabelSet.#ctor(MyCaffe.basecode.descriptors.LabelDescriptor,MyCaffe.basecode.CryptoRandom)">
            <summary>
            The LabelSet constructor.
            </summary>
            <param name="lbl">Specifies the label.</param>
            <param name="random">Specifies the random number generator.</param>
        </member>
        <member name="P:MyCaffe.db.image.LabelSet.Label">
            <summary>
            Get/set the label of the LabelSet.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.LabelSet.Count">
            <summary>
            Returns the number of images in the label set.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.LabelSet.Clear">
            <summary>
            Clears the list of images.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.LabelSet.Item(System.Int32)">
            <summary>
            Get/set an image at an index within the LabelSet.
            </summary>
            <param name="nIdx">Specifies the index.</param>
            <returns>The image at the index is returned.</returns>
        </member>
        <member name="P:MyCaffe.db.image.LabelSet.IsLoaded">
            <summary>
            Returns whether or not the label set is fully loaded or not (which is the case when first using LOAD_ON_DEMAND).
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.LabelSet.Add(MyCaffe.basecode.SimpleDatum)">
            <summary>
            Adds an image to the current index and then advances the internal index.
            </summary>
            <param name="s">Specifies the image.</param>
        </member>
        <member name="M:MyCaffe.db.image.LabelSet.GetImage(System.Int32,MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD)">
            <summary>
            Returns an image from the LabelSet using the image selection method.
            </summary>
            <param name="nIdx">Specifies the index to use when performing sequential selection.</param>
            <param name="selectionMethod">Specifies the image selection method.</param>
            <returns>The image is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.LabelSet.GetImage(MyCaffe.basecode.SimpleDatum[],System.Collections.Generic.List{System.Int32},System.Int32,System.Int32,MyCaffe.basecode.CryptoRandom,MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Returns an image from a list of images.
            </summary>
            <param name="rgImages">Specifies the image list to select from.</param>
            <param name="rgIdx">Specifies the list of indexes to choose from.</param>
            <param name="nCount">Specifies the maximum count to use.</param>
            <param name="nIdx">Specifies the index to use when selecting sequentially or in pair selection.</param>
            <param name="random">Specifies the random number generator to use.</param>
            <param name="selectionMethod">Specifies the image selection method.</param>
            <param name="nLastIndex">Specifies the last index used.</param>
            <param name="nFixedIndex">Specifies the fixed index to use.</param>
            <param name="nImageIdx">Returns the image index used.</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.LabelSet.Unload">
            <summary>
            Unload all images from the label set.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.LabelSet.Dispose(System.Boolean)">
            <summary>
            Releases all resources used.
            </summary>
            <param name="bDisposing">Set to <i>true</i> when called from Dispose().</param>
        </member>
        <member name="M:MyCaffe.db.image.LabelSet.Dispose">
            <summary>
            Releases all resources used.
            </summary>
        </member>
        <member name="T:MyCaffe.db.image.MasterIndexes">
            <summary>
            The MasterIndexes stores the indexes that define the index structure of the data source data.
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.MasterIndexes.m_src">
            <summary>
            Specifies the data source descriptor.
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.MasterIndexes.m_index">
            <summary>
            Specifies the index into all of the data source images.
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.MasterIndexes.m_rgLabels">
            <summary>
            Specifies the list of images listed by label where each label contains an index into all images with that label.
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.MasterIndexes.m_boosted">
            <summary>
            Specifies the list of all boosted images.
            </summary>
        </member>
        <member name="F:MyCaffe.db.image.MasterIndexes.m_rgLabelsBoosted">
            <summary>
            Specifies the list of all boosted images listed by label where each label contains an index into all boosted images with that label.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MasterIndexes.#ctor(MyCaffe.basecode.CryptoRandom,MyCaffe.basecode.descriptors.SourceDescriptor,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="random">Specifies the random number generator.</param>
            <param name="src">Specifies the data source.</param>
            <param name="nLoadLimit">Optionally, specifies the load limit used which when set to a value > 0, limits queries to RANDOM image selection within the load limit count (default = 0).</param>
        </member>
        <member name="M:MyCaffe.db.image.MasterIndexes.#ctor(MyCaffe.db.image.MasterIndexes,MyCaffe.basecode.IMGDB_SORT)">
            <summary>
            The constructor used to copy another MasterIndexes and optionally specify a sorting for the indexes.
            </summary>
            <param name="idx">Specifies the MasterIndexes to copy.</param>
            <param name="sort">Optionally, specifies a sorting to use on the indexes.</param>
        </member>
        <member name="M:MyCaffe.db.image.MasterIndexes.Dispose">
            <summary>
            Release all resources used.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.MasterIndexes.LoadLimit">
            <summary>
            Returns the load limit set during initialization.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.MasterIndexes.LabelCount">
            <summary>
            Returns the number of labels.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MasterIndexes.FindImageIndexes(System.DateTime)">
            <summary>
            Returns all DbItems that point to images iwth a given date.
            </summary>
            <param name="dt">Specifies the date to look for.</param>
            <returns>The list of DbItems matching the images is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterIndexes.Reload(System.Collections.Generic.List{MyCaffe.db.image.DbItem})">
            <summary>
            Reload all images by re-loading the master index list.
            </summary>
            <param name="rgItems">Specifies the list of DbItem's used to re-load the indexes.</param>
        </member>
        <member name="M:MyCaffe.db.image.MasterIndexes.GetIndex(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the Index matching the criteria.
            </summary>
            <param name="nLabel">Optionally, specifies a label to use (default = null).</param>
            <param name="bBoosted">Optionally, specifies to use boosted images (default = false).</param>
            <returns>The Index matching the criteria is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterIndexes.SetIndex(MyCaffe.db.image.Index,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Set a given index based on the criteria.
            </summary>
            <param name="idx">Specifies the Index source.</param>
            <param name="nLabel">Optionally, specifies a label to use (default = null).</param>
            <param name="bBoosted">Optionally, specifies to use boosted images (default = false).</param>
        </member>
        <member name="M:MyCaffe.db.image.MasterIndexes.GetIndexes(System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the indexes fitting the criteria.
            </summary>
            <param name="nStartIdx">Specifies a starting index from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <returns>A list with the image indexes is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterIndexes.GetIndexes(System.DateTime,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the indexes fitting the criteria.
            </summary>
            <param name="dtStart">Specifies a starting time from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <returns>A list with the image indexes is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterIndexes.GetNextLabel(MyCaffe.db.image.Index.SELECTION_TYPE,System.Boolean)">
            <summary>
            Returns the next label in the Index set selected based on the selection criteria.
            </summary>
            <param name="type">Specifies the selection type (e.g. RANDOM, SEQUENTIAL).</param>
            <param name="bBoosted">Optionally, specifies to use label sets of boosted images (default = false).</param>
            <returns>The next label index is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterIndexes.GetNextImage(MyCaffe.db.image.Index.SELECTION_TYPE,System.Nullable{System.Int32},System.Boolean,System.Int32)">
            <summary>
            Returns the next image in the Index set based on the selection criteria.
            </summary>
            <param name="type">Specifies the selection type (e.g. RANDOM, SEQUENTIAL).</param>
            <param name="nLabel">Optionally, specifies a label (default = null).</param>
            <param name="bBoosted">Optionally, specifies to query boosted images (default = false).</param>
            <param name="nDirectIdx">Optionally, specifies to query the image at this index (only applies when type = DIRECT).</param>
            <returns>The next image index is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterIndexes.ToString">
            <summary>
            Returns a string representation of the master indexes.
            </summary>
            <returns>The string representation is returned.</returns>
        </member>
        <member name="T:MyCaffe.db.image.MasterList">
            <summary>
            The MasterList is responsible for loading and managing access to the master list of images for a data source.
            </summary>
        </member>
        <member name="E:MyCaffe.db.image.MasterList.OnCalculateImageMean">
            <summary>
            The OnCalculateImageMean event fires when the ImageSet needs to calculate the image mean for the image set.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.#ctor(MyCaffe.basecode.CryptoRandom,MyCaffe.basecode.Log,MyCaffe.basecode.descriptors.SourceDescriptor,MyCaffe.db.image.DatasetFactory,System.Collections.Generic.List{System.Threading.WaitHandle},System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="random">Specifies the CryptoRandom to use for random selection.</param>
            <param name="log">Specifies the output log.</param>
            <param name="src">Specifies the data source that holds the data on the database.</param>
            <param name="factory">Specifies the data factory used to access the database data.</param>
            <param name="rgAbort">Specifies the cancel handles.</param>
            <param name="nMaxLoadCount">Optionally, specifies to automaticall start the image refresh which only applies when the number of images loaded into memory is less than the actual number of images (default = false).</param>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.Dispose">
            <summary>
            Release all resources used.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.MasterList.IsLoadLimitEnabled">
            <summary>
            Returns true when the database is loaded with LoadLimit > 0, false otherwise.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.MasterList.IsFull">
            <summary>
            Returns <i>true</i> when the master list is fully loaded, <i>false</i> otherwise.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.Load(System.Boolean)">
            <summary>
            Start loading the dataset.
            </summary>
            <param name="bSilent">Specifies whether or not to output the loading status.</param>
            <returns>If the dataset is already loading <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.Unload(System.Boolean)">
            <summary>
            Unload the data source images.
            </summary>
            <param name="bReLoad">Re-load the data source images right after the unload completes.</param>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.StartRefresh(System.Double)">
            <summary>
            Start the refresh thread which will run if the number of images stored in memory is less than the total number of images in the data source, otherwise this function returns false.
            </summary>
            <param name="dfReplacementPct">Optionally, specifies the replacement percentage (default = 0.25 or 25%).</param>
            <returns>false is returned if the refresh thread is already running, or if the number of images in memory equal the number of images in the data source.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.WaitForRefreshToComplete(System.Collections.Generic.List{System.Threading.WaitHandle},System.Int32)">
            <summary>
            Wait for the refres to complete.
            </summary>
            <param name="rgAbort">Specifies one or more cancellation handles.</param>
            <param name="nWait">Specifies an amount of time to wait in milliseconds.</param>
            <returns>If the refresh is done running, true is returned, otherwise false.</returns>
        </member>
        <member name="P:MyCaffe.db.image.MasterList.IsRefreshDone">
            <summary>
            Returns true after the refresh completes.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.MasterList.IsRefreshRunning">
            <summary>
            Returns true if the refresh is running, false otherwise.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.StopRefresh">
            <summary>
            Stop the refresh thread if running.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.SetImageMean(MyCaffe.basecode.SimpleDatum,System.Boolean)">
            <summary>
            Set the image mean.
            </summary>
            <param name="d">Specifies the image mean.</param>
            <param name="bSave">Optionally, specifies whether or not to save the image mean in the database (default = false).</param>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.GetTotalCount">
            <summary>
            Return the total number of images whether loaded or not, in the data source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.GetLoadedCount">
            <summary>
            Return the currently loaded images in the data source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.GetImageMean(MyCaffe.basecode.Log,System.Threading.WaitHandle[])">
            <summary>
            Returns the image mean for the ImageSet.
            </summary>
            <param name="log">Specifies the Log used to output status.</param>
            <param name="rgAbort">Specifies a set of wait handles for aborting the operation.</param>
            <returns>The SimpleDatum with the image mean is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.ReloadIndexing">
            <summary>
            Reload the image indexing.
            </summary>
            <returns>The indexes are returned as a list.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.ResetLabels">
            <summary>
            Reset the labels of all images to the original labels.
            </summary>
            <returns>The new set of DBItems is returned for the images.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.Relabel(MyCaffe.basecode.LabelMappingCollection)">
            <summary>
            Relabel the images based on the LabelMappingCollection.
            </summary>
            <param name="col">Specifies the label mapping collection.</param>
            <returns>The new set of DBItems is returned for the images.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.ResetAllBoosts">
            <summary>
            Reset all image boosts.
            </summary>
            <returns>The new set of DBItems is returned for the images.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.FindImageIndex(System.Collections.Generic.List{MyCaffe.db.image.DbItem},System.String)">
            <summary>
            Find the image index based by searching the rgItems for an image that contains the description specified.
            </summary>
            <param name="rgItems">Specifies the image items to use to search.</param>
            <param name="strDesc">Specifies the image description to look for.</param>
            <returns>If found the image index is returned, otherwise -1 is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.FindImage(System.Int32)">
            <summary>
            Find an image based on its image ID (e.g. the image ID in the database).
            </summary>
            <param name="nImageId">Specifies the image ID in the database.</param>
            <returns>If found the image is returned, otherwise <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.GetImage(System.Int32,System.Boolean,System.Boolean,MyCaffe.basecode.IMAGEDB_LOAD_METHOD)">
            <summary>
            Get the image with a specific image index.
            </summary>
            <param name="nIdx">Specifies the image index.</param>
            <param name="bLoadDataCriteria">Specifies whether or not to load the data criteria along with the image.</param>
            <param name="bLoadDebugData">Specifies whether or not to load the debug data with the image.</param>
            <param name="loadMethod">Specifies the image loading method used.</param>
            <returns>If found, the image is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.GetCount(MyCaffe.db.image.QueryState,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the number of images in the image set, optionally with super-boosted values only.
            </summary>
            <param name="state">Specifies the query state to use.</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <returns>The number of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.GetImages(MyCaffe.db.image.QueryState,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="state">Specifies the query state to use.</param>
            <param name="nStartIdx">Specifies a starting index from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <param name="bAttemptDirectLoad">Optionaly, specifies to directly load all images not already loaded.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.GetImages(MyCaffe.db.image.QueryState,System.DateTime,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="state">Specifies the query state to use.</param>
            <param name="dtStart">Specifies a starting time from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.GetImages(System.Boolean,System.String,System.Nullable{System.Int32},System.Int32[])">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="bSuperboostOnly">Specifies whether or not to return images with super-boost.</param>
            <param name="strFilterVal">specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="rgIdx">Specifies a set of indexes to search for where the images returned must have an index greater than or equal to the individual index.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.WaitForLoadingToComplete(System.Collections.Generic.List{System.Threading.WaitHandle},System.Int32)">
            <summary>
            Wait for the image loading to complete - this is used when performing LOAD_ALL.
            </summary>
            <param name="rgAbort">Specifies one or more cancellation handles.</param>
            <param name="nWait">Optionally, specifies an amount to wait (default = int.MaxValue).</param>
            <returns>If the load is completed <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.directLoadImage(System.Int32)">
            <summary>
            Directly load an image, preempting the backgroud load - used by LOAD_ON_DEMAND for images not already loaded.
            </summary>
            <param name="nIdx">Specifies the image index.</param>
            <returns>The image at the image index is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MasterList.dataLoadThread">
            <summary>
            The dataLoadThread is responsible for loading the data source images in the background.
            </summary>
        </member>
        <member name="T:MyCaffe.db.image.MyCaffeImageDatabase2">
            <summary>
            [V2 Image Database]
            The MyCaffeImageDatabase2 provides an enhanced in-memory image database used for quick image retrieval.
            </summary>
            <remarks>
            The MyCaffeImageDatbase2 manages a set of data sets, where each data sets comprise a pair of data sources: one source 
            for training and another source for testing.  Each data source contains a list of images and a list of label sets
            that point back into the list of images.  This organization allows for quick image selection by image or by label
            set and then by image from within the label set.
            </remarks>
        </member>
        <member name="E:MyCaffe.db.image.MyCaffeImageDatabase2.OnCalculateImageMean">
            <summary>
            The OnCalculateImageMean event fires each time the MyCaffeImageDatabase wants to access the image mean for a data set.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.#ctor(MyCaffe.basecode.Log,System.String,System.Int32)">
            <summary>
            The MyCaffeImageDatabase2 constructor.
            </summary>
            <param name="log">The Log for output.</param>
            <param name="strId">Specifies an identifier for this in memory database instance (default = "default").</param>
            <param name="nSeed">Optionally, specifies a seed for the random number generator (default = null).</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.#ctor(System.ComponentModel.IContainer)">
            <summary>
            The MyCaffeImageDatabase constructor.
            </summary>
            <param name="container">Specifies a container.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetVersion">
            <summary>
            Returns the version of the MyCaffe Image Database being used.
            </summary>
            <returns>Returns the version.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.SetInstance(System.String)">
            <summary>
            Set the database instance to use.
            </summary>
            <param name="strInstance">Specifies the instance name to use in '.\\name' format.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.InitializeWithDsName(MyCaffe.basecode.SettingsCaffe,System.String,System.String)">
            <summary>
            Initializes the image database.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <param name="strDs">Specifies the data set to load.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>Upon loading the dataset a handle to the default QueryState is returned (which is ordered by Index), or 0 on cancel.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.InitializeWithDs(MyCaffe.basecode.SettingsCaffe,MyCaffe.basecode.descriptors.DatasetDescriptor,System.String)">
            <summary>
            Initializes the image database.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <param name="ds">Specifies the data set to load.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>Upon loading the dataset a handle to the default QueryState is returned (which is ordered by Index), or 0 on cancel.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.InitializeWithDsId(MyCaffe.basecode.SettingsCaffe,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes the image database.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <param name="nDataSetID">Specifies the database ID of the data set to load.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <param name="nPadW">Specifies the padding to add to each image width (default = 0).</param>
            <param name="nPadH">Specifies the padding to add to each image height (default = 0).</param>
            <returns>Upon loading the dataset a handle to the default QueryState is returned (which is ordered by Index), or 0 on cancel.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.InitializeWithDsName1(MyCaffe.basecode.SettingsCaffe,System.String,System.String)">
            <summary>
            Initializes the image database.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <param name="strDs">Specifies the data set to load.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.InitializeWithDs1(MyCaffe.basecode.SettingsCaffe,MyCaffe.basecode.descriptors.DatasetDescriptor,System.String)">
            <summary>
            Initializes the image database.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <param name="ds">Specifies the data set to load.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.InitializeWithDsId1(MyCaffe.basecode.SettingsCaffe,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes the image database.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <param name="nDataSetID">Specifies the database ID of the data set to load.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <param name="nPadW">Specifies the padding to add to each image width (default = 0).</param>
            <param name="nPadH">Specifies the padding to add to each image height (default = 0).</param>
            <returns>Returns <i>true</i> on success, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.CleanUp(System.Int32,System.Boolean)">
            <summary>
            Releases the image database, and if this is the last instance using the in-memory database, frees all memory used.
            </summary>
            <param name="nDsId">Optionally, specifies the dataset previously loaded.</param>
            <param name="bForce">Optionally, force the cleanup even if other users are using the database.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.WaitForDatasetToLoad(System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Wait for the dataset loading to complete.
            </summary>
            <param name="nDsId">Specifies the dataset ID.</param>
            <param name="bTraining">Specifies to wait for the training data source to load.</param>
            <param name="bTesting">Specifies to wait for the testing data source to load.</param>
            <param name="nWait">Specifies the amount of time to wait in ms. (default = int.MaxValue).</param>
            <returns>If the data source(s) complete loading, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.WaitForDatasetToLoad(System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Wait for the dataset loading to complete.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="bTraining">Specifies to wait for the training data source to load.</param>
            <param name="bTesting">Specifies to wait for the testing data source to load.</param>
            <param name="nWait">Specifies the amount of time to wait in ms. (default = int.MaxValue).</param>
            <returns>If the data source(s) complete loading, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.ReloadIndexing(System.Int32)">
            <summary>
            Reload the indexing for a data set.
            </summary>
            <param name="nDsId">Specifies the dataset ID.</param>
            <returns>If the data source(s) have their indexing reloaded, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.ReloadIndexing(System.String)">
            <summary>
            Reload the indexing for a data set.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <returns>If the data source(s) have their indexing reloaded, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.CreateDatabase(System.String,System.String,System.String)">
            <summary>
            Create the database used by the CaffeImageDatabase.
            </summary>
            <param name="strName">Specifies the name of the database (recommended value = "DNN").</param>
            <param name="strPath">Specifies the file path where the database is to be created.</param>
            <param name="strInstance">Optionally, specifies the SQL Instance.  By default this is <i>null</i>, which sets the instance to the default global instance.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.WaitForDatasetToRefresh(System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Wait for the dataset refreshing to complete.
            </summary>
            <param name="nDsId">Specifies the dataset ID.</param>
            <param name="bTraining">Specifies to wait for the training data source to refresh.</param>
            <param name="bTesting">Specifies to wait for the testing data source to refresh.</param>
            <param name="nWait">Specifies the amount of time to wait in ms. (default = int.MaxValue).</param>
            <returns>If the data source(s) complete refreshing, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.WaitForDatasetToRefresh(System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Wait for the dataset refreshing to complete.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="bTraining">Specifies to wait for the training data source to refresh.</param>
            <param name="bTesting">Specifies to wait for the testing data source to refresh.</param>
            <param name="nWait">Specifies the amount of time to wait in ms. (default = int.MaxValue).</param>
            <returns>If the data source(s) complete refreshing, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.IsRefreshRunning(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns true if the refresh operation running.
            </summary>
            <param name="nDsId">Specifies the dataset ID.</param>
            <param name="bTraining">Specifies to check the training data source for refresh.</param>
            <param name="bTesting">Specifies to check the testing data source for refresh.</param>
            <returns>If the refresh is running, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.IsRefreshRunning(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns true if the refresh operation running.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="bTraining">Specifies to check the training data source for refresh.</param>
            <param name="bTesting">Specifies to check the testing data source for refresh.</param>
            <returns>If the refresh is running, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.StartRefresh(System.String,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Start a refresh on the dataset by replacing a specified percentage of the images with images from the physical database.
            </summary>
            <remarks>
            Note, this method is only valid when initialized with LoadLimit > 0.
            </remarks>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="bTraining">Specifies the training data source to refresh.</param>
            <param name="bTesting">Specifies the testing data source to refresh.</param>
            <param name="dfReplacementPct">Optionally, specifies the replacement percentage to use (default = 0.25 for 25%).</param>
            <returns>On succes, true is returned, otherwise false is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.StopRefresh(System.String,System.Boolean,System.Boolean)">
            <summary>
            Stop a refresh operation running on the dataset.
            </summary>
            <remarks>
            Note, this method is only valid when initialized with LoadLimit > 0.
            </remarks>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="bTraining">Specifies the training data source to strop refreshing.</param>
            <param name="bTesting">Specifies the testing data source to stop refreshing.</param>
            <returns>On succes, true is returned, otherwise false is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.StartRefresh(System.Int32,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Start a refresh on the dataset by replacing a specified percentage of the images with images from the physical database.
            </summary>
            <remarks>
            Note, this method is only valid when initialized with LoadLimit > 0.
            </remarks>
            <param name="nDsID">Specifies the dataset ID.</param>
            <param name="bTraining">Specifies the training data source to refresh.</param>
            <param name="bTesting">Specifies the testing data source to refresh.</param>
            <param name="dfReplacementPct">Optionally, specifies the replacement percentage to use (default = 0.25 for 25%).</param>
            <returns>On succes, true is returned, otherwise false is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.StopRefresh(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Stop a refresh operation running on the dataset.
            </summary>
            <remarks>
            Note, this method is only valid when initialized with LoadLimit > 0.
            </remarks>
            <param name="nDsID">Specifies the dataset ID.</param>
            <param name="bTraining">Specifies the training data source to strop refreshing.</param>
            <param name="bTesting">Specifies the testing data source to stop refreshing.</param>
            <returns>On succes, true is returned, otherwise false is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.StartAutomaticRefreshSchedule(System.String,System.Boolean,System.Boolean,System.Int32,System.Double)">
            <summary>
            Start the automatic refresh cycle to occur on specified period increments.
            </summary>
            <param name="strDs">Specifies the dataset name for which the automatic refresh cycle is to run.</param>
            <param name="bTraining">Specifies the training data source to start refreshing.</param>
            <param name="bTesting">Specifies the testing data source to start refreshing.</param>
            <param name="nPeriodInMs">Specifies the period in milliseconds over which the auto refresh cycle is to run.</param>
            <param name="dfReplacementPct">Specifies the percentage of replacement to use on each cycle.</param>
            <returns>If successfully started, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.StopAutomaticRefreshSchedule(System.String,System.Boolean,System.Boolean)">
            <summary>
            Stop the automatic refresh schedule running on a dataset.
            </summary>
            <param name="strDs">Specifies the dataset name for which the automatic refresh cycle is to run.</param>
            <param name="bTraining">Specifies the training data source to stop refreshing.</param>
            <param name="bTesting">Specifies the testing data source to stop refreshing.</param>
            <returns>If successfully stopped, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetScheduledAutoRefreshInformation(System.String,System.Int32@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            Returns whether or not a scheduled refresh is running and if so at what period and replacement percent.
            </summary>
            <param name="strDs">Specifies the dataset name for which the automatic refresh cycle is to run.</param>
            <param name="nPeriodInMs">Returns the period in milliseconds over which the auto refresh cycle is run.</param>
            <param name="dfReplacementPct">Returns the percentage of replacement to use on each cycle.</param>
            <param name="nTrainingRefreshCount">Returns the training refrsh count.</param>
            <param name="nTestingRefreshCount">Returns the testing refresh count.</param>
            <returns>If the refresh schedule is running, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.StartAutomaticRefreshSchedule(System.Int32,System.Boolean,System.Boolean,System.Int32,System.Double)">
            <summary>
            Start the automatic refresh cycle to occur on specified period increments.
            </summary>
            <param name="nDsID">Specifies the dataset ID for which the automatic refresh cycle is to run.</param>
            <param name="bTraining">Specifies the training data source to start refreshing.</param>
            <param name="bTesting">Specifies the testing data source to start refreshing.</param>
            <param name="nPeriodInMs">Specifies the period in milliseconds over which the auto refresh cycle is to run.</param>
            <param name="dfReplacementPct">Specifies the percentage of replacement to use on each cycle.</param>
            <returns>If successfully started, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.StopAutomaticRefreshSchedule(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Stop the automatic refresh schedule running on a dataset.
            </summary>
            <param name="nDsID">Specifies the dataset ID for which the automatic refresh cycle is to run.</param>
            <param name="bTraining">Specifies the training data source to stop refreshing.</param>
            <param name="bTesting">Specifies the testing data source to stop refreshing.</param>
            <returns>If successfully stopped, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetScheduledAutoRefreshInformation(System.Int32,System.Int32@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            Returns whether or not a scheduled refresh is running and if so at what period and replacement percent.
            </summary>
            <param name="nDsID">Specifies the dataset name for which the automatic refresh cycle is to run.</param>
            <param name="nPeriodInMs">Returns the period in milliseconds over which the auto refresh cycle is run.</param>
            <param name="dfReplacementPct">Returns the percentage of replacement to use on each cycle.</param>
            <param name="nTrainingRefreshCount">Returns the training refrsh count.</param>
            <param name="nTestingRefreshCount">Returns the testing refresh count.</param>
            <returns>If the refresh schedule is running, true is returned, otherwise false.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.CreateQueryState(System.Int32,System.Boolean,System.Boolean,MyCaffe.basecode.IMGDB_SORT)">
            <summary>
            Create a query state for a data set, optionally using a specific sorting method.
            </summary>
            <param name="nDsId">Specifies the ID of the data set.</param>
            <param name="bUseUniqueLabelIndexes">Optionally, specifies to use unique label indexes which is slightly slower, but ensures each label is hit per epoch equally (default = true).</param>
            <param name="bUseUniqueImageIndexes">Optionally, specifies to use unique image indexes which is slightly slower, but ensures each image is hit per epoch (default = true).</param>
            <param name="sort">Specifies the sorting method.</param>
            <returns>The new query state handle is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.CreateQueryState(System.String,System.Boolean,System.Boolean,MyCaffe.basecode.IMGDB_SORT)">
            <summary>
            Create a query state for a data set, optionally using a specific sorting method.
            </summary>
            <param name="strDs">Specifies the name of the data set.</param>
            <param name="bUseUniqueLabelIndexes">Optionally, specifies to use unique label indexes which is slightly slower, but ensures each label is hit per epoch equally (default = true).</param>
            <param name="bUseUniqueImageIndexes">Optionally, specifies to use unique image indexes which is slightly slower, but ensures each image is hit per epoch (default = true).</param>
            <param name="sort">Specifies the sorting method.</param>
            <returns>The new query state handle is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.SetDefaultQueryState(System.Int32,System.Int64)">
            <summary>
            Set the default query state to the query state specified for the dataset specified.
            </summary>
            <param name="nDsId">Specifies the dataset ID.</param>
            <param name="lQueryState">Specifies the query state to set.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> on failure.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.SetDefaultQueryState(System.String,System.Int64)">
            <summary>
            Set the default query state to the query state specified for the dataset specified.
            </summary>
            <param name="strDs">Specifies the dataset name.</param>
            <param name="lQueryState">Specifies the query state to set.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> on failure.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.FreeQueryState(System.Int32,System.Int64)">
            <summary>
            Frees a query state from a given dataset.
            </summary>
            <param name="nDsId">Specifies the dataset on which to free the query state.</param>
            <param name="lHandle">Specifies the handle to the query state to free.</param>
            <returns>If found and freed, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.FreeQueryState(System.String,System.Int64)">
            <summary>
            Frees a query state from a given dataset.
            </summary>
            <param name="strDs">Specifies the dataset name on which to free the query state.</param>
            <param name="lHandle">Specifies the handle to the query state to free.</param>
            <returns>If found and freed, <i>true</i> is returned, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetBoostQueryHitPercentsAsTextFromSourceName(System.Int64,System.String)">
            <summary>
            Returns the percentage of boosted images queried as text.
            </summary>
            <param name="lQueryState">Specifies the handle to the query state.</param>
            <param name="strSource">Specifies the source to query.</param>
            <returns>The query boost percentage hit is returned as text.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetLabelQueryHitPercentsAsTextFromSourceName(System.Int64,System.String)">
            <summary>
            Returns a string with the query hit percent for each label (e.g. the percentage that each label has been queried).
            </summary>
            <param name="lQueryState">Specifies the handle to the query state.</param>
            <param name="strSource">Specifies the data source who's hit percentages are to be retrieved.</param>
            <returns>A string representing the query hit percentages is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetLabelQueryEpocsAsTextFromSourceName(System.Int64,System.String)">
            <summary>
            Returns a string with the query epoch counts for each label (e.g. the number of times all images with the label have been queried).
            </summary>
            <param name="lQueryState">Specifies the handle to the query state.</param>
            <param name="strSource">Specifies the data source who's query epochs are to be retrieved.</param>
            <returns>A string representing the query epoch counts is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetBoostQueryHitPercentsAsTextFromSourceName(System.String)">
            <summary>
            Returns a string with the query hit percent for each boost (e.g. the percentage that each boost value has been queried).
            </summary>
            <param name="strSource">Specifies the data source who's hit percentages are to be retrieved.</param>
            <returns>A string representing the query hit percentages is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetLabelQueryHitPercentsAsTextFromSourceName(System.String)">
            <summary>
            Returns a string with the query hit percent for each label (e.g. the percentage that each label has been queried).
            </summary>
            <param name="strSource">Specifies the data source who's hit percentages are to be retrieved.</param>
            <returns>A string representing the query hit percentages is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetLabelQueryEpocsAsTextFromSourceName(System.String)">
            <summary>
            Returns a string with the query epoch counts for each label (e.g. the number of times all images with the label have been queried).
            </summary>
            <param name="strSource">Specifies the data source who's query epochs are to be retrieved.</param>
            <returns>A string representing the query epoch counts is returned.</returns>
        </member>
        <member name="P:MyCaffe.db.image.MyCaffeImageDatabase2.OutputLog">
            <summary>
            Get/set the output log.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetLoadImageDataCriteria">
            <summary>
            Returns whether or not the image data criteria is loaded with each image.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetLoadImageDebugData">
            <summary>
            Returns whether or not the image debug data is loaded with each image.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetImageCount(System.Int32)">
            <summary>
            Returns the number of images in a given data source.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <returns>The number of images is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetImageCount(System.Int32,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the number of images in a given data source, optionally only counting the boosted images.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <returns>The number of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetImageCount(System.Int64,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the number of images in a given data source, optionally only counting the boosted images.
            </summary>
            <param name="lQueryState">Specifies a handle to the query state to use.</param>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <returns>The number of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetSelectionMethod(MyCaffe.basecode.SettingsCaffe)">
            <summary>
            Returns the label/image selection methods based on the SettingsCaffe settings.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <returns>The label/image selection method is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetSelectionMethod(MyCaffe.basecode.ProjectEx)">
            <summary>
            Returns the label/image selection methods based on the ProjectEx settings.
            </summary>
            <param name="p">Specifies the project.</param>
            <returns>The label/image selection method is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetSelectionMethod">
            <summary>
            Returns the label and image selection method used.
            </summary>
            <returns>A KeyValue containing the Label and Image selection method.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.SetSelectionMethod(System.Nullable{MyCaffe.basecode.IMGDB_LABEL_SELECTION_METHOD},System.Nullable{MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD})">
            <summary>
            Sets the label and image selection methods.
            </summary>
            <param name="lbl">Specifies the label selection method or <i>null</i> to ignore.</param>
            <param name="img">Specifies the image selection method or <i>null</i> to ignore.</param>
        </member>
        <member name="P:MyCaffe.db.image.MyCaffeImageDatabase2.UseTrainingImagesForTesting">
            <summary>
            Get/set whether or not to use training images for the test set (default = false).
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.MyCaffeImageDatabase2.SuperBoostProbability">
            <summary>
            Get/set the super-boost probability which increases/decreases the probability of selecting a boosted image (default = 0).
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.MyCaffeImageDatabase2.SelectFromBoostOnly">
            <summary>
            Returns whether or not to select ONLY from boosted images.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.MyCaffeImageDatabase2.IsEnabled">
            <summary>
            Returns whether or not the image database is enabled.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.Enable(System.Boolean)">
            <summary>
            Sets whether or not the image database is enabled.
            </summary>
            <param name="bEnable"></param>
        </member>
        <member name="P:MyCaffe.db.image.MyCaffeImageDatabase2.IsInitialized">
            <summary>
            Returns whether or not the image database is initialized.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetImagesFromIndex(System.Int32,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="nStartIdx">Specifies a starting index from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <param name="bAttemptDirectLoad">Optionaly, specifies to directly load all images not already loaded.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetImagesFromTime(System.Int32,System.DateTime,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="dtStart">Specifies a starting time from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetImagesFromIndex(System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="lQueryState">Specifies a handle to the query state to use.</param>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="nStartIdx">Specifies a starting index from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <param name="bAttemptDirectLoad">Optionaly, specifies to directly load all images not already loaded.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetImagesFromTime(System.Int64,System.Int32,System.DateTime,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="lQueryState">Specifies a handle to the query state to use.</param>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="dtStart">Specifies a starting time from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetImages(System.Int32,System.Int32[],System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="rgIdx">Specifies an array of indexes to query.</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value - currently, not used in Version 2.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.QueryImage(System.Int64,System.Int32,System.Int32,System.Nullable{MyCaffe.basecode.IMGDB_LABEL_SELECTION_METHOD},System.Nullable{MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Query an image in a given data source.
            </summary>
            <param name="lQueryState">Specifies a handle to the query state to use.</param>
            <param name="nSrcId">Specifies the databse ID of the data source.</param>
            <param name="nIdx">Specifies the image index to query.  Note, the index is only used in non-random image queries.</param>
            <param name="labelSelectionOverride">Optionally, specifies the label selection method override.  The default = null, which directs the method to use the label selection method specified during Initialization.</param>
            <param name="imageSelectionOverride">Optionally, specifies the image selection method override.  The default = null, which directs the method to use the image selection method specified during Initialization.</param>
            <param name="nLabel">Optionally, specifies a label set to use for the image selection.  When specified only images of this label are returned using the image selection method.</param>
            <param name="bLoadDataCriteria">Specifies to load the data criteria data (default = false).</param>
            <param name="bLoadDebugData">Specifies to load the debug data (default = false).</param>
            <returns>The image SimpleDatum is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.QueryImage(System.Int32,System.Int32,System.Nullable{MyCaffe.basecode.IMGDB_LABEL_SELECTION_METHOD},System.Nullable{MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Query an image in a given data source.
            </summary>
            <param name="nSrcId">Specifies the databse ID of the data source.</param>
            <param name="nIdx">Specifies the image index to query.  Note, the index is only used in non-random image queries.</param>
            <param name="labelSelectionOverride">Optionally, specifies the label selection method override.  The default = null, which directs the method to use the label selection method specified during Initialization.</param>
            <param name="imageSelectionOverride">Optionally, specifies the image selection method override.  The default = null, which directs the method to use the image selection method specified during Initialization.</param>
            <param name="nLabel">Optionally, specifies a label set to use for the image selection.  When specified only images of this label are returned using the image selection method.</param>
            <param name="bLoadDataCriteria">Specifies to load the data criteria data (default = false).</param>
            <param name="bLoadDebugData">Specifies to load the debug data (default = false).</param>
            <returns>The image SimpleDatum is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetImage(System.Int32,System.Int32[])">
            <summary>
            Returns the image with a given Raw Image ID.
            </summary>
            <param name="nImageID">Specifies the Raw Image ID.</param>
            <param name="rgSrcId">Specifies a set of source ID's to query from.</param>
            <returns>If found, the SimpleDatum of the Raw Image is returned, otherwise, <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.FindImageIndex(System.Int32,System.DateTime,System.String)">
            <summary>
            Searches fro the image index of an image within a data source matching a DateTime/description pattern.
            </summary>
            <remarks>
            Optionally, images may have a time-stamp and/or description associated with each image.  In such cases
            searching by the time-stamp + description can be useful in some instances.
            </remarks>
            <param name="nSrcId">Specifies the data source ID of the data source to be searched.</param>
            <param name="dt">Specifies the time-stamp to search for.</param>
            <param name="strDescription">Specifies the description to search for.</param>
            <returns>If found the zero-based index of the image is returned, otherwise -1 is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetImageMean(System.Int32)">
            <summary>
            Returns the image mean for a data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>The image mean is returned as a SimpleDatum.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.SetImageMean(System.Int32,MyCaffe.basecode.SimpleDatum)">
            <summary>
            Sets the image mean for a data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <param name="d">Specifies a SimpleDatum containing the image mean.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.QueryImageMeanFromDataset(System.Int32)">
            <summary>
            Returns the image mean for the Training data source of a given data set.
            </summary>
            <param name="nDatasetId">Specifies the data set to use.</param>
            <returns>The image mean is returned as a SimpleDatum.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.QueryImageMeanFromDb(System.Int32)">
            <summary>
            Queries the image mean for a data source from the database on disk.
            </summary>
            <remarks>
            If the image mean does not exist in the database, one is created, saved
            and then returned.
            </remarks>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>The image mean is returned as a SimpleDatum.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.SaveImageMean(System.Int32,MyCaffe.basecode.SimpleDatum,System.Boolean)">
            <summary>
            Saves the image mean to a data source on the database on disk.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <param name="d">Specifies a SimpleDatum containing the image mean.</param>
            <param name="bUpdate">Specifies whether or not to update the mean image.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.QueryImageMean(System.Int32)">
            <summary>
            Query the image mean for a data source and mask out (set to 0) all of the image except for the last columns.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.DoesImageMeanExists(System.Int32)">
            <summary>
            Returns whether or not the image mean exists in the disk-based database for a given data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>Returns <i>true</i> if the image mean exists, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.LoadDatasetByName(System.String,System.String)">
            <summary>
            Load another 'secondary' dataset.
            </summary>
            <remarks>
            The primary dataset should be loaded using one of the 'Initialize' methods.  This method is provided to allow for loading
            multiple datasets.
            </remarks>
            <param name="strDs">Specifies the name of the data set.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>When loaded, the handle to the default query state is returned, otherwise 0 is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.LoadDatasetByID(System.Int32,System.String)">
            <summary>
            Load another 'secondary' dataset.
            </summary>
            <remarks>
            The primary dataset should be loaded using one of the 'Initialize' methods.  This method is provided to allow for loading
            multiple datasets.
            </remarks>
            <param name="nDsId">Specifies the ID of the data set.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>When loaded, the handle to the default query state is returned, otherwise 0 is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.LoadDatasetByID1(System.Int32,System.String)">
            <summary>
            Load another, 'secondary' dataset.
            </summary>
            <remarks>
            The primary dataset should be loaded using one of the 'Initialize' methods.  This method is provided to allow for loading
            multiple datasets.
            </remarks>
            <param name="nDsId">Specifies the ID of the data set.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>When loaded, the handle to the default query state is returned, otherwise 0 is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.LoadDatasetByName1(System.String,System.String)">
            <summary>
            Load another, 'secondary' dataset.
            </summary>
            <remarks>
            The primary dataset should be loaded using one of the 'Initialize' methods.  This method is provided to allow for loading
            multiple datasets.
            </remarks>
            <param name="strDs">Specifies the name of the data set.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>When loaded, the handle to the default query state is returned, otherwise 0 is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.ReloadDataset(System.Int32)">
            <summary>
            Reload a data set.
            </summary>
            <param name="nDsId">Specifies the ID of the data set.</param>
            <returns>If the data set is found, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.UnloadDatasetByName(System.String)">
            <summary>
            The UnloadDataset method removes the dataset specified from memory.
            </summary>
            <param name="strDataset">Specifies the dataset to remove.</param>
            <returns>If found and removed, this function returns <i>true</i>, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.UnloadDatasetById(System.Int32)">
            <summary>
            The UnloadDataset method removes the dataset specified from memory.
            </summary>
            <param name="nDataSetID">Specifies the dataset ID to remove.</param>
            <remarks>Specifiying a dataset ID of -1 directs the UnloadDatasetById to unload ALL datasets loaded.</remarks>
            <returns>If found and removed, this function returns <i>true</i>, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetDatasetLoadedPercentByName(System.String,System.Double@,System.Double@)">
            <summary>
            Returns the percentage that a dataset is loaded into memory.
            </summary>
            <param name="strDataset">Specifies the name of the dataset.</param>
            <param name="dfTraining">Specifies the percent of training images that are loaded.</param>
            <param name="dfTesting">Specifies the percent of testing images that are loaded.</param>
            <returns>The current image load percent for the dataset is returned..</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetDatasetLoadedPercentById(System.Int32,System.Double@,System.Double@)">
            <summary>
            Returns the percentage that a dataset is loaded into memory.
            </summary>
            <param name="nDatasetID">Specifies the ID of the dataset.</param>
            <param name="dfTraining">Specifies the percent of training images that are loaded.</param>
            <param name="dfTesting">Specifies the percent of testing images that are loaded.</param>
            <returns>The current image load percent for the dataset is returned..</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetDatasetById(System.Int32)">
            <summary>
            Returns the DatasetDescriptor for a given data set ID.
            </summary>
            <param name="nDsId">Specifies the data set ID.</param>
            <returns>The dataset Descriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetDatasetByName(System.String)">
            <summary>
            Returns the DatasetDescriptor for a given data set name.
            </summary>
            <param name="strDs">Specifies the data set name.</param>
            <returns>The dataset Descriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetDatasetID(System.String)">
            <summary>
            Returns a data set ID given its name.
            </summary>
            <param name="strDs">Specifies the data set name.</param>
            <returns>The data set ID is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetDatasetName(System.Int32)">
            <summary>
            Returns a data set name given its ID.
            </summary>
            <param name="nDsId">Specifies the data set ID.</param>
            <returns>The data set name is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.ReloadImageSet(System.Int32)">
            <summary>
            Reloads the images of a data source.
            </summary>
            <param name="nSrcID">Specifies the ID of the data source.</param>
            <returns>If the data source is found, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetSourceById(System.Int32)">
            <summary>
            Returns the SourceDescriptor for a given data source ID.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <returns>The SourceDescriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetSourceByName(System.String)">
            <summary>
            Returns the SourceDescriptor for a given data source name.
            </summary>
            <param name="strSrc">Specifies the data source name.</param>
            <returns>The SourceDescriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetSourceID(System.String)">
            <summary>
            Returns a data source ID given its name.
            </summary>
            <param name="strSrc">Specifies the data source name.</param>
            <returns>The data source ID is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetSourceName(System.Int32)">
            <summary>
            Returns a data source name given its ID.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <returns>The data source name is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetLabels(System.Int32)">
            <summary>
            Returns a list of LabelDescriptor%s associated with the labels within a data source.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <returns>The list of LabelDescriptor%s is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetLabelName(System.Int32,System.Int32)">
            <summary>
            Returns the text name of a given label within a data source. 
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="nLabel">Specifies the label.</param>
            <returns>The laben name is returned as a string.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.SetLabelMapping(System.Int32,MyCaffe.basecode.LabelMapping)">
            <summary>
            Sets the label mapping to the database for a given data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <param name="map">Specifies the label mapping to set.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.UpdateLabelMapping(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Updates the label mapping in the database for a given data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <param name="nNewLabel">Specifies a new label.</param>
            <param name="rgOriginalLabels">Specifies the original lables that are mapped to the new label.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.ResetLabels(System.Int32,System.Int32)">
            <summary>
            Resets all labels within a data source, used by a project, to their original labels.
            </summary>
            <param name="nProjectId">Specifies the ID of the project.</param>
            <param name="nSrcId">Specifies the ID of the data source.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.UpdateLabelCounts(System.Int32,System.Int32)">
            <summary>
            Updates the number of images of each label within a data source.
            </summary>
            <param name="nProjectID">Specifies a project ID.</param>
            <param name="nSrcId">Specifies the ID of the data source.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.LoadLabelCounts(System.Int32)">
            <summary>
            Returns a label lookup of counts for a given data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>A dictionary containing label,count pairs is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetLabelCountsAsTextFromSourceId(System.Int32)">
            <summary>
            Returns a string with all label counts for a data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>A string containing all label counts is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.GetLabelCountsAsTextFromSourceName(System.String)">
            <summary>
            Returns a string with all label counts for a data source.
            </summary>
            <param name="strSource">Specifies the name of the data source.</param>
            <returns>A string containing all label counts is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.ResetAllBoosts(System.Int32)">
            <summary>
            Reset all in-memory image boosts.
            </summary>
            <remarks>
            This does not impact the boost setting within the physical database.
            </remarks>
            <param name="nSrcId">Specifies the source ID of the data set to reset.</param>
        </member>
        <member name="F:MyCaffe.db.image.MyCaffeImageDatabase2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MyCaffe.db.image.MyCaffeImageDatabase">
            <summary>
            The MyCaffeImageDatabase provides an enhanced in-memory image database used for quick image retrieval.
            </summary>
            <remarks>
            The MyCaffeImageDatbase manages a set of data sets, where each data sets comprise a pair of data sources: one source 
            for training and another source for testing.  Each data source contains a list of images and a list of label sets
            that point back into the list of images.  This organization allows for quick image selection by image or by label
            set and then by image from within the label set.
            </remarks>
        </member>
        <member name="E:MyCaffe.db.image.MyCaffeImageDatabase.OnCalculateImageMean">
            <summary>
            The OnCalculateImageMean event fires each time the MyCaffeImageDatabase wants to access the image mean for a data set.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.#ctor(MyCaffe.basecode.Log,System.String,System.Int32)">
            <summary>
            The MyCaffeImageDatabase constructor.
            </summary>
            <param name="log">The Log for output.</param>
            <param name="strId">Specifies an identifier for this in memory database instance (default = "default").</param>
            <param name="nSeed">Optionally, specifies a seed for the random number generator (default = null).</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.#ctor(System.ComponentModel.IContainer)">
            <summary>
            The MyCaffeImageDatabase constructor.
            </summary>
            <param name="container">Specifies a container.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetVersion">
            <summary>
            Returns the version of the MyCaffe Image Database being used.
            </summary>
            <returns>Returns the version.</returns>
        </member>
        <member name="P:MyCaffe.db.image.MyCaffeImageDatabase.OutputLog">
            <summary>
            Get/set the output log.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.SetInstance(System.String)">
            <summary>
            Set the database instance to use.
            </summary>
            <param name="strInstance">Specifies the instance name to use in '.\\name' format.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetSelectionMethod(MyCaffe.basecode.SettingsCaffe)">
            <summary>
            Returns the label/image selection methods based on the SettingsCaffe settings.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <returns>The label/image selection method is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetSelectionMethod(MyCaffe.basecode.ProjectEx)">
            <summary>
            Returns the label/image selection methods based on the ProjectEx settings.
            </summary>
            <param name="p">Specifies the project.</param>
            <returns>The label/image selection method is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetSelectionMethod">
            <summary>
            Returns the label and image selection method used.
            </summary>
            <returns>A KeyValue containing the Label and Image selection method.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.SetSelectionMethod(System.Nullable{MyCaffe.basecode.IMGDB_LABEL_SELECTION_METHOD},System.Nullable{MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD})">
            <summary>
            Sets the label and image selection methods.
            </summary>
            <param name="lbl">Specifies the label selection method or <i>null</i> to ignore.</param>
            <param name="img">Specifies the image selection method or <i>null</i> to ignore.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetLoadImageDataCriteria">
            <summary>
            Returns whether or not the image data criteria is loaded with each image.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetLoadImageDebugData">
            <summary>
            Returns whether or not the image debug data is loaded with each image.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.MyCaffeImageDatabase.UseTrainingImagesForTesting">
            <summary>
            Get/set whether or not to use training images for the test set (default = false).
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.MyCaffeImageDatabase.SuperBoostProbability">
            <summary>
            Get/set the super-boost probability which increases/decreases the probability of selecting a boosted image (default = 0).
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.MyCaffeImageDatabase.SelectFromBoostOnly">
            <summary>
            Returns whether or not to select ONLY from boosted images.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.MyCaffeImageDatabase.IsEnabled">
            <summary>
            Returns whether or not the image database is enabled.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.Enable(System.Boolean)">
            <summary>
            Sets whether or not the image database is enabled.
            </summary>
            <param name="bEnable"></param>
        </member>
        <member name="P:MyCaffe.db.image.MyCaffeImageDatabase.IsInitialized">
            <summary>
            Returns whether or not the image database is initialized.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.InitializeWithDsName1(MyCaffe.basecode.SettingsCaffe,System.String,System.String)">
            <summary>
            Initializes the image database.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <param name="strDs">Specifies the data set to load.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.InitializeWithDs1(MyCaffe.basecode.SettingsCaffe,MyCaffe.basecode.descriptors.DatasetDescriptor,System.String)">
            <summary>
            Initializes the image database.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <param name="ds">Specifies the data set to load.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.InitializeWithDsId1(MyCaffe.basecode.SettingsCaffe,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes the image database.
            </summary>
            <param name="s">Specifies the caffe settings.</param>
            <param name="nDataSetID">Specifies the database ID of the data set to load.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <param name="nPadW">Specifies the padding to add to each image width (default = 0).</param>
            <param name="nPadH">Specifies the padding to add to each image height (default = 0).</param>
            <returns>Returns <i>true</i> on success, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.CleanUp(System.Int32,System.Boolean)">
            <summary>
            Releases the image database, and if this is the last instance using the in-memory database, frees all memory used.
            </summary>
            <param name="nDsId">Optionally, specifies the dataset previously loaded.</param>
            <param name="bForce">Optionally, force the cleanup even if other users are using the database.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.LoadNextSet(System.String)">
            <summary>
            When using a <i>Load Limit</i> that is greater than 0, this function loads the next set of images.
            </summary>
            <param name="strEvtCancel">Specifies the name of the Cancel Event to abort loading the images.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.UpdateLabelBoosts(System.Int32,System.Int32)">
            <summary>
            Updates the label boosts for the images based on the label boosts set for the given project.
            </summary>
            <param name="nProjectID">Specifies the project ID in the database.</param>
            <param name="nSrcID">Specifies the data source ID.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.ImageCount(System.Int32)">
            <summary>
            Returns the number of images in a given data source.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <returns>The number of images is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetImageCount(System.Int32,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the number of images in a given data source.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value (Not used for version 1).</param>
            <returns>The number of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetImagesFromIndex(System.Int32,System.Int32,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="nStartIdx">Specifies a starting index from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Not used in version 1, all boost values are treated as inexact (bBoostValIsExact = false).</param>
            <param name="bAttemptDirectLoad">Optionaly, specifies to directly load all images not already loaded.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', and
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetImagesFromTime(System.Int32,System.DateTime,System.Int32,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="dtStart">Specifies a starting time from which the query is to start within the set of images.</param>
            <param name="nQueryCount">Optionally, specifies a number of images to retrieve within the set (default = int.MaxValue).</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Not used in version 1.</param>
            <param name="bBoostValIsExact">Not used in version 1.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetImages(System.Int32,System.Int32[],System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Returns the array of images in the image set, possibly filtered with the filtering parameters.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="rgIdx">Specifies an array of indexes to query.</param>
            <param name="strFilterVal">Optionally, specifies the filter value that the description must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="nBoostVal">Optionally, specifies the boost value that the boost must match (default = <i>null</i>, which ignores this parameter).</param>
            <param name="bBoostValIsExact">Optionally, specifies whether or the boost value (if specified) is to be used literally (exact = true), or as a minimum boost value - not used in Version 1.</param>
            <returns>The list of images is returned.</returns>
            <remarks>When using the 'nBoostValue' negative values are used to test the exact match of the boost value with the absolute value of the 'nBoostValue', ande
            positive values are used to test for boost values that are greater than or equal to the 'nBoostValue'.</remarks>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.Sort(System.Int32,MyCaffe.basecode.IMGDB_SORT)">
            <summary>
            Sort the internal images.
            </summary>
            <param name="nSrcId">Specifies the database ID of the data source.</param>
            <param name="method">Specifies the sorting method.</param>
            <returns>If the sorting is successful, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.CreateDatasetOranizedByTime(System.Int32)">
            <summary>
            Create a dynamic dataset organized by time from a pre-existing dataset.
            </summary>
            <param name="nDsId">Specifies the database ID of the dataset to copy.</param>
            <returns>The dataset ID of the newly created dataset is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.DeleteCreatedDataset(System.Int32)">
            <summary>
            Delete a dataset created with CreateDatasetOrganizedByTime.
            </summary>
            <param name="nDsId">Specifies the dataset ID of the created dataset.</param>
            <returns>If successful, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.DeleteAllCreatedDatasets">
            <summary>
            Delete all datasets created with CreateDatasetOrganizedByTime
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.QueryImage(System.Int32,System.Int32,System.Nullable{MyCaffe.basecode.IMGDB_LABEL_SELECTION_METHOD},System.Nullable{MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD},System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Query an image in a given data source.
            </summary>
            <param name="nSrcId">Specifies the databse ID of the data source.</param>
            <param name="nIdx">Specifies the image index to query.  Note, the index is only used in non-random image queries.</param>
            <param name="labelSelectionOverride">Optionally, specifies the label selection method override.  The default = null, which directs the method to use the label selection method specified during Initialization.</param>
            <param name="imageSelectionOverride">Optionally, specifies the image selection method override.  The default = null, which directs the method to use the image selection method specified during Initialization.</param>
            <param name="nLabel">Optionally, specifies a label set to use for the image selection.  When specified only images of this label are returned using the image selection method.</param>
            <param name="bLoadDataCriteria">Specifies to load the data criteria data (default = false).</param>
            <param name="bLoadDebugData">Specifies to load the debug data (default = false).</param>
            <returns>The image SimpleDatum is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.ResetQuery(System.Int32)">
            <summary>
            Reset the query for the given data set ID.
            </summary>
            <param name="nDsID">Specifies the data set ID whos query indexes are to be reset.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetImage(System.Int32,System.Int32[])">
            <summary>
            Returns the image with a given Raw Image ID.
            </summary>
            <param name="nImageID">Specifies the Raw Image ID.</param>
            <param name="rgSrcId">Specifies a set of source ID's to query from.</param>
            <returns>If found, the SimpleDatum of the Raw Image is returned, otherwise, <i>null</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.ResetAllBoosts(System.Int32)">
            <summary>
            Reset all in-memory image boosts.
            </summary>
            <remarks>
            This does not impact the boost setting within the physical database.
            </remarks>
            <param name="nSrcId">Specifies the source ID of the data set to reset.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetLabels(System.Int32)">
            <summary>
            Returns a list of LabelDescriptor%s associated with the labels within a data source.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <returns>The list of LabelDescriptor%s is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetLabelName(System.Int32,System.Int32)">
            <summary>
            Returns the text name of a given label within a data source. 
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <param name="nLabel">Specifies the label.</param>
            <returns>The laben name is returned as a string.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetDatasetById(System.Int32)">
            <summary>
            Returns the DatasetDescriptor for a given data set ID.
            </summary>
            <param name="nDsId">Specifies the data set ID.</param>
            <returns>The dataset Descriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetDatasetByName(System.String)">
            <summary>
            Returns the DatasetDescriptor for a given data set name.
            </summary>
            <param name="strDs">Specifies the data set name.</param>
            <returns>The dataset Descriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetDatasetID(System.String)">
            <summary>
            Returns a data set ID given its name.
            </summary>
            <param name="strDs">Specifies the data set name.</param>
            <returns>The data set ID is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetDatasetName(System.Int32)">
            <summary>
            Returns a data set name given its ID.
            </summary>
            <param name="nDsId">Specifies the data set ID.</param>
            <returns>The data set name is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetSourceById(System.Int32)">
            <summary>
            Returns the SourceDescriptor for a given data source ID.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <returns>The SourceDescriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetSourceByName(System.String)">
            <summary>
            Returns the SourceDescriptor for a given data source name.
            </summary>
            <param name="strSrc">Specifies the data source name.</param>
            <returns>The SourceDescriptor is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetSourceID(System.String)">
            <summary>
            Returns a data source ID given its name.
            </summary>
            <param name="strSrc">Specifies the data source name.</param>
            <returns>The data source ID is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetSourceName(System.Int32)">
            <summary>
            Returns a data source name given its ID.
            </summary>
            <param name="nSrcId">Specifies the data source ID.</param>
            <returns>The data source name is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.FindImageIndex(System.Int32,System.DateTime,System.String)">
            <summary>
            Searches fro the image index of an image within a data source matching a DateTime/description pattern.
            </summary>
            <remarks>
            Optionally, images may have a time-stamp and/or description associated with each image.  In such cases
            searching by the time-stamp + description can be useful in some instances.
            </remarks>
            <param name="nSrcId">Specifies the data source ID of the data source to be searched.</param>
            <param name="dt">Specifies the time-stamp to search for.</param>
            <param name="strDescription">Specifies the description to search for.</param>
            <returns>If found the zero-based index of the image is returned, otherwise -1 is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetImageMean(System.Int32)">
            <summary>
            Returns the image mean for a data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>The image mean is returned as a SimpleDatum.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.SetImageMean(System.Int32,MyCaffe.basecode.SimpleDatum)">
            <summary>
            Sets the image mean for a data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <param name="d">Specifies a SimpleDatum containing the image mean.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.QueryImageMeanFromDataset(System.Int32)">
            <summary>
            Returns the image mean for the Training data source of a given data set.
            </summary>
            <param name="nDatasetId">Specifies the data set to use.</param>
            <returns>The image mean is returned as a SimpleDatum.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.QueryImageMeanFromDb(System.Int32)">
            <summary>
            Queries the image mean for a data source from the database on disk.
            </summary>
            <remarks>
            If the image mean does not exist in the database, one is created, saved
            and then returned.
            </remarks>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>The image mean is returned as a SimpleDatum.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.SaveImageMean(System.Int32,MyCaffe.basecode.SimpleDatum,System.Boolean)">
            <summary>
            Saves the image mean to a data source on the database on disk.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <param name="d">Specifies a SimpleDatum containing the image mean.</param>
            <param name="bUpdate">Specifies whether or not to update the mean image.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.QueryImageMean(System.Int32)">
            <summary>
            Query the image mean for a data source and mask out (set to 0) all of the image except for the last columns.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.DoesImageMeanExists(System.Int32)">
            <summary>
            Returns whether or not the image mean exists in the disk-based database for a given data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>Returns <i>true</i> if the image mean exists, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.SetLabelMapping(System.Int32,MyCaffe.basecode.LabelMapping)">
            <summary>
            Sets the label mapping to the database for a given data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <param name="map">Specifies the label mapping to set.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.UpdateLabelMapping(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Updates the label mapping in the database for a given data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <param name="nNewLabel">Specifies a new label.</param>
            <param name="rgOriginalLabels">Specifies the original lables that are mapped to the new label.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.ResetLabels(System.Int32,System.Int32)">
            <summary>
            Resets all labels within a data source, used by a project, to their original labels.
            </summary>
            <param name="nProjectId">Specifies the ID of the project.</param>
            <param name="nSrcId">Specifies the ID of the data source.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.DeleteLabelBoosts(System.Int32,System.Int32)">
            <summary>
            Delete all label boosts for a given data source associated with a given project.
            </summary>
            <param name="nProjectId">Specifies the project ID.</param>
            <param name="nSrcId">Specifies the ID of the data source.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.AddLabelBoost(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Add a label boost for a data source associated with a given project.
            </summary>
            <param name="nProjectID">Specifies the project ID.</param>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <param name="nLabel">Specifies the label.</param>
            <param name="dfBoost">Specifies the new boost for the label.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetLabelBoostsAsTextFromProject(System.Int32,System.Int32)">
            <summary>
            Returns the label boosts as a text string for all boosted labels within a data source associated with a given project. 
            </summary>
            <param name="nProjectId">Specifies the project ID.</param>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>The label boosts are returned as a text string.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.UpdateLabelCounts(System.Int32,System.Int32)">
            <summary>
            Updates the number of images of each label within a data source.
            </summary>
            <param name="nProjectID">Specifies a project ID.</param>
            <param name="nSrcId">Specifies the ID of the data source.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.LoadLabelCounts(System.Int32)">
            <summary>
            Returns a label lookup of counts for a given data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>A dictionary containing label,count pairs is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetLabelCountsAsTextFromSourceId(System.Int32)">
            <summary>
            Returns a string with all label counts for a data source.
            </summary>
            <param name="nSrcId">Specifies the ID of the data source.</param>
            <returns>A string containing all label counts is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetLabelCountsAsTextFromSourceName(System.String)">
            <summary>
            Returns a string with all label counts for a data source.
            </summary>
            <param name="strSource">Specifies the name of the data source.</param>
            <returns>A string containing all label counts is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetLabelQueryHitPercentsAsTextFromSourceName(System.String)">
            <summary>
            Returns a string with the query hit percent for each label (e.g. the percentage that each label has been queried).
            </summary>
            <param name="strSource">Specifies the data source who's hit percentages are to be retrieved.</param>
            <returns>A string representing the query hit percentages is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetLabelQueryEpocsAsTextFromSourceName(System.String)">
            <summary>
            Returns a string with the query epoch counts for each label (e.g. the number of times all images with the label have been queried).
            </summary>
            <param name="strSource">Specifies the data source who's query epochs are to be retrieved.</param>
            <returns>A string representing the query epoch counts is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetBoostQueryHitPercentsAsTextFromSourceName(System.String)">
            <summary>
            Returns the percentage of boosted images queried as text.
            </summary>
            <param name="strSource">Specifies the source to query.</param>
            <returns>The query boost percentage hit is returned as text.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.LoadDatasetByName1(System.String,System.String)">
            <summary>
            Load another 'secondary' dataset.
            </summary>
            <remarks>
            The primary dataset should be loaded using one of the 'Initialize' methods.  This method is provided to allow for loading
            multiple datasets.
            </remarks>
            <param name="strDs">Specifies the name of the data set.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>When the dataset is loaded <i>true</i> is returned, otherwise if the dataset is already loaded <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.LoadDatasetByID1(System.Int32,System.String)">
            <summary>
            Load another 'secondary' dataset.
            </summary>
            <remarks>
            The primary dataset should be loaded using one of the 'Initialize' methods.  This method is provided to allow for loading
            multiple datasets.
            </remarks>
            <param name="nDsId">Specifies the ID of the data set.</param>
            <param name="strEvtCancel">Specifies the name of the CancelEvent used to cancel load operations.</param>
            <returns>When the dataset is loaded <i>true</i> is returned, otherwise if the dataset is already loaded <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.ReloadDataset(System.Int32)">
            <summary>
            Reload a data set.
            </summary>
            <param name="nDsId">Specifies the ID of the data set.</param>
            <returns>If the data set is found, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.ReloadImageSet(System.Int32)">
            <summary>
            Reloads the images of a data source.
            </summary>
            <param name="nSrcID">Specifies the ID of the data source.</param>
            <returns>If the data source is found, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.UnloadDatasetByName(System.String)">
            <summary>
            The UnloadDataset method removes the dataset specified from memory.
            </summary>
            <param name="strDataset">Specifies the dataset to remove.</param>
            <returns>If found and removed, this function returns <i>true</i>, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.UnloadDatasetById(System.Int32)">
            <summary>
            The UnloadDataset method removes the dataset specified from memory.
            </summary>
            <param name="nDataSetID">Specifies the dataset ID to remove.</param>
            <remarks>Specifiying a dataset ID of -1 directs the UnloadDatasetById to unload ALL datasets loaded.</remarks>
            <returns>If found and removed, this function returns <i>true</i>, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetDatasetLoadedPercentByName(System.String,System.Double@,System.Double@)">
            <summary>
            Returns the percentage that a dataset is loaded into memory.
            </summary>
            <param name="strDataset">Specifies the name of the dataset.</param>
            <param name="dfTraining">Specifies the percent of training images that are loaded.</param>
            <param name="dfTesting">Specifies the percent of testing images that are loaded.</param>
            <returns>The current image load percent for the dataset is returned..</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.GetDatasetLoadedPercentById(System.Int32,System.Double@,System.Double@)">
            <summary>
            Returns the percentage that a dataset is loaded into memory.
            </summary>
            <param name="nDatasetID">Specifies the ID of the dataset.</param>
            <param name="dfTraining">Specifies the percent of training images that are loaded.</param>
            <param name="dfTesting">Specifies the percent of testing images that are loaded.</param>
            <returns>The current image load percent for the dataset is returned..</returns>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.CreateDatabase(System.String,System.String,System.String)">
            <summary>
            Create the database used by the CaffeImageDatabase.
            </summary>
            <param name="strName">Specifies the name of the database (recommended value = "DNN").</param>
            <param name="strPath">Specifies the file path where the database is to be created.</param>
            <param name="strInstance">Optionally, specifies the SQL Instance.  By default this is <i>null</i>, which sets the instance to the default global instance.</param>
        </member>
        <member name="F:MyCaffe.db.image.MyCaffeImageDatabase.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MyCaffe.db.image.MyCaffeImageDatabase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MyCaffe.db.image.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.CreateDatabase">
             <summary>
               Looks up a localized string similar to USE [master]
            
            CREATE DATABASE [%DBNAME%] ON  PRIMARY 
            ( NAME = N&apos;%DBNAME%&apos;, FILENAME = N&apos;%PATH%\%DBNAME%.mdf&apos; , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
             LOG ON 
            ( NAME = N&apos;%DBNAME%_log&apos;, FILENAME = N&apos;%PATH%\%DBNAME%_log.ldf&apos; , MAXSIZE = 2048GB , FILEGROWTH = 10%)
            
            ALTER DATABASE [%DBNAME%] SET COMPATIBILITY_LEVEL = 100
            
            ALTER DATABASE [%DBNAME%] SET ANSI_NULL_DEFAULT OFF 
            ALTER DATABASE [%DBNAME%] SET ANSI_NULLS OFF 
            ALTER DATABASE [%DBNAME%] SET ANSI_PADDING OFF 
            ALTER DATABASE [%DBNAME%] SE [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.CreateDatasetCreatorsTable">
             <summary>
               Looks up a localized string similar to CREATE TABLE [dbo].[DatasetCreators](
            	[ID] [int] IDENTITY(1,1) NOT NULL,
            	[Name] [varchar](256) NULL,
            	[Path] [varchar](1024) NULL,
             CONSTRAINT [PK_DatasetCreators] PRIMARY KEY CLUSTERED 
            (
            	[ID] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            ) ON [PRIMARY].
             </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.CreateDatasetGroupsTable">
             <summary>
               Looks up a localized string similar to CREATE TABLE [dbo].[DatasetGroups](
            	[ID] [int] IDENTITY(1,1) NOT NULL,
            	[Name] [varchar](128) NULL,
            	[DatasetCreatorID] [int] NULL,
            	[OwnerID] [nvarchar](60) NULL,
             CONSTRAINT [PK_DatasetGroups] PRIMARY KEY CLUSTERED 
            (
            	[ID] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            ) ON [PRIMARY].
             </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.CreateDatasetParametersTable">
             <summary>
               Looks up a localized string similar to CREATE TABLE [dbo].[DatasetParameters](
            	[ID] [int] IDENTITY(1,1) NOT NULL,
            	[Name] [nvarchar](256) NULL,
            	[Value] [nvarchar](1024) NULL,
            	[DatasetID] [int] NULL,
             CONSTRAINT [PK_DatasetParameters] PRIMARY KEY CLUSTERED 
            (
            	[ID] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            ) ON [PRIMARY].
             </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.CreateDatasetsTable">
            <summary>
              Looks up a localized string similar to CREATE TABLE [dbo].[Datasets](
            [ID] [int] IDENTITY(1,1) NOT NULL,
            [Name] [nvarchar](512) NULL,
            [TrainingSourceID] [int] NULL,
            [TestingSourceID] [int] NULL,
            [DatasetGroupID] [int] NULL,
            [DatasetCreatorID] [int] NULL,
            [ModelGroupID] [int] NULL,
            [ImageHeight] [int] NULL,
            [ImageWidth] [int] NULL,
            [ImageChannels] [int] NULL,
            [ImageEncoded] [bit] NULL,
            [TrainingTotal] [int] NULL,
            [TestingTotal] [int] NULL,
            [TestingPercent] [numeric](12, 5) NULL,
            [Relabeled] [bit] NULL,
            [OwnerID] [n [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.CreateLabelBoostsTable">
             <summary>
               Looks up a localized string similar to CREATE TABLE [dbo].[LabelBoosts](
            	[ID] [int] IDENTITY(1,1) NOT NULL,
            	[ProjectID] [int] NULL,
            	[ActiveLabel] [int] NULL,
            	[Boost] [numeric](12, 5) NULL,
            	[SourceID] [int] NULL,
             CONSTRAINT [PK_LabelBoosts] PRIMARY KEY CLUSTERED 
            (
            	[ID] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            ) ON [PRIMARY].
             </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.CreateLabelsTable">
             <summary>
               Looks up a localized string similar to CREATE TABLE [dbo].[Labels](
            	[ID] [int] IDENTITY(1,1) NOT NULL,
            	[Label] [int] NULL,
            	[Name] [nvarchar](128) NULL,
            	[SourceID] [int] NULL,
            	[ImageCount] [int] NULL,
            	[ActiveLabel] [int] NULL,
             CONSTRAINT [PK_Labels] PRIMARY KEY CLUSTERED 
            (
            	[ID] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            ) ON [PRIMARY].
             </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.CreateModelGroupsTable">
             <summary>
               Looks up a localized string similar to CREATE TABLE [dbo].[ModelGroups](
            	[ID] [int] IDENTITY(1,1) NOT NULL,
            	[Name] [varchar](512) NULL,
            	[OwnerID] [nvarchar](60) NULL,
             CONSTRAINT [PK_ModelGroups] PRIMARY KEY CLUSTERED 
            (
            	[ID] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            ) ON [PRIMARY].
             </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.CreateRawImageGroupsTable">
             <summary>
               Looks up a localized string similar to CREATE TABLE [dbo].[RawImageGroups](
            	[ID] [int] IDENTITY(1,1) NOT NULL,
            	[Idx] [int] NULL,
            	[StartDate] [smalldatetime] NULL,
            	[EndDate] [smalldatetime] NULL,
            	[Property1] [numeric](12, 5) NULL,
            	[Property2] [numeric](12, 5) NULL,
            	[Property3] [numeric](12, 5) NULL,
            	[Property4] [numeric](12, 5) NULL,
            	[Property5] [numeric](12, 5) NULL,
            	[Rating] [numeric](12, 5) NULL,
            	[RawData] [image] NULL,
             CONSTRAINT [PK_LevelDBGroups] PRIMARY KEY CLUSTERED 
            (
            	[ID] ASC
            )WITH (PAD_INDEX  = OFF, STATISTI [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.CreateRawImageMeansTable">
             <summary>
               Looks up a localized string similar to CREATE TABLE [dbo].[RawImageMeans](
            	[ID] [int] IDENTITY(1,1) NOT NULL,
            	[Height] [int] NULL,
            	[Width] [int] NULL,
            	[Channels] [int] NULL,
            	[Data] [image] NULL,
            	[Encoded] [bit] NULL,
            	[SourceID] [int] NULL,
             CONSTRAINT [PK_ImageMeans] PRIMARY KEY CLUSTERED 
            (
            	[ID] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY].
             </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.CreateRawImageParametersTable">
             <summary>
               Looks up a localized string similar to CREATE TABLE [dbo].[RawImageParameters](
            	[ID] [int] IDENTITY(1,1) NOT NULL,
            	[Name] [nvarchar](256) NULL,
            	[Value] [image] NULL,
            	[SourceID] [int] NULL,
            	[RawImageID] [int] NULL,
            	[TextValue] [nvarchar](1024) NULL,
             CONSTRAINT [PK_RawImageParameters] PRIMARY KEY CLUSTERED 
            (
            	[ID] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY].
             </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.CreateRawImageResultsTable">
             <summary>
               Looks up a localized string similar to CREATE TABLE [dbo].[RawImageResults](
            	[ID] [int] IDENTITY(1,1) NOT NULL,
            	[Idx] [int] NULL,
            	[Label] [int] NULL,
            	[ResultCount] [int] NULL,
            	[Results] [image] NULL,
            	[SourceID] [int] NULL,
            	[TimeStamp] [datetime] NULL,
             CONSTRAINT [PK_RawImageResults] PRIMARY KEY CLUSTERED 
            (
            	[ID] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY].
             </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.CreateRawImagesTable">
            <summary>
              Looks up a localized string similar to CREATE TABLE [dbo].[RawImages](
            [ID] [int] IDENTITY(1,1) NOT NULL,
            [Height] [int] NULL,
            [Width] [int] NULL,
            [Channels] [int] NULL,
            [Data] [image] NULL,
            [DebugData] [image] NULL,
            [TimeStamp] [datetime] NULL,
            [Encoded] [bit] NULL,
            [SourceID] [int] NULL,
            [Idx] [int] NULL,
            [GroupID] [int] NULL,
            [OriginalBoost] [smallint] NULL,
            [ActiveBoost] [smallint] NULL,
            [AutoLabel] [bit] NULL,
            [VirtualID] [int] NULL,
            [RawData] [image] NULL,
            [DataCriteria] [image] NULL,
            [OriginalLabel] [in [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.CreateSourceParametersTable">
             <summary>
               Looks up a localized string similar to CREATE TABLE [dbo].[SourceParameters](
            	[ID] [int] IDENTITY(1,1) NOT NULL,
            	[Name] [nvarchar](256) NULL,
            	[Value] [nvarchar](1024) NULL,
            	[SourceID] [int] NULL,
             CONSTRAINT [PK_SourceParameters] PRIMARY KEY CLUSTERED 
            (
            	[ID] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
            ) ON [PRIMARY].
             </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.CreateSourcesTable">
             <summary>
               Looks up a localized string similar to CREATE TABLE [dbo].[Sources](
            	[ID] [int] IDENTITY(1,1) NOT NULL,
            	[Name] [nvarchar](512) NULL,
            	[ImageHeight] [int] NULL,
            	[ImageWidth] [int] NULL,
            	[ImageChannels] [int] NULL,
            	[ImageEncoded] [bit] NULL,
            	[ImageCount] [int] NULL,
            	[OwnerID] [nvarchar](60) NULL,
            	[SaveImagesToFile] [bit] NULL,
            	[CopyOfSourceID] [int] NULL,
             CONSTRAINT [PK_Sources] PRIMARY KEY CLUSTERED 
            (
            	[ID] ASC
            )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_ [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:MyCaffe.db.image.Properties.Resources.QueryDatabaseExists">
             <summary>
               Looks up a localized string similar to IF (EXISTS (SELECT name 
            FROM master.dbo.sysdatabases 
            WHERE (&apos;[&apos; + name + &apos;]&apos; = &apos;%DBNAME%&apos; 
            OR name = &apos;%DBNAME%&apos;)))
            SELECT(1)
            ELSE
            SELECT(0).
             </summary>
        </member>
        <member name="T:MyCaffe.db.image.QueryState">
            <summary>
            Initially the QueryState is copied from the MasterIndexes and during each query is altered by removing items already observed.  Once empty, each Index within
            the QueryState is then refreshed with the corresponding MasterIndexes ensuring that all images are hit over time.
            </summary>
            <remarks>
            QueryStates may also be ordered which is usedful in SEQUENTIAL querries.
            </remarks>
        </member>
        <member name="M:MyCaffe.db.image.QueryState.#ctor(MyCaffe.db.image.MasterIndexes,System.Boolean,System.Boolean,MyCaffe.basecode.IMGDB_SORT)">
            <summary>
            The constructor.
            </summary>
            <param name="master">Specifies the MasterIndexes to copy.</param>
            <param name="bUseUniqueLabelIndexes">Optionally, specifies to use unique label indexes which is slightly slower, but ensures each label is hit per epoch equally (default = true).</param>
            <param name="bUseUniqueImageIndexes">Optionally, specifies to use unique image indexes which is slightly slower, but ensures each image is hit per epoch (default = true).</param>
            <param name="sort">Optionally, specifies the ordering to use on the indexes (default = BYIDX).</param>
        </member>
        <member name="M:MyCaffe.db.image.QueryState.UpdateStats(MyCaffe.basecode.SimpleDatum)">
            <summary>
            Update the label stats.
            </summary>
            <param name="sd">Specifies the recently queried simple datum.</param>
        </member>
        <member name="M:MyCaffe.db.image.QueryState.GetNextLabel(MyCaffe.basecode.IMGDB_LABEL_SELECTION_METHOD)">
            <summary>
            Returns the next label in the Index set selected based on the selection criteria.
            </summary>
            <param name="lblSel">Specifies the label selection method used.</param>
            <returns>The next label index is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.QueryState.GetNextLabel(MyCaffe.db.image.Index.SELECTION_TYPE,System.Boolean)">
            <summary>
            Returns the next label in the Index set selected based on the selection criteria.
            </summary>
            <param name="type">Specifies the selection type (e.g. RANDOM, SEQUENTIAL).</param>
            <param name="bBoosted">Optionally, specifies to use label sets of boosted images (default = false).</param>
            <returns>The next label index is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.QueryState.GetNextImage(MyCaffe.basecode.IMGDB_IMAGE_SELECTION_METHOD,System.Nullable{System.Int32},System.Int32)">
            <summary>
            Returns the next image in the Index set based on the selection criteria.
            </summary>
            <param name="imgSel">Specifies the image selection method used.</param>
            <param name="nLabel">Optionally, specifies a label (default = null).</param>
            <param name="nDirectIdx">Optionally, specifies to query the image at this index (only applies when type = DIRECT).</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.db.image.QueryState.GetNextImage(MyCaffe.db.image.Index.SELECTION_TYPE,System.Nullable{System.Int32},System.Boolean,System.Int32)">
            <summary>
            Returns the next image in the Index set based on the selection criteria.
            </summary>
            <param name="type">Specifies the selection type (e.g. RANDOM, SEQUENTIAL).</param>
            <param name="nLabel">Optionally, specifies a label (default = null).</param>
            <param name="bBoosted">Optionally, specifies to query boosted images (default = false).</param>
            <param name="nDirectIdx">Optionally, specifies to query the image at this index (only applies when type = DIRECT).</param>
            <returns>The next image index is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.QueryState.GetQueryLabelCounts">
            <summary>
            Returns the query label counts.
            </summary>
            <returns>The query label counts are returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.QueryState.GetQueryBoostHitPercentsAsText">
            <summary>
            Returns the number of times each boosted image vs. non boosted images are hit.
            </summary>
            <returns>The percentage of non-boosted vs. boosted images is returned as {non-boosted%, boosted%}.</returns>
        </member>
        <member name="M:MyCaffe.db.image.QueryState.GetQueryLabelHitPercentsAsText">
            <summary>
            Returns the number of times each label is hit.
            </summary>
            <returns>The percentage of times each label hit occurs is returned in label order (e.g. label 0%, label 1%,... label n%).</returns>
        </member>
        <member name="M:MyCaffe.db.image.QueryState.GetQueryLabelEpochsAsText">
            <summary>
            Returns the number of epochs each label has experienced.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyCaffe.db.image.QueryStateCollection">
            <summary>
            The QueryStateCollection manages all query states used by matching the QueryState handles with the QueryStates where each handle points to both the training set query state and testing set query state.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.QueryStateCollection.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.QueryStateCollection.Dispose">
            <summary>
            Releases all resources.
            </summary>
        </member>
        <member name="M:MyCaffe.db.image.QueryStateCollection.CreateNewState(MyCaffe.db.image.QueryState,MyCaffe.db.image.QueryState)">
            <summary>
            Create a new QueryState handle based on the QueryStates passed to this function.
            </summary>
            <param name="training">Specifies the training QueryState used on the training data source.</param>
            <param name="testing">Specifies the testing QueryState used on the testing data source.</param>
            <returns>The QueryState handle is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.QueryStateCollection.FreeQueryState(System.Int64)">
            <summary>
            Free the QueryStates associated with the handle and remove it from the handle list.
            </summary>
            <param name="lHandle">Specifies the QueryState handle.</param>
            <returns>If found and freed, this method returns <i>true</i>, otherwise <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.db.image.QueryStateCollection.GetTrainingState(System.Int64)">
            <summary>
            Returns the QueryState used with thet Training data source.
            </summary>
            <param name="lHandle">Specifies the QueryState handle.</param>
            <returns>The training set QueryState is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.QueryStateCollection.GetTestingState(System.Int64)">
            <summary>
            Returns the QueryState used with thet Testing data source.
            </summary>
            <param name="lHandle">Specifies the QueryState handle.</param>
            <returns>The testing set QueryState is returned.</returns>
        </member>
        <member name="M:MyCaffe.db.image.QueryStateCollection.ReIndexTraining(System.Collections.Generic.List{MyCaffe.db.image.DbItem})">
            <summary>
            Relabels the training QueryState based on the DbItems.
            </summary>
            <param name="rgItems">Specifies the DbItems to use to relabel the QueryState.</param>
        </member>
        <member name="M:MyCaffe.db.image.QueryStateCollection.ReIndexTesting(System.Collections.Generic.List{MyCaffe.db.image.DbItem})">
            <summary>
            Relabels the testing QueryState based on the DbItems.
            </summary>
            <param name="rgItems">Specifies the DbItems to use to relabel the QueryState.</param>
        </member>
        <member name="T:SqlServerTypes.Utilities">
            <summary>
            Utility methods related to CLR Types for SQL Server 
            </summary>
        </member>
        <member name="M:SqlServerTypes.Utilities.LoadNativeAssemblies(System.String)">
            <summary>
            Loads the required native assemblies for the current architecture (x86 or x64)
            </summary>
            <param name="rootApplicationPath">
            Root path of the current application. Use Server.MapPath(".") for ASP.NET applications
            and AppDomain.CurrentDomain.BaseDirectory for desktop applications.
            </param>
        </member>
    </members>
</doc>
