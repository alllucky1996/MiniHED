<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyCaffe.trainers</name>
    </assembly>
    <members>
        <member name="T:MyCaffe.trainers.dqn.c51.st.TrainerC51`1">
            <summary>
            The TrainerC51 implements the C51-DQN algorithm as described by Bellemare et al., Google Dopamine RainboAgent and 'flyyufelix'
            </summary>
            <remarks>
            @see [A Distributional Perspective on Reinforcement Learning](https://arxiv.org/abs/1707.06887), Marc G. Bellemare, Will Dabney, Remi Munos, 2017, arXiv:1707.06887
            @see [Dopamine: A Research Framework for Deep Reinforcement Learning](https://arxiv.org/abs/1812.06110) Pablo Samuel Castro, Subhodeep Moitra, Carles Gelada, Saurabh Kumar, and Marc G. Bellemare, 2018, Google Brain
            @see [Github:google/dopamine](https://github.com/google/dopamine), Google, 2018, license Apache 2.0 (https://github.com/google/dopamine/blob/master/LICENSE)
            @see [Github:openai/baselines](https://github.com/openai/baselines/blob/master/baselines/deepq/replay_buffer.py), OpenAI, 2018, license MIT (https://github.com/openai/baselines/blob/master/LICENSE)
            @see [GitHub:flyyufelix/C51-DDQN-Keras](https://github.com/flyyufelix/C51-DDQN-Keras/blob/master/c51_ddqn.py) 2017, MIT License (https://github.com/flyyufelix/C51-DDQN-Keras/blob/master/LICENSE)
            @see [GitHub:Kyushik/DRL](https://github.com/Kyushik/DRL/blob/master/07_C51.py), Kyushik, 2019
            @see [Github:higgsfield/RL-Adventure](https://github.com/higgsfield/RL-Adventure), higgsfield, 2018
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.TrainerC51`1.#ctor(MyCaffe.MyCaffeControl{`0},MyCaffe.basecode.PropertySet,MyCaffe.basecode.CryptoRandom,MyCaffe.trainers.IxTrainerCallback)">
            <summary>
            The constructor.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use for learning and prediction.</param>
            <param name="properties">Specifies the property set containing the key/value pairs of property settings.</param>
            <param name="random">Specifies a Random number generator used for random selection.</param>
            <param name="icallback">Specifies the callback for parent notifications and queries.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.TrainerC51`1.Dispose">
            <summary>
            Release all resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.TrainerC51`1.Initialize">
            <summary>
            Initialize the trainer.
            </summary>
            <returns>Returns <i>true</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.TrainerC51`1.Shutdown(System.Int32)">
            <summary>
            Shutdown the trainer.
            </summary>
            <param name="nWait">Specifies a wait in ms. for the shutdown to complete.</param>
            <returns>Returns <i>true</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.TrainerC51`1.RunOne(System.Int32)">
            <summary>
            Run a single cycle on the environment after the delay.
            </summary>
            <param name="nDelay">Specifies a delay to wait before running.</param>
            <returns>The results of the run containing the action are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.TrainerC51`1.Run(System.Int32,System.String,System.String@)">
            <summary>
            Run a set of iterations and return the resuts.
            </summary>
            <param name="nN">Specifies the number of samples to run.</param>
            <param name="strRunProperties">Optionally specifies properties to use when running.</param>
            <param name="type">Returns the data type contained in the byte stream.</param>
            <returns>The results of the run containing the action are returned as a byte stream.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.TrainerC51`1.Test(System.Int32,MyCaffe.trainers.ITERATOR_TYPE)">
            <summary>
            Run the test cycle - currently this is not implemented.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <returns>A value of <i>true</i> is returned when handled, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.TrainerC51`1.Train(System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            Train the network using a modified PG training algorithm optimized for GPU use.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <param name="step">Specifies the stepping mode to use (when debugging).</param>
            <returns>A value of <i>true</i> is returned when handled, <i>false</i> otherwise.</returns>
        </member>
        <member name="T:MyCaffe.trainers.dqn.c51.st.DqnAgent`1">
            <summary>
            The DqnAgent both builds episodes from the envrionment and trains on them using the Brain.
            </summary>
            <typeparam name="T">Specifies the base type, which should be the same base type used for MyCaffe.  This type is either <i>double</i> or <i>float</i>.</typeparam>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.DqnAgent`1.#ctor(MyCaffe.trainers.IxTrainerCallback,MyCaffe.MyCaffeControl{`0},MyCaffe.basecode.PropertySet,MyCaffe.basecode.CryptoRandom,MyCaffe.basecode.Phase)">
            <summary>
            The constructor.
            </summary>
            <param name="icallback">Specifies the callback used for update notifications sent to the parent.</param>
            <param name="mycaffe">Specifies the instance of MyCaffe with the open project.</param>
            <param name="properties">Specifies the properties passed into the trainer.</param>
            <param name="random">Specifies the random number generator used.</param>
            <param name="phase">Specifies the phase of the internal network to use.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.DqnAgent`1.Dispose">
            <summary>
            Release all resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.DqnAgent`1.Run(System.Int32,System.String@)">
            <summary>
            Run the action on a set number of iterations and return the results with no training.
            </summary>
            <param name="nIterations">Specifies the iterations to run.</param>
            <param name="type">Specifies the type of data returned in the byte stream.</param>
            <returns>A byte stream of the results is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.DqnAgent`1.Run(MyCaffe.basecode.Phase,System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            The Run method provides the main loop that performs the following steps:
            1.) get state
            2.) build experience
            3.) create policy gradients
            4.) train on experiences
            </summary>
            <param name="phase">Specifies the phae.</param>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <param name="step">Specifies the training step to take, if any.  This is only used when debugging.</param>
        </member>
        <member name="T:MyCaffe.trainers.dqn.c51.st.Brain`1">
            <summary>
            The Brain uses the instance of MyCaffe (e.g. the open project) to run new actions and train the network.
            </summary>
            <typeparam name="T">Specifies the base type, which should be the same base type used for MyCaffe.  This type is either <i>double</i> or <i>float</i>.</typeparam>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.Brain`1.#ctor(MyCaffe.MyCaffeControl{`0},MyCaffe.basecode.PropertySet,MyCaffe.basecode.CryptoRandom,MyCaffe.basecode.Phase)">
            <summary>
            The constructor.
            </summary>
            <param name="mycaffe">Specifies the instance of MyCaffe assoiated with the open project - when using more than one Brain, this is the master project.</param>
            <param name="properties">Specifies the properties passed into the trainer.</param>
            <param name="random">Specifies the random number generator used.</param>
            <param name="phase">Specifies the phase under which to run.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.Brain`1.Dispose">
            <summary>
            Release all resources used by the Brain.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.Brain`1.getDataArgs(MyCaffe.basecode.Phase,System.Int32)">
            <summary>
            Returns the GetDataArgs used to retrieve new data from the envrionment implemented by derived parent trainer.
            </summary>
            <param name="phase">Specifies the phase under which to get the data.</param>
            <param name="nAction">Specifies the action to run, or -1 to reset the environment.</param>
            <returns>A new GetDataArgs is returned.</returns>
        </member>
        <member name="P:MyCaffe.trainers.dqn.c51.st.Brain`1.FrameStack">
            <summary>
            Specifies the number of frames per X value.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.dqn.c51.st.Brain`1.BatchSize">
            <summary>
            Returns the batch size defined by the model.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.dqn.c51.st.Brain`1.Log">
            <summary>
            Returns the output log.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.dqn.c51.st.Brain`1.Cancel">
            <summary>
            Returns the Cancel event used to cancel  all MyCaffe tasks.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.Brain`1.Preprocess(MyCaffe.trainers.StateBase,System.Boolean,System.Boolean@,System.Boolean)">
            <summary>
            Preprocesses the data.
            </summary>
            <param name="s">Specifies the state and data to use.</param>
            <param name="bUseRawInput">Specifies whether or not to use the raw data <i>true</i>, or a difference of the current and previous data <i>false</i> (default = <i>false</i>).</param>
            <param name="bDifferent">Returns whether or not the current state data is different from the previous - note this is only set when NOT using raw input, otherwise <i>true</i> is always returned.</param>
            <param name="bReset">Optionally, specifies to reset the last sd to null.</param>
            <returns>The preprocessed data is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.Brain`1.act(MyCaffe.basecode.SimpleDatum,MyCaffe.basecode.SimpleDatum,System.Int32)">
            <summary>
            Returns the action from running the model.  The action returned is either randomly selected (when using Exploration),
            or calculated via a forward pass (when using Exploitation).
            </summary>
            <param name="sd">Specifies the data to run the model on.</param>
            <param name="sdClip">Specifies the clip data (if any exits).</param>
            <param name="nActionCount">Returns the number of actions in the action set.</param>
            <returns>The action value is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.Brain`1.GetModelUpdated">
            <summary>
            Get whether or not the model has been udpated or not.
            </summary>
            <returns>If the model has been updated from the last call to this function, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.Brain`1.UpdateTargetModel">
            <summary>
            The UpdateTargetModel transfers the trained layers from the active Net to the target Net.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.Brain`1.Train(System.Int32,MyCaffe.trainers.dqn.c51.st.MemoryCollection,System.Int32)">
            <summary>
            Train the model at the current iteration.
            </summary>
            <param name="nIteration">Specifies the current iteration.</param>
            <param name="rgSamples">Contains the samples to train the model with.</param>
            <param name="nActionCount">Specifies the number of actions in the action set.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.Brain`1.m_memLoss_ProjectDistribution(System.Object,MyCaffe.layers.MemoryLossLayerGetLossArgs{`0})">
            <summary>
            Calculate the gradients between the target m_loss and actual p_loss.
            </summary>
            <param name="sender">Specifies the sender.</param>
            <param name="e">Specifies the arguments.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.Brain`1.m_memLoss_OnGetLoss(System.Object,MyCaffe.layers.MemoryLossLayerGetLossArgs{`0})">
            <summary>
            Calculate the target m_loss
            </summary>
            <param name="sender">Specifies the sender.</param>
            <param name="e">Specifies the arguments.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.c51.st.Brain`1.OnOverlay(MyCaffe.trainers.OverlayArgs)">
            <summary>
            The OnOverlay callback is called just before displaying the gym image, thus allowing for an overlay to be applied to the image.
            </summary>
            <param name="e">Specifies the arguments to the callback which contains the original display image.</param>
        </member>
        <member name="T:MyCaffe.trainers.dqn.noisy.simple.TrainerNoisyDqn`1">
            <summary>
            The TrainerNoisyDqn implements the Noisy-DQN algorithm as described by Google Dopamine DNQAgent, Gheshlagi et al. and inspired by 'higgsfield'
            </summary>
            <remarks>
            @see [Noisy Networks for Exploration](https://arxiv.org/abs/1706.10295), Meire Fortunato, Mohammad Gheshlaghi Azar, Bilal Piot, Jacob Menick, Ian Osband, Alex Graves, Vlad Mnih, Remi Munos, Demis Hassabis, Olivier Pietquin, Charles Blundell, Shane Legg, arXiv:1706.10295
            @see [Prioritized Experience Replay](https://arxiv.org/abs/1511.05952), Tom Schaul, John Quan, Ioannis Antonoglou, David Silver, 2016
            @see [Dopamine: A Research Framework for Deep Reinforcement Learning](https://arxiv.org/abs/1812.06110) Pablo Samuel Castro, Subhodeep Moitra, Carles Gelada, Saurabh Kumar, and Marc G. Bellemare, 2018, Google Brain
            @see [Github:google/dopamine](https://github.com/google/dopamine), Google, 2018, license Apache 2.0 (https://github.com/google/dopamine/blob/master/LICENSE)
            @see [GitHub:Kaixhin/NoisyNet-A3C](https://github.com/Kaixhin/NoisyNet-A3C), Kaixhin 2018, license MIT (https://github.com/Kaixhin/NoisyNet-A3C/blob/master/LICENSE.md)
            @see [Github:openai/baselines](https://github.com/openai/baselines/blob/master/baselines/deepq/replay_buffer.py), OpenAI, 2018, license MIT (https://github.com/openai/baselines/blob/master/LICENSE)
            @see [GitHub:Kyushik/DRL](https://github.com/Kyushik/DRL/blob/master/06_NoisyNet_DQN.py), Kyushik, 2019
            @see [Github:higgsfield/RL-Adventure](https://github.com/higgsfield/RL-Adventure), higgsfield, 2018
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.TrainerNoisyDqn`1.#ctor(MyCaffe.MyCaffeControl{`0},MyCaffe.basecode.PropertySet,MyCaffe.basecode.CryptoRandom,MyCaffe.trainers.IxTrainerCallback)">
            <summary>
            The constructor.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use for learning and prediction.</param>
            <param name="properties">Specifies the property set containing the key/value pairs of property settings.</param>
            <param name="random">Specifies a Random number generator used for random selection.</param>
            <param name="icallback">Specifies the callback for parent notifications and queries.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.TrainerNoisyDqn`1.Dispose">
            <summary>
            Release all resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.TrainerNoisyDqn`1.Initialize">
            <summary>
            Initialize the trainer.
            </summary>
            <returns>Returns <i>true</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.TrainerNoisyDqn`1.Shutdown(System.Int32)">
            <summary>
            Shutdown the trainer.
            </summary>
            <param name="nWait">Specifies a wait in ms. for the shutdown to complete.</param>
            <returns>Returns <i>true</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.TrainerNoisyDqn`1.RunOne(System.Int32)">
            <summary>
            Run a single cycle on the environment after the delay.
            </summary>
            <param name="nDelay">Specifies a delay to wait before running.</param>
            <returns>The results of the run containing the action are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.TrainerNoisyDqn`1.Run(System.Int32,System.String,System.String@)">
            <summary>
            Run a set of iterations and return the resuts.
            </summary>
            <param name="nN">Specifies the number of samples to run.</param>
            <param name="strRunProperties">Optionally specifies properties to use when running.</param>
            <param name="type">Returns the data type contained in the byte stream.</param>
            <returns>The results of the run containing the action are returned as a byte stream.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.TrainerNoisyDqn`1.Test(System.Int32,MyCaffe.trainers.ITERATOR_TYPE)">
            <summary>
            Run the test cycle - currently this is not implemented.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <returns>A value of <i>true</i> is returned when handled, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.TrainerNoisyDqn`1.Train(System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            Train the network using a modified PG training algorithm optimized for GPU use.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <param name="step">Specifies the stepping mode to use (when debugging).</param>
            <returns>A value of <i>true</i> is returned when handled, <i>false</i> otherwise.</returns>
        </member>
        <member name="T:MyCaffe.trainers.dqn.noisy.simple.DqnAgent`1">
            <summary>
            The DqnAgent both builds episodes from the envrionment and trains on them using the Brain.
            </summary>
            <typeparam name="T">Specifies the base type, which should be the same base type used for MyCaffe.  This type is either <i>double</i> or <i>float</i>.</typeparam>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.DqnAgent`1.#ctor(MyCaffe.trainers.IxTrainerCallback,MyCaffe.MyCaffeControl{`0},MyCaffe.basecode.PropertySet,MyCaffe.basecode.CryptoRandom,MyCaffe.basecode.Phase)">
            <summary>
            The constructor.
            </summary>
            <param name="icallback">Specifies the callback used for update notifications sent to the parent.</param>
            <param name="mycaffe">Specifies the instance of MyCaffe with the open project.</param>
            <param name="properties">Specifies the properties passed into the trainer.</param>
            <param name="random">Specifies the random number generator used.</param>
            <param name="phase">Specifies the phase of the internal network to use.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.DqnAgent`1.Dispose">
            <summary>
            Release all resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.DqnAgent`1.Run(System.Int32,System.String@)">
            <summary>
            Run the action on a set number of iterations and return the results with no training.
            </summary>
            <param name="nIterations">Specifies the iterations to run.</param>
            <param name="type">Specifies the type of data returned in the byte stream.</param>
            <returns>A byte stream of the results is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.DqnAgent`1.Run(MyCaffe.basecode.Phase,System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            The Run method provides the main loop that performs the following steps:
            1.) get state
            2.) build experience
            3.) create policy gradients
            4.) train on experiences
            </summary>
            <param name="phase">Specifies the phae.</param>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <param name="step">Specifies the training step to take, if any.  This is only used when debugging.</param>
        </member>
        <member name="T:MyCaffe.trainers.dqn.noisy.simple.Brain`1">
            <summary>
            The Brain uses the instance of MyCaffe (e.g. the open project) to run new actions and train the network.
            </summary>
            <typeparam name="T">Specifies the base type, which should be the same base type used for MyCaffe.  This type is either <i>double</i> or <i>float</i>.</typeparam>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.Brain`1.#ctor(MyCaffe.MyCaffeControl{`0},MyCaffe.basecode.PropertySet,MyCaffe.basecode.CryptoRandom,MyCaffe.basecode.Phase)">
            <summary>
            The constructor.
            </summary>
            <param name="mycaffe">Specifies the instance of MyCaffe assoiated with the open project - when using more than one Brain, this is the master project.</param>
            <param name="properties">Specifies the properties passed into the trainer.</param>
            <param name="random">Specifies the random number generator used.</param>
            <param name="phase">Specifies the phase under which to run.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.Brain`1.Dispose">
            <summary>
            Release all resources used by the Brain.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.Brain`1.getDataArgs(MyCaffe.basecode.Phase,System.Int32)">
            <summary>
            Returns the GetDataArgs used to retrieve new data from the envrionment implemented by derived parent trainer.
            </summary>
            <param name="phase">Specifies the phase under which to get the data.</param>
            <param name="nAction">Specifies the action to run, or -1 to reset the environment.</param>
            <returns>A new GetDataArgs is returned.</returns>
        </member>
        <member name="P:MyCaffe.trainers.dqn.noisy.simple.Brain`1.BatchSize">
            <summary>
            Returns the batch size defined by the model.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.dqn.noisy.simple.Brain`1.Log">
            <summary>
            Returns the output log.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.dqn.noisy.simple.Brain`1.Cancel">
            <summary>
            Returns the Cancel event used to cancel  all MyCaffe tasks.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.Brain`1.Preprocess(MyCaffe.trainers.StateBase,System.Boolean,System.Boolean@,System.Boolean)">
            <summary>
            Preprocesses the data.
            </summary>
            <param name="s">Specifies the state and data to use.</param>
            <param name="bUseRawInput">Specifies whether or not to use the raw data <i>true</i>, or a difference of the current and previous data <i>false</i> (default = <i>false</i>).</param>
            <param name="bDifferent">Returns whether or not the current state data is different from the previous - note this is only set when NOT using raw input, otherwise <i>true</i> is always returned.</param>
            <param name="bReset">Optionally, specifies to reset the last sd to null.</param>
            <returns>The preprocessed data is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.Brain`1.act(MyCaffe.basecode.SimpleDatum,MyCaffe.basecode.SimpleDatum,System.Int32)">
            <summary>
            Returns the action from running the model.  The action returned is either randomly selected (when using Exploration),
            or calculated via a forward pass (when using Exploitation).
            </summary>
            <param name="sd">Specifies the data to run the model on.</param>
            <param name="sdClip">Specifies the clip data (if any exits).</param>
            <param name="nActionCount">Returns the number of actions in the action set.</param>
            <returns>The action value is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.Brain`1.GetModelUpdated">
            <summary>
            Get whether or not the model has been udpated or not.
            </summary>
            <returns>If the model has been updated from the last call to this function, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.Brain`1.UpdateTargetModel">
            <summary>
            The UpdateTargetModel transfers the trained layers from the active Net to the target Net.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.Brain`1.Train(System.Int32,MyCaffe.trainers.common.MemoryCollection,System.Int32)">
            <summary>
            Train the model at the current iteration.
            </summary>
            <param name="nIteration">Specifies the current iteration.</param>
            <param name="rgSamples">Contains the samples to train the model with along with the priorities associated with the samples.</param>
            <param name="nActionCount">Specifies the number of actions in the action set.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.Brain`1.m_memLoss_ComputeTdLoss(System.Object,MyCaffe.layers.MemoryLossLayerGetLossArgs{`0})">
            <summary>
            Calculate the gradients between the target m_loss and actual p_loss.
            </summary>
            <param name="sender">Specifies the sender.</param>
            <param name="e">Specifies the arguments.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.Brain`1.OnOverlay(MyCaffe.trainers.OverlayArgs)">
            <summary>
            The OnOverlay callback is called just before displaying the gym image, thus allowing for an overlay to be applied to the image.
            </summary>
            <param name="e">Specifies the arguments to the callback which contains the original display image.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.Brain`1.SaveWeights(System.String)">
            <summary>
            Save the weight and bias values to file.
            </summary>
            <param name="strFile">Specifies the file to save the weights to.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.simple.Brain`1.LoadWeights(System.String)">
            <summary>
            Load the weight and bias values from file.
            </summary>
            <param name="strFile">Specifies the file to load the weights from.</param>
        </member>
        <member name="T:MyCaffe.trainers.dqn.noisy.st.TrainerNoisyDqn`1">
            <summary>
            The TrainerNoisyDqn implements the Noisy-DQN algorithm as described by Google Dopamine DQNAgent, Gheshlagi et al., and inspired by 'Kyushik' and 'higgsfield'
            </summary>
            <remarks>
            @see [Noisy Networks for Exploration](https://arxiv.org/abs/1706.10295), Meire Fortunato, Mohammad Gheshlaghi Azar, Bilal Piot, Jacob Menick, Ian Osband, Alex Graves, Vlad Mnih, Remi Munos, Demis Hassabis, Olivier Pietquin, Charles Blundell, Shane Legg, arXiv:1706.10295
            @see [Prioritized Experience Replay](https://arxiv.org/abs/1511.05952), Tom Schaul, John Quan, Ioannis Antonoglou, David Silver, 2016
            @see [Dopamine: A Research Framework for Deep Reinforcement Learning](https://arxiv.org/abs/1812.06110) Pablo Samuel Castro, Subhodeep Moitra, Carles Gelada, Saurabh Kumar, and Marc G. Bellemare, 2018, Google Brain
            @see [Github:google/dopamine](https://github.com/google/dopamine), Google, 2018, license Apache 2.0 (https://github.com/google/dopamine/blob/master/LICENSE)
            @see [GitHub:Kaixhin/NoisyNet-A3C](https://github.com/Kaixhin/NoisyNet-A3C), Kaixhin 2018, license MIT (https://github.com/Kaixhin/NoisyNet-A3C/blob/master/LICENSE.md)
            @see [Github:openai/baselines](https://github.com/openai/baselines/blob/master/baselines/deepq/replay_buffer.py), OpenAI, 2018, license MIT (https://github.com/openai/baselines/blob/master/LICENSE)
            @see [GitHub:Kyushik/DRL](https://github.com/Kyushik/DRL/blob/master/06_NoisyNet_DQN.py), Kyushik, 2019
            @see [Github:higgsfield/RL-Adventure](https://github.com/higgsfield/RL-Adventure), higgsfield, 2018
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.TrainerNoisyDqn`1.#ctor(MyCaffe.MyCaffeControl{`0},MyCaffe.basecode.PropertySet,MyCaffe.basecode.CryptoRandom,MyCaffe.trainers.IxTrainerCallback)">
            <summary>
            The constructor.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use for learning and prediction.</param>
            <param name="properties">Specifies the property set containing the key/value pairs of property settings.</param>
            <param name="random">Specifies a Random number generator used for random selection.</param>
            <param name="icallback">Specifies the callback for parent notifications and queries.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.TrainerNoisyDqn`1.Dispose">
            <summary>
            Release all resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.TrainerNoisyDqn`1.Initialize">
            <summary>
            Initialize the trainer.
            </summary>
            <returns>Returns <i>true</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.TrainerNoisyDqn`1.Shutdown(System.Int32)">
            <summary>
            Shutdown the trainer.
            </summary>
            <param name="nWait">Specifies a wait in ms. for the shutdown to complete.</param>
            <returns>Returns <i>true</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.TrainerNoisyDqn`1.RunOne(System.Int32)">
            <summary>
            Run a single cycle on the environment after the delay.
            </summary>
            <param name="nDelay">Specifies a delay to wait before running.</param>
            <returns>The results of the run containing the action are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.TrainerNoisyDqn`1.Run(System.Int32,System.String,System.String@)">
            <summary>
            Run a set of iterations and return the resuts.
            </summary>
            <param name="nN">Specifies the number of samples to run.</param>
            <param name="strRunProperties">Optionally specifies properties to use when running.</param>
            <param name="type">Returns the data type contained in the byte stream.</param>
            <returns>The results of the run containing the action are returned as a byte stream.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.TrainerNoisyDqn`1.Test(System.Int32,MyCaffe.trainers.ITERATOR_TYPE)">
            <summary>
            Run the test cycle - currently this is not implemented.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <returns>A value of <i>true</i> is returned when handled, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.TrainerNoisyDqn`1.Train(System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            Train the network using a modified PG training algorithm optimized for GPU use.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <param name="step">Specifies the stepping mode to use (when debugging).</param>
            <returns>A value of <i>true</i> is returned when handled, <i>false</i> otherwise.</returns>
        </member>
        <member name="T:MyCaffe.trainers.dqn.noisy.st.DqnAgent`1">
            <summary>
            The DqnAgent both builds episodes from the envrionment and trains on them using the Brain.
            </summary>
            <typeparam name="T">Specifies the base type, which should be the same base type used for MyCaffe.  This type is either <i>double</i> or <i>float</i>.</typeparam>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.DqnAgent`1.#ctor(MyCaffe.trainers.IxTrainerCallback,MyCaffe.MyCaffeControl{`0},MyCaffe.basecode.PropertySet,MyCaffe.basecode.CryptoRandom,MyCaffe.basecode.Phase)">
            <summary>
            The constructor.
            </summary>
            <param name="icallback">Specifies the callback used for update notifications sent to the parent.</param>
            <param name="mycaffe">Specifies the instance of MyCaffe with the open project.</param>
            <param name="properties">Specifies the properties passed into the trainer.</param>
            <param name="random">Specifies the random number generator used.</param>
            <param name="phase">Specifies the phase of the internal network to use.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.DqnAgent`1.Dispose">
            <summary>
            Release all resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.DqnAgent`1.Run(System.Int32,System.String@)">
            <summary>
            Run the action on a set number of iterations and return the results with no training.
            </summary>
            <param name="nIterations">Specifies the iterations to run.</param>
            <param name="type">Specifies the type of data returned in the byte stream.</param>
            <returns>A byte stream of the results is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.DqnAgent`1.Run(MyCaffe.basecode.Phase,System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            The Run method provides the main loop that performs the following steps:
            1.) get state
            2.) build experience
            3.) create policy gradients
            4.) train on experiences
            </summary>
            <param name="phase">Specifies the phae.</param>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <param name="step">Specifies the training step to take, if any.  This is only used when debugging.</param>
        </member>
        <member name="T:MyCaffe.trainers.dqn.noisy.st.Brain`1">
            <summary>
            The Brain uses the instance of MyCaffe (e.g. the open project) to run new actions and train the network.
            </summary>
            <typeparam name="T">Specifies the base type, which should be the same base type used for MyCaffe.  This type is either <i>double</i> or <i>float</i>.</typeparam>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.Brain`1.#ctor(MyCaffe.MyCaffeControl{`0},MyCaffe.basecode.PropertySet,MyCaffe.basecode.CryptoRandom,MyCaffe.basecode.Phase)">
            <summary>
            The constructor.
            </summary>
            <param name="mycaffe">Specifies the instance of MyCaffe assoiated with the open project - when using more than one Brain, this is the master project.</param>
            <param name="properties">Specifies the properties passed into the trainer.</param>
            <param name="random">Specifies the random number generator used.</param>
            <param name="phase">Specifies the phase under which to run.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.Brain`1.Dispose">
            <summary>
            Release all resources used by the Brain.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.Brain`1.getDataArgs(MyCaffe.basecode.Phase,System.Int32)">
            <summary>
            Returns the GetDataArgs used to retrieve new data from the envrionment implemented by derived parent trainer.
            </summary>
            <param name="phase">Specifies the phase under which to get the data.</param>
            <param name="nAction">Specifies the action to run, or -1 to reset the environment.</param>
            <returns>A new GetDataArgs is returned.</returns>
        </member>
        <member name="P:MyCaffe.trainers.dqn.noisy.st.Brain`1.FrameStack">
            <summary>
            Specifies the number of frames per X value.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.dqn.noisy.st.Brain`1.BatchSize">
            <summary>
            Returns the batch size defined by the model.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.dqn.noisy.st.Brain`1.Log">
            <summary>
            Returns the output log.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.dqn.noisy.st.Brain`1.Cancel">
            <summary>
            Returns the Cancel event used to cancel  all MyCaffe tasks.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.Brain`1.Preprocess(MyCaffe.trainers.StateBase,System.Boolean,System.Boolean@,System.Boolean)">
            <summary>
            Preprocesses the data.
            </summary>
            <param name="s">Specifies the state and data to use.</param>
            <param name="bUseRawInput">Specifies whether or not to use the raw data <i>true</i>, or a difference of the current and previous data <i>false</i> (default = <i>false</i>).</param>
            <param name="bDifferent">Returns whether or not the current state data is different from the previous - note this is only set when NOT using raw input, otherwise <i>true</i> is always returned.</param>
            <param name="bReset">Optionally, specifies to reset the last sd to null.</param>
            <returns>The preprocessed data is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.Brain`1.act(MyCaffe.basecode.SimpleDatum,MyCaffe.basecode.SimpleDatum,System.Int32)">
            <summary>
            Returns the action from running the model.  The action returned is either randomly selected (when using Exploration),
            or calculated via a forward pass (when using Exploitation).
            </summary>
            <param name="sd">Specifies the data to run the model on.</param>
            <param name="sdClip">Specifies the clip data (if any exits).</param>
            <param name="nActionCount">Returns the number of actions in the action set.</param>
            <returns>The action value is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.Brain`1.GetModelUpdated">
            <summary>
            Get whether or not the model has been udpated or not.
            </summary>
            <returns>If the model has been updated from the last call to this function, <i>true</i> is returned, otherwise <i>false</i> is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.Brain`1.UpdateTargetModel">
            <summary>
            The UpdateTargetModel transfers the trained layers from the active Net to the target Net.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.Brain`1.Train(System.Int32,MyCaffe.trainers.common.MemoryCollection,System.Int32)">
            <summary>
            Train the model at the current iteration.
            </summary>
            <param name="nIteration">Specifies the current iteration.</param>
            <param name="rgSamples">Contains the samples to train the model with.</param>
            <param name="nActionCount">Specifies the number of actions in the action set.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.Brain`1.m_memLoss_ComputeTdLoss(System.Object,MyCaffe.layers.MemoryLossLayerGetLossArgs{`0})">
            <summary>
            Calculate the gradients between the target m_loss and actual p_loss.
            </summary>
            <param name="sender">Specifies the sender.</param>
            <param name="e">Specifies the arguments.</param>
        </member>
        <member name="M:MyCaffe.trainers.dqn.noisy.st.Brain`1.OnOverlay(MyCaffe.trainers.OverlayArgs)">
            <summary>
            The OnOverlay callback is called just before displaying the gym image, thus allowing for an overlay to be applied to the image.
            </summary>
            <param name="e">Specifies the arguments to the callback which contains the original display image.</param>
        </member>
        <member name="T:MyCaffe.trainers.common.FileMemoryCollection">
            <summary>
            The FileMemoryCollection is used during debugging to load from and save to file.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.common.FileMemoryCollection.#ctor(System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="nMax">Specifies the maximum number of items.</param>
            <param name="bPreLoad">Pre-load the data from file.</param>
            <param name="bSaveOnCleanup">Save the memory items on cleanup.</param>
            <param name="strFile">Specifies the name of the file to load from or save to.</param>
        </member>
        <member name="M:MyCaffe.trainers.common.FileMemoryCollection.CleanUp">
            <summary>
            Complete any final processing.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.common.FileMemoryCollection.Count">
            <summary>
            Returns the number of items in the collection.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.common.FileMemoryCollection.Add(MyCaffe.trainers.common.MemoryItem)">
            <summary>
            Add a new item to the collection.
            </summary>
            <param name="mi">Specifies the item to add.</param>
        </member>
        <member name="M:MyCaffe.trainers.common.FileMemoryCollection.GetSamples(MyCaffe.basecode.CryptoRandom,System.Int32,System.Double)">
            <summary>
            Return a batch of items.
            </summary>
            <param name="random">Specifies the random number generator.</param>
            <param name="nCount">Specifies the number of items to sample.</param>
            <param name="dfBeta">Not used.</param>
            <returns>The array of items is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.common.FileMemoryCollection.Update(MyCaffe.trainers.common.MemoryCollection)">
            <summary>
            Update - does nothing.
            </summary>
            <param name="rgSamples">Specifies the list of samples.</param>
        </member>
        <member name="T:MyCaffe.trainers.common.MEMTYPE">
            <summary>
            Specifies the type of memory collection to use.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.common.MEMTYPE.RANDOM">
            <summary>
            Specifies the randomly sampled memory collection.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.common.MEMTYPE.PRIORITY">
            <summary>
            Specifies the prioritized sampled memory collection.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.common.MEMTYPE.LOADING">
            <summary>
            Specifies a memory collection loaded from file (used during debugging).
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.common.MEMTYPE.SAVING">
            <summary>
            Specifies a randomly sampled memory collection that saves to file (used during debugging).
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.common.IMemoryCollection">
            <summary>
            The IMemoryCollection interface is implemented by all memory collection types.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.common.IMemoryCollection.Add(MyCaffe.trainers.common.MemoryItem)">
            <summary>
            Add a new item to the memory collection.
            </summary>
            <param name="m">Specifies the memory item to add.</param>
        </member>
        <member name="M:MyCaffe.trainers.common.IMemoryCollection.GetSamples(MyCaffe.basecode.CryptoRandom,System.Int32,System.Double)">
            <summary>
            Retrieve a set of samples from the collection.
            </summary>
            <param name="random">Specifies the random number generator.</param>
            <param name="nCount">Specifies the number of samples to retrieve.</param>
            <param name="dfBeta">Specifies a value used by the prioritized memory collection.</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.trainers.common.IMemoryCollection.Update(MyCaffe.trainers.common.MemoryCollection)">
            <summary>
            Updates the memory collection - currently only used by the Prioritized memory collection to update its priorities.
            </summary>
            <param name="rgSamples">Specifies the samples with updated priorities (if used).</param>
        </member>
        <member name="P:MyCaffe.trainers.common.IMemoryCollection.Count">
            <summary>
            Returns the number of items in the memory collection.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.common.IMemoryCollection.CleanUp">
            <summary>
            Performs final clean-up tasks.
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.common.MemoryCollectionFactory">
            <summary>
            The MemoryCollectionFactory is used to create various memory collection types.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryCollectionFactory.CreateMemory(MyCaffe.trainers.common.MEMTYPE,System.Int32,System.Single,System.String)">
            <summary>
            CreateMemory creates the memory collection type based on the MEMTYPE parameter.
            </summary>
            <param name="type">Specifies the memory collection type to create.</param>
            <param name="nMax">Specifies the maximum count for the memory collection.</param>
            <param name="fAlpha">Specifies the alpha value used with prioritized memory collections.</param>
            <param name="strFile">Specifies the input/output file used with save and load memory collections.</param>
            <returns>The IMemoryCollection interface implemented by the memory collection created is returned.</returns>
        </member>
        <member name="T:MyCaffe.trainers.common.RandomMemoryCollection">
            <summary>
            The RandomMemoryCollection is used to randomly sample the collection of items.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.common.RandomMemoryCollection.#ctor(System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="nMax">Specifies the maximum number of items.</param>
        </member>
        <member name="M:MyCaffe.trainers.common.RandomMemoryCollection.CleanUp">
            <summary>
            Complete any final processing.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.common.RandomMemoryCollection.Count">
            <summary>
            Returns the number of items in the collection.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.common.RandomMemoryCollection.Add(MyCaffe.trainers.common.MemoryItem)">
            <summary>
            Add a new item to the collection.
            </summary>
            <param name="m">Specifies the item to add.</param>
        </member>
        <member name="M:MyCaffe.trainers.common.RandomMemoryCollection.GetSamples(MyCaffe.basecode.CryptoRandom,System.Int32,System.Double)">
            <summary>
            Return a batch of items.
            </summary>
            <param name="random">Specifies the random number generator.</param>
            <param name="nCount">Specifies the number of items to sample.</param>
            <param name="dfBeta">Not used.</param>
            <returns>The random array of items is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.common.RandomMemoryCollection.Update(MyCaffe.trainers.common.MemoryCollection)">
            <summary>
            Update - does nothing.
            </summary>
            <param name="rgSamples">Specifies the list of samples.</param>
        </member>
        <member name="T:MyCaffe.trainers.common.MemoryCollection">
            <summary>
            The memory collection stores a set of memory items.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.common.MemoryCollection.m_rgItems">
            <summary>
            Specifies the memory item list.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.common.MemoryCollection.m_nNextIdx">
            <summary>
            Specifies the next available index in the rolling list.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryCollection.#ctor(System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="nMax">Specifies the maximum number of items to store.</param>
        </member>
        <member name="P:MyCaffe.trainers.common.MemoryCollection.Indexes">
            <summary>
            Get/set the indexes associated with the collection (if any).
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.common.MemoryCollection.Priorities">
            <summary>
            Get/set the priorities associated with the collection (if any).
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.common.MemoryCollection.NextIndex">
            <summary>
            Returns the next index.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.common.MemoryCollection.Count">
            <summary>
            Returns the current count of items.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.common.MemoryCollection.Item(System.Int32)">
            <summary>
            Get/set the memory item at a given index.
            </summary>
            <param name="nIdx">Specifies the index of the item to access.</param>
            <returns>Returns the memory item at an index.</returns>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryCollection.Add(MyCaffe.trainers.common.MemoryItem)">
            <summary>
            Adds a new memory item to the array of items and if at capacity, removes an item.
            </summary>
            <param name="item">Specifies the memory item to add.</param>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryCollection.GetRandomSamples(MyCaffe.basecode.CryptoRandom,System.Int32)">
            <summary>
            Retrieves a random sample of items from the list.
            </summary>
            <param name="random">Specifies the random number generator to use.</param>
            <param name="nCount">Specifies the number of items to retrieve.</param>
            <returns>The sampled items are returned in a new MemoryCollection.</returns>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryCollection.GetNextState">
            <summary>
            Returns the list of Next State items.
            </summary>
            <returns>The state items are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryCollection.GetNextStateData">
            <summary>
            Returns the list of data items associated with the next state.
            </summary>
            <returns>The data items are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryCollection.GetNextStateClip">
            <summary>
            Returns the list of clip items associated with the next state.
            </summary>
            <returns>The data items are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryCollection.GetCurrentStateData">
            <summary>
            Returns the list of data items associated with the current state.
            </summary>
            <returns>The data items are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryCollection.GetCurrentStateClip">
            <summary>
            Returns the list of clip items associated with the current state.
            </summary>
            <returns>The data items are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryCollection.GetActionsAsOneHotVector(System.Int32)">
            <summary>
            Returns the action items as a set of one-hot vectors.
            </summary>
            <param name="nActionCount">Specifies the action count.</param>
            <returns>The one-hot vectors are returned as an array.</returns>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryCollection.GetInvertedDoneAsOneHotVector">
            <summary>
            Returns the inverted done (1 - done) values as a one-hot vector.
            </summary>
            <returns>The one-hot vectors are returned as an array.</returns>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryCollection.GetRewards">
            <summary>
            Returns the rewards as a vector.
            </summary>
            <returns>The rewards are returned as an array.</returns>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryCollection.Save(System.String)">
            <summary>
            Save the memory items to file.
            </summary>
            <param name="strFile">Specifies the file name.</param>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryCollection.Load(System.String)">
            <summary>
            Load all memory items from file.
            </summary>
            <param name="strFile">Specifies the file containing the memory items.</param>
        </member>
        <member name="T:MyCaffe.trainers.common.MemoryItem">
            <summary>
            The MemoryItem stores the information about a given cycle.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryItem.#ctor(MyCaffe.trainers.StateBase,MyCaffe.basecode.SimpleDatum,System.Int32,MyCaffe.trainers.StateBase,MyCaffe.basecode.SimpleDatum,System.Double,System.Boolean,System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="currentState">Specifies the current state.</param>
            <param name="currentData">Specifies the current data.</param>
            <param name="nAction">Specifies the action.</param>
            <param name="nextState">Specifies the next state.</param>
            <param name="nextData">Specifies the next data.</param>
            <param name="dfReward">Specifies the reward.</param>
            <param name="bTerminated">Specifies whether or not this is a termination state or not.</param>
            <param name="nIteration">Specifies the iteration.</param>
            <param name="nEpisode">Specifies the episode.</param>
        </member>
        <member name="P:MyCaffe.trainers.common.MemoryItem.IsTerminated">
            <summary>
            Returns the termination status of the next state.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.common.MemoryItem.Reward">
            <summary>
            Returns the reward of the state transition.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.common.MemoryItem.CurrentState">
            <summary>
            Returns the current state.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.common.MemoryItem.NextState">
            <summary>
            Returns the next state.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.common.MemoryItem.CurrentData">
            <summary>
            Returns the data associated with the current state.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.common.MemoryItem.NextData">
            <summary>
            Returns the data associated with the next state.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.common.MemoryItem.Action">
            <summary>
            Returns the action.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.common.MemoryItem.Iteration">
            <summary>
            Returns the iteration of the state transition.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.common.MemoryItem.Episode">
            <summary>
            Returns the episode of the state transition.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.common.MemoryItem.ToString">
            <summary>
            Returns a string representation of the state transition.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyCaffe.trainers.common.PrioritizedMemoryCollection">
            <summary>
            The PrioritizedMemoryCollection provides a sampling based on prioritizations.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.common.PrioritizedMemoryCollection.#ctor(System.Int32,System.Single)">
            <summary>
            The constructor.
            </summary>
            <param name="nMax">Specifies the maximum number of items in the collection.</param>
            <param name="fAlpha">Specifies how much prioritization is used (0 = no prioritization, 1 = full prioritization).</param>
        </member>
        <member name="M:MyCaffe.trainers.common.PrioritizedMemoryCollection.CleanUp">
            <summary>
            Complete any final processing.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.common.PrioritizedMemoryCollection.Count">
            <summary>
            Returns the number of items in the collection.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.common.PrioritizedMemoryCollection.Add(MyCaffe.trainers.common.MemoryItem)">
            <summary>
            Add a new item to the collection.
            </summary>
            <param name="m">Specifies the item to add.</param>
        </member>
        <member name="M:MyCaffe.trainers.common.PrioritizedMemoryCollection.GetSamples(MyCaffe.basecode.CryptoRandom,System.Int32,System.Double)">
            <summary>
            Return a batch of items.
            </summary>
            <param name="random">Specifies the random number generator.</param>
            <param name="nCount">Specifies the number of items to sample.</param>
            <param name="dfBeta">Specifies the degree to use importance weights (0 = no corrections, 1 = full corrections).</param>
            <returns>The prioritized array of items is returned along with the weights and indexes.</returns>
        </member>
        <member name="M:MyCaffe.trainers.common.PrioritizedMemoryCollection.Update(MyCaffe.trainers.common.MemoryCollection)">
            <summary>
            Update the priorities of sampled transitions.
            </summary>
            <remarks>
            Sets priority of transitions at index rgIdx[i] in buffer to priorities[i].
            </remarks>
            <param name="rgSamples">Specifies the list of samples with updated priorities.</param>
        </member>
        <member name="T:MyCaffe.trainers.common.SegmentTree">
            <summary>
            Segment tree data structure
            </summary>
            <remarks>
            The segment tree can be used as a regular array, but with two important differences:
            
              a.) Setting an item's value is slightly slower: O(lg capacity) instead of O(1).
              b.) User has access to an efficient 'reduce' operation which reduces the 'operation' 
                  over a contiguous subsequence of items in the array.
            
            @see [Wikipedia: Segment tree](https://en.wikipedia.org/wiki/Segment_tree)
            @see [GitHub: openai/baselines](https://github.com/openai/baselines/blob/master/baselines/deepq/replay_buffer.py) 2018
            @see [GitHub: higgsfield/RL-Adventure](https://github.com/higgsfield/RL-Adventure/blob/master/common/replay_buffer.py) 2018
            </remarks>
        </member>
        <member name="F:MyCaffe.trainers.common.SegmentTree.m_nCapacity">
            <summary>
            Specifies the capacity of the segment tree.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.common.SegmentTree.m_op">
            <summary>
            Specifies the operation to perform when reducing the tree.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.common.SegmentTree.m_rgfValues">
            <summary>
            Specifies the data of the tree.
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.common.SegmentTree.OPERATION">
            <summary>
            Specifies the operations used during the reduction.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.common.SegmentTree.OPERATION.SUM">
            <summary>
            Sum the two elements together.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.common.SegmentTree.OPERATION.MIN">
            <summary>
            Return the minimum of the two elements.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.common.SegmentTree.#ctor(System.Int32,MyCaffe.trainers.common.SegmentTree.OPERATION,System.Single)">
            <summary>
            The constructor.
            </summary>
            <param name="nCapacity">Specifies the total size of the array - must be a power of two.</param>
            <param name="oper">Specifies the operation for combining elements (e.g. sum, min)</param>
            <param name="fNeutralElement">Specifies the nautral element for the operation above (e.g. float.MaxValue for min and 0 for sum).</param>
        </member>
        <member name="M:MyCaffe.trainers.common.SegmentTree.reduce(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Returns result of applying self.operation to a contiguous subsequence of the array.
            operation(arr[start], operation(ar[start+1], operation(..., arr[end])))
            </summary>
            <param name="nStart">Beginning of the subsequence.</param>
            <param name="nEnd">End of the subsequence</param>
            <returns></returns>
        </member>
        <member name="P:MyCaffe.trainers.common.SegmentTree.Item(System.Int32)">
            <summary>
            Element accessor to get and set items.
            </summary>
            <param name="nIdx">Specifies the index of the item to access.</param>
            <returns>The item at the specified index is returned.</returns>
        </member>
        <member name="T:MyCaffe.trainers.common.SumSegmentTree">
            <summary>
            The SumSegmentTree provides a sum reduction of the items within the array.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.common.SumSegmentTree.#ctor(System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="nCapacity">Specifies the total size of the array - must be a power of two.</param>
        </member>
        <member name="M:MyCaffe.trainers.common.SumSegmentTree.sum(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Returns arr[start] + ... + arr[end]
            </summary>
            <param name="nStart">Beginning of the subsequence.</param>
            <param name="nEnd">End of the subsequence</param>
            <returns>Returns the sum of all items in the array.</returns>
        </member>
        <member name="M:MyCaffe.trainers.common.SumSegmentTree.find_prefixsum_idx(System.Double)">
            <summary>
            Finds the highest indes 'i' in the array such that sum(arr[0] + arr[1] + ... + arr[i-1]) less than or equal to the 'fPrefixSum'
            </summary>
            <remarks>
            If array values are probabilities, this function allows to sample indexes according to the discrete probability efficiently.
            </remarks>
            <param name="fPrefixSum">Specifies the upper bound on the sum of array prefix.</param>
            <returns>The highest index satisfying the prefixsum constraint is returned.</returns>
        </member>
        <member name="T:MyCaffe.trainers.common.MinSegmentTree">
            <summary>
            The MinSegmentTree performs a reduction over the array and returns the minimum value.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.common.MinSegmentTree.#ctor(System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="nCapacity">Specifies the total size of the array - must be a power of two.</param>
        </member>
        <member name="M:MyCaffe.trainers.common.MinSegmentTree.min(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Returns the minimum element in the array.
            </summary>
            <param name="nStart">Beginning of the subsequence.</param>
            <param name="nEnd">End of the subsequence</param>
            <returns>The minimum item in the sequence is returned.</returns>
        </member>
        <member name="T:MyCaffe.trainers.ApplyUpdateArgs`1">
            <summary>
            The ApplyUpdateArgs is passed to the OnApplyUpdates event.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyCaffe.trainers.ApplyUpdateArgs`1.#ctor(System.Int32,MyCaffe.MyCaffeControl{`0})">
            <summary>
            The constructor.
            </summary>
            <param name="nIteration">Specifies the iteration from which the gradients are to be applied.</param>
            <param name="mycaffeWorker">Specifies the MyCaffe worker instance whos gradients are to be applied.</param>
        </member>
        <member name="P:MyCaffe.trainers.ApplyUpdateArgs`1.MyCaffeWorker">
            <summary>
            Returns the MyCaffe worker instance whos gradients are to be applied.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.ApplyUpdateArgs`1.Iteration">
            <summary>
            Returns the iteration from which the gradients are to be applied.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.ApplyUpdateArgs`1.LearningRate">
            <summary>
            Returns the learning rate at the time the gradients were applied.
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.WaitArgs">
            <summary>
            The WaitArgs is passed to the OnWait event.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.WaitArgs.#ctor(System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="nWait">The amount of time to wait in milliseconds.</param>
        </member>
        <member name="P:MyCaffe.trainers.WaitArgs.Wait">
            <summary>
            Returns the amount of time to wait in milliseconds.
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.InitializeArgs">
            <summary>
            The InitializeArgs is passed to the OnInitialize event.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.InitializeArgs.#ctor(System.ComponentModel.Component)">
            <summary>
            The constructor.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl used.</param>
        </member>
        <member name="P:MyCaffe.trainers.InitializeArgs.OutputLog">
            <summary>
            Returns the output log.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.InitializeArgs.MyCaffe">
            <summary>
            Returns the MyCaffeControl used.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.InitializeArgs.OriginalDatasetID">
            <summary>
            Returns the original Dataset ID of the open project held by the MyCaffeControl.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.InitializeArgs.DatasetID">
            <summary>
            Get/set a new Dataset ID which is actually used. 
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.GetStatusArgs">
            <summary>
            The GetStatusArgs is passed to the OnGetStatus event.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.GetStatusArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="nIndex">Specifies the index of the caller.</param>
            <param name="nFrames">Specifies the total number of frames across all agents.</param>
            <param name="nMaxFrames">Specifies the maximum number of frames across all agents.</param>
            <param name="nIteration">Specifies the number of iterations run.</param>
            <param name="dfTotalReward">Specifies the total reward.</param>
            <param name="dfReward">Specifies the immediate reward for the current episode.</param>
            <param name="dfExplorationRate">Specifies the current exploration rate.</param>
            <param name="dfOptimalCoeff">Specifies the current optimal selection coefficient.</param>
            <param name="dfLoss">Specifies the loss.</param>
            <param name="dfLearningRate">Specifies the learning rate.</param>
            <param name="bModelUpdated">Specifies whether or not the model has been updated.</param>
        </member>
        <member name="P:MyCaffe.trainers.GetStatusArgs.Index">
            <summary>
            Returns the index of the caller.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetStatusArgs.Iteration">
            <summary>
            Returns the number of iterations (steps) run.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetStatusArgs.NewFrameCount">
            <summary>
            Get/set the new frame count.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetStatusArgs.Frames">
            <summary>
            Returns the total frame count across all agents.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetStatusArgs.MaxFrames">
            <summary>
            Returns the maximum frame count.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetStatusArgs.ModelUpdated">
            <summary>
            Returns whether or not the model has been updated or not.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetStatusArgs.Loss">
            <summary>
            Returns the loss value.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetStatusArgs.LearningRate">
            <summary>
            Returns the current learning rate.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetStatusArgs.TotalReward">
            <summary>
            Returns the total rewards.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetStatusArgs.Reward">
            <summary>
            Returns the immediate reward for the current episode.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetStatusArgs.ExplorationRate">
            <summary>
            Returns the current exploration rate.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetStatusArgs.OptimalSelectionCoefficient">
            <summary>
            Returns the optimal selection coefficient.
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.ConvertOutputArgs">
            <summary>
            The ConvertOutputArgs is passed to the OnConvertOutput event.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.ConvertOutputArgs.#ctor(System.Int32,System.Single[])">
            <summary>
            The constructor.
            </summary>
            <param name="nN">Specifies the number of outputs.</param>
            <param name="rgOutput">Specifies the output to convert.</param>
        </member>
        <member name="P:MyCaffe.trainers.ConvertOutputArgs.ResultCount">
            <summary>
            Returns the number of results.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.ConvertOutputArgs.Output">
            <summary>
            Specifies the output to convert.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.ConvertOutputArgs.RawType">
            <summary>
            Specifies the type of the raw output byte stream.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.ConvertOutputArgs.RawOutput">
            <summary>
            Specifies the raw output byte stream.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.ConvertOutputArgs.SetRawOutput(System.Byte[],System.String)">
            <summary>
            Sets the raw output byte stream and type.
            </summary>
            <param name="rgData">Specifies the raw output byte stream.</param>
            <param name="type">Specifies the raw output type.</param>
        </member>
        <member name="T:MyCaffe.trainers.OverlayArgs">
            <summary>
            The OverlayArgs is passed ot the OnOverlay event, optionally fired just before displaying a gym image.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.OverlayArgs.#ctor(System.Drawing.Bitmap)">
            <summary>
            The constructor.
            </summary>
            <param name="bmp">Specifies the display image.</param>
        </member>
        <member name="P:MyCaffe.trainers.OverlayArgs.DisplayImage">
            <summary>
            Get/set the display image.
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.GetDataArgs">
            <summary>
            The GetDataArgs is passed to the OnGetData event to retrieve data.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.GetDataArgs.#ctor(MyCaffe.basecode.Phase,System.Int32,System.ComponentModel.Component,MyCaffe.basecode.Log,MyCaffe.basecode.CancelEvent,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,MyCaffe.trainers.IxTrainerGetDataCallback)">
            <summary>
            The constructor.
            </summary>
            <param name="phase">Specifies the phase under which to get the data.</param>
            <param name="nIdx">Specifies the index of the thread.</param>
            <param name="mycaffe">Specifies the MyCaffeControl used.</param>
            <param name="log">Specifies the output log to use.</param>
            <param name="evtCancel">Specifies the cancel event.</param>
            <param name="bReset">Specifies to reset the environment.</param>
            <param name="nAction">Specifies the action to run.  If less than zero this parameter is ignored.</param>
            <param name="bAllowUi">Optionally, specifies whether or not to allow the user interface.</param>
            <param name="bGetLabel">Optionally, specifies to get the label in addition to the data.</param>
            <param name="bBatchMode">Optionally, specifies to get the data in batch mode (default = false).</param>
            <param name="iOnGetData">Optionally, specifies the callback called after rendering the gym output, yet just before displaying it.</param>
        </member>
        <member name="P:MyCaffe.trainers.GetDataArgs.GetDataCallback">
            <summary>
            Returns the OnGetData Callback called just after rendering yet before displaying the gym image.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetDataArgs.ActivePhase">
            <summary>
            Returns the active phase under which to get the data.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetDataArgs.DataReady">
            <summary>
            Returns the data ready event that is set once the data has been retrieved.  This field is only
            used when using the OnGetDataAsync event.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetDataArgs.Index">
            <summary>
            Returns the index of the thread asking for the gym.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetDataArgs.GetLabel">
            <summary>
            Returns whether or not to retrieve the label in addition to the data.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetDataArgs.OutputLog">
            <summary>
            Returns the output log for general output.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetDataArgs.CancelEvent">
            <summary>
            Returns the cancel event.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetDataArgs.State">
            <summary>
            Specifies the state data of the observations.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetDataArgs.Action">
            <summary>
            Returns the action to run.  If less than zero, this parameter is ignored.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetDataArgs.MyCaffe">
            <summary>
            Returns the MyCaffeControl used.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.GetDataArgs.Reset">
            <summary>
            Returns whether or not to reset the observation environment or not.
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.ITERATOR_TYPE">
            <summary>
            Specifies the iterator type to use.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.ITERATOR_TYPE.ITERATION">
            <summary>
            Use the iteration type.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.ITERATOR_TYPE.EPISODE">
            <summary>
            Use the episode type.
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.IXMyCaffeCustomTrainer">
            <summary>
            The IXMyCaffeCustomTrainer interface is used by the MyCaffeCustomTraininer components that
            provide various training techniques such as Reinforcement Training.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainer.Initialize(System.String,MyCaffe.trainers.IXMyCaffeCustomTrainerCallback)">
            <summary>
            Initialize the trainer passing in a set of key-value pairs as properties.
            </summary>
            <remarks>Use the ProeprtySet object to easily parse the key-value pair properties.</remarks>
            <param name="strProperties">Specifies the properties.</param>
            <param name="icallback">Specifies the parent callback for updates.</param>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainer.CleanUp">
            <summary>
            Clean-up the trainer by releasing all resources used.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.IXMyCaffeCustomTrainer.Stage">
            <summary>
            Returns the stage that the trainer is running under based on the trainer type.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.IXMyCaffeCustomTrainer.Name">
            <summary>
            Returns the name of the custom trainer.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.IXMyCaffeCustomTrainer.TrainingCategory">
            <summary>
            Returns the training category supported by the implementer of the interface.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainer.GetUpdateSnapshot(System.Int32@,System.Double@)">
            <summary>
            Returns <i>true</i> when the training is ready for a snap-shot, <i>false</i> otherwise.
            </summary>
            <param name="nIteration">Specifies the current iteration.</param>
            <param name="dfAccuracy">Specifies the current accuracy or rewards for Reinforcement trainers.</param>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainer.GetDatasetOverride(System.Int32)">
            <summary>
            Returns a dataset override to use (if any) instead of the project's dataset.  If there is no dataset override
            <i>null</i> is returned and the project's dataset is used.
            </summary>
            <param name="nProjectID">Specifies the project ID associated with the trainer (if any)</param>
        </member>
        <member name="P:MyCaffe.trainers.IXMyCaffeCustomTrainer.IsTrainingSupported">
            <summary>
            Returns <i>true</i> when the 'Train' method is supported - this should almost always be <i>true</i>. 
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.IXMyCaffeCustomTrainer.IsTestingSupported">
            <summary>
            Returns <i>true</i> when the 'Test' method is supported.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.IXMyCaffeCustomTrainer.IsRunningSupported">
            <summary>
            Returns <i>true</i> when the 'Run' method is supported.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainer.Train(System.ComponentModel.Component,System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            Train the network using the training technique implemented by this trainer.
            </summary>
            <param name="mycaffe">Specifies an instance to the MyCaffeControl component.</param>
            <param name="nIterationOverride">Specifies the iteration override if any.</param>
            <param name="type">Specifies the type of iterator to use.</param>
            <param name="step">Specifies whether or not to step the training for debugging.</param>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainer.Test(System.ComponentModel.Component,System.Int32,MyCaffe.trainers.ITERATOR_TYPE)">
            <summary>
            Test the network using the testing technique implemented by this trainer.
            </summary>
            <param name="mycaffe">Specifies an instance to the MyCaffeControl component.</param>
            <param name="nIterationOverride">Specifies the iteration override if any.</param>
            <param name="type">Specifies the type of iterator to use.</param>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainer.GetProperty(System.String)">
            <summary>
            Returns a specific property value.
            </summary>
            <param name="strName">Specifies the property to get.</param>
            <returns>The property value is returned.</returns>
            <remarks>
            The following properties are supported by all trainers:
                'GlobalLoss'
                
            The following properties are supported by the RL trainers:
                'GlobalRewards'
                'GlobalEpisodeCount'
                'ExplorationRate'
               
            The following properties are supported by the RNN trainers:
                'GlobalIteration'
            </remarks>
        </member>
        <member name="P:MyCaffe.trainers.IXMyCaffeCustomTrainer.Information">
            <summary>
            Returns general information about the custom trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainer.OpenUi">
            <summary>
            Open the user interface if one exists for the trainer.
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.IXMyCaffeCustomTrainerRL">
            <summary>
            The IXMyCaffeCustomTrainer interface is used by the MyCaffeCustomTraininer components that
            provide various training techniques such as Reinforcement Training.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainerRL.RunOne(System.ComponentModel.Component,System.Int32)">
            <summary>
            Run the network using the run technique implemented by this trainer.
            </summary>
            <param name="mycaffe">Specifies an instance to the MyCaffeControl component.</param>
            <param name="nDelay">Specifies a delay to wait before getting the action.</param>
            <returns>The run results are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainerRL.Run(System.ComponentModel.Component,System.Int32,System.String@)">
            <summary>
            Run the network using the run technique implemented by this trainer.
            </summary>
            <param name="mycaffe">Specifies an instance to the MyCaffeControl component.</param>
            <param name="nN">Specifies the number of samples to run.</param>
            <param name="type">Specifies the output data type returned as a raw byte stream.</param>
            <returns>The run results are returned in the same native type as that of the CustomQuery used.</returns>
        </member>
        <member name="T:MyCaffe.trainers.IXMyCaffeCustomTrainerRNN">
            <summary>
            The IXMyCaffeCustomTrainer interface is used by the MyCaffeCustomTraininer components that
            provide various training techniques such as Reinforcement Training.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainerRNN.Run(System.ComponentModel.Component,System.Int32)">
            <summary>
            Run the network using the run technique implemented by this trainer.
            </summary>
            <param name="mycaffe">Specifies an instance to the MyCaffeControl component.</param>
            <param name="nN">specifies the number of samples to run.</param>
            <returns>The run results are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainerRNN.Run(System.ComponentModel.Component,System.Int32,System.String@)">
            <summary>
            Run the network using the run technique implemented by this trainer.
            </summary>
            <param name="mycaffe">Specifies an instance to the MyCaffeControl component.</param>
            <param name="nN">Specifies the number of samples to run.</param>
            <param name="type">Specifies the output data type returned as a raw byte stream.</param>
            <returns>The run results are returned in the same native type as that of the CustomQuery used.</returns>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainerRNN.PreloadData(MyCaffe.basecode.Log,MyCaffe.basecode.CancelEvent,System.Int32)">
            <summary>
            The PreloadData method gives the custom trainer an opportunity to pre-load any data.
            </summary>
            <param name="log">Specifies the output log to use.</param>
            <param name="evtCancel">Specifies the event used to cancel the pre-load.</param>
            <param name="nProjectID">Specifies the ProjectID if any.</param>
            <returns>When data is pre-loaded the vocabulary discovered is returned as a Bucket Collection.</returns>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainerRNN.ResizeModel(MyCaffe.basecode.Log,System.String,MyCaffe.basecode.BucketCollection)">
            <summary>
            The ResizeModel method gives the custom trainer the opportunity to resize the model if needed.
            </summary>
            <param name="strModel">Specifies the model descriptor.</param>
            <param name="rgVocabulary">Specifies the vocabulary, if any.</param>
            <param name="log">Specifies the output log.</param>
            <returns>A new model discriptor is returned (or the same 'strModel' if no changes were made).</returns>
            <remarks>Note, this method is called after PreloadData.</remarks>
        </member>
        <member name="T:MyCaffe.trainers.IXMyCaffeCustomTrainerCallback">
            <summary>
            The IXMyCaffeCustomTrainerCallback interface is used to call back to the parent running the custom trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainerCallback.Update(MyCaffe.basecode.TRAINING_CATEGORY,System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            The Update method updates the parent with the global iteration, reward and loss.
            </summary>
            <param name="cat">Specifies the category of the trainer used.</param>
            <param name="rgValues">Specifies a dictionary of values that contains 'GlobalIteration', 'GlobalLoss', "LearningRate' and 'GlobalReward' (PG trainers only) values.</param>
        </member>
        <member name="T:MyCaffe.trainers.IXMyCaffeCustomTrainerCallbackRNN">
            <summary>
            The IXMyCaffeCustomTrainerCallbackRNN interface is used to call back to the parent running the custom RNN trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IXMyCaffeCustomTrainerCallbackRNN.GetRunProperties">
            <summary>
            The GetRunProperties method is used to qeury the properties used when Running, if any.
            </summary>
            <returns>The property string is returned.</returns>
        </member>
        <member name="T:MyCaffe.trainers.IxTrainer">
            <summary>
            The IxTrainer interface is implemented by each Trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IxTrainer.Initialize">
            <summary>
            Initialize the trainer.
            </summary>
            <returns>Returns <i>true</i> on success, <i>false</i> on failure.</returns>
        </member>
        <member name="M:MyCaffe.trainers.IxTrainer.Shutdown(System.Int32)">
            <summary>
            Shutdown the trainer.
            </summary>
            <param name="nWait">Specifies a wait for the shtudown.</param>
            <returns>Returns <i>true</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.IxTrainer.Train(System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            Train the network.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <param name="step">Specifies whether or not to step the training for debugging.</param>
            <returns>Returns <i>true</i> on success, <i>false</i> on failure.</returns>
        </member>
        <member name="M:MyCaffe.trainers.IxTrainer.Test(System.Int32,MyCaffe.trainers.ITERATOR_TYPE)">
            <summary>
            Test the newtork.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <returns>Returns <i>true</i> on success, <i>false</i> on failure.</returns>
        </member>
        <member name="T:MyCaffe.trainers.IxTrainerRL">
            <summary>
            The IxTrainerRL interface is implemented by each RL Trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IxTrainerRL.RunOne(System.Int32)">
            <summary>
            Run a single cycle on the trainer.
            </summary>
            <param name="nDelay">Specifies a delay to wait before getting the action.</param>
            <returns>The result collection containing the action is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.IxTrainerRL.Run(System.Int32,System.String,System.String@)">
            <summary>
            Run a number of 'nN' samples on the trainer.
            </summary>
            <param name="nN">Specifies the number of samples to run.</param>
            <param name="strRunProperties">Optionally specifies properties to use when running.</param>
            <param name="type">Specifies the output data type returned as a raw byte stream.</param>
            <returns>The run results are returned in the same native type as that of the CustomQuery used.</returns>
        </member>
        <member name="T:MyCaffe.trainers.IxTrainerRNN">
            <summary>
            The IxTrainerRL interface is implemented by each RL Trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IxTrainerRNN.Run(System.Int32,System.String)">
            <summary>
            Run a number of 'nN' samples on the trainer.
            </summary>
            <param name="nN">specifies the number of samples to run.</param>
            <param name="strRunProperties">Optionally specifies properties to use when running.</param>
            <returns>The result collection containing the action is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.IxTrainerRNN.Run(System.Int32,System.String,System.String@)">
            <summary>
            Run a number of 'nN' samples on the trainer.
            </summary>
            <param name="nN">Specifies the number of samples to run.</param>
            <param name="strRunProperties">Optionally specifies properties to use when running.</param>
            <param name="type">Specifies the output data type returned as a raw byte stream.</param>
            <returns>The run results are returned in the same native type as that of the CustomQuery used.</returns>
        </member>
        <member name="T:MyCaffe.trainers.IxTrainerCallback">
            <summary>
            The IxTrainerCallback provides functions used by each trainer to 'call-back' to the parent for information and updates.
            </summary>
            <remarks>The IxTrainerCallback is passed to each trainer.</remarks>
        </member>
        <member name="M:MyCaffe.trainers.IxTrainerCallback.OnInitialize(MyCaffe.trainers.InitializeArgs)">
            <summary>
            The OnIntialize callback fires when initializing the trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IxTrainerCallback.OnShutdown">
            <summary>
            The OnShutdown callback fires when shutting down the trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IxTrainerCallback.OnGetData(MyCaffe.trainers.GetDataArgs)">
            <summary>
            The OnGetData callback fires from within the Train method and is used to get a new observation data.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IxTrainerCallback.OnUpdateStatus(MyCaffe.trainers.GetStatusArgs)">
            <summary>
            The OnGetStatus callback fires on each iteration within the Train method.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IxTrainerCallback.OnWait(MyCaffe.trainers.WaitArgs)">
            <summary>
            The OnWait callback fires when waiting for a shutdown.
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.IxTrainerGetDataCallback">
            <summary>
            The IxTrainerGetDataCallback interface is called right after rendering the output image and just before
            sending it to the display, thus giving the implementor a chance to 'overlay' information onto the image.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.IxTrainerGetDataCallback.OnOverlay(MyCaffe.trainers.OverlayArgs)">
            <summary>
            The OnOverlay method is optionally called just before displaying a gym image thus allowing for an overlay to be applied.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:MyCaffe.trainers.IxTrainerCallbackRNN">
            <summary>
            The IxTrainerCallbackRNN provides functions used by each trainer to 'call-back' to the parent for information and updates.
            </summary>
            <remarks>The IxTrainerCallbackRNN is passed to each RNN trainer.</remarks>
        </member>
        <member name="M:MyCaffe.trainers.IxTrainerCallbackRNN.OnConvertOutput(MyCaffe.trainers.ConvertOutputArgs)">
            <summary>
            The OnConvertOutput callback fires from within the Run method and is used to convert the network's output into the native format used by the CustomQuery.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:MyCaffe.trainers.MyCaffeTrainerDual">
            <summary>
            The MyCaffeTraininerDual is used to perform both reinforcement and recurrent learning training tasks on an instance of the MyCaffeControl.
            </summary>
            <remarks>
            --RL--
            Currently, the MyCaffeTrainerDual supports the following reinforcement trainers, each of which are selected with the 'TrainerType=type' property
            value within the property set specified when calling the Initialize method.
            
            TrainerType=PG.SIMPLE - creates the initial simple policy gradient trainer that only supports single-threaded Sigmoid based models.
            TrainerType=PG.ST - creates a single-threaded policy gradient trainer that supports both Sigmoid and Softmax based models.
            TrainerType=PG.MT - creates a multi-threaded policy gradient trainer that supports both Sigmoid and Softmax based models and can train across GPU's.
            TrainerType=C51.ST = creates a single-threaded network that implements the C51 DDQN algorithm.
            
            Other intitialization properties include:
            
            RewardType=VAL - reports the actual reward values.
            RewardType=MAX - reports the maximum reward value observed (recommended setting)
            
            Threads=# - specifies the number of threads.
            
            GPUs=#,#,... - specifies the GPU's on which to run each thread.  The GPU IDs may be the same as the open project or other GPU's in the system.  GPU
            selection starts with the first GPUID in the list, continues to the end, and then wraps back around to the start of the list.  For example if you
            specifiy to use 3 thread with GPUIDs=0,1 the GPUs will be assigned to each thread as follows: Thread0 => GPUID0, Thread1 => GPUID1, Thread2 => GPUID0
            
            Gamma - specifies the discount rate (default = 0.99)
            UseRawInput - when <i>true</i> the actual input is used directly, otherwise a difference between the current and previous input is used (default = <i>false</i>).
            
            
            --RNN--
            Currently, the MyCaffeTrainerDual also supports the following recurrent trainers, each of which are selected with the 'TrainerType=type' property
            value within the property set specified when calling the Initialize method.
            
            TrainerType=RNN.SIMPLE - creates the initial simple policy gradient trainer that only supports single-threaded Sigmoid based models.
            
            
            The following settings are used from the Model and Solver descriptions:
            
            Solver: base_lr - specifies the learning rate used.
            Model: batch_size - specifies how often accumulated gradients are applied.
            </remarks>
        </member>
        <member name="F:MyCaffe.trainers.MyCaffeTrainerDual.m_random">
            <summary>
            Random number generator used to get initial actions, etc.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.MyCaffeTrainerDual.m_properties">
            <summary>
            Specifies the properties parsed from the key-value pair passed to the Initialize method.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.MyCaffeTrainerDual.m_nProjectID">
            <summary>
            Specifies the project ID of the project held by the instance of MyCaffe.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.#ctor(System.ComponentModel.IContainer)">
            <summary>
            The constructor.
            </summary>
            <param name="container">The container of the component.</param>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.name">
            <summary>
            Overriden to give the actual name of the custom trainer.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.category">
            <summary>
            Override when using a training method other than the REINFORCEMENT method (the default).
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.get_dataset_override(System.Int32)">
            <summary>
            Returns a dataset override to use (if any) instead of the project's dataset.  If there is no dataset override
            <i>null</i> is returned and the project's dataset is used.
            </summary>
            <param name="nProjectID">Specifies the project ID associated with the trainer (if any)</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.get_information">
            <summary>
            Returns information describing the specific trainer, such as the gym used, if any.
            </summary>
            <returns>The string describing the trainer is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.create_trainerD(System.ComponentModel.Component,MyCaffe.basecode.Stage)">
            <summary>
            Optionally overridden to return a new type of trainer.
            </summary>
            <remarks>
            Override this method when using the MyCaffeControl that uses the <i>double</i> base type.
            </remarks>
            <param name="caffe">Specifies the MyCaffeControl used.</param>
            <param name="stage">Specifies the stage under which the trainer is created.</param>
            <returns>The IxTraininer interface implemented by the new trainer is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.create_trainerF(System.ComponentModel.Component,MyCaffe.basecode.Stage)">
            <summary>
            Optionally overridden to return a new type of trainer.
            </summary>
            <remarks>
            Override this method when using the MyCaffeControl that uses the <i>double</i> base type.
            </remarks>
            <param name="caffe">Specifies the MyCaffeControl used.</param>
            <param name="stage">Specifies the stage under which the trainer is created.</param>
            <returns>The IxTraininer interface implemented by the new trainer is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.dispose">
            <summary>
            Override to dispose of resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.initialize(MyCaffe.trainers.InitializeArgs)">
            <summary>
            Override called by the Initialize method of the trainer.
            </summary>
            <remarks>
            When providing a new trainer, this method is not used.
            </remarks>
            <param name="e">Specifies the initialization arguments.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.shutdown">
            <summary>
            Override called from within the CleanUp method.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.getData(MyCaffe.trainers.GetDataArgs)">
            <summary>
            Override called by the OnGetData event fired by the Trainer to retrieve a new set of observation collections making up a set of experiences.
            </summary>
            <param name="e">Specifies the getData argments used to return the new observations.</param>
            <returns>A value of <i>true</i> is returned when data is retrieved.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.convertOutput(MyCaffe.trainers.ConvertOutputArgs)">
            <summary>
            Override called by the OnConvertOutput event fired by the Trainer to convert the network output into its native format.
            </summary>
            <param name="e">Specifies the event arguments.</param>
            <returns>When handled this function retunrs <i>true</i>, otherwise it returns <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.get_update_snapshot(System.Int32@,System.Double@)">
            <summary>
            Returns <i>true</i> when the training is ready for a snap-shot, <i>false</i> otherwise.
            </summary>
            <param name="nIteration">Specifies the current iteration.</param>
            <param name="dfAccuracy">Specifies the current rewards.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.openUi">
            <summary>
            Called by OpenUi, override this when a UI (via WCF) should be displayed.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.preloaddata(MyCaffe.basecode.Log,MyCaffe.basecode.CancelEvent,System.Int32,System.Boolean@)">
            <summary>
            The preloaddata method gives the custom trainer an opportunity to pre-load any data.
            </summary>
            <param name="log">Specifies the output log to use.</param>
            <param name="evtCancel">Specifies the cancel event.</param>
            <param name="nProjectID">Specifies the project ID if any.</param>
            <param name="bUsePreloadData">Returns whether or not to use pre-load data, or dynamic data.</param>
            <returns>When data is pre-loaded the discovered vocabulary is returned as a bucket collection.</returns>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.Stage">
            <summary>
            Returns the stage under which the trainer is running based on the trainer type.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.Name">
            <summary>
            Returns the name of the custom trainer.  This method calls the 'name' override.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.TrainingCategory">
            <summary>
            Returns the training category of the custom trainer (default = REINFORCEMENT).
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.GetUpdateSnapshot(System.Int32@,System.Double@)">
            <summary>
            Returns <i>true</i> when the training is ready for a snap-shot, <i>false</i> otherwise.
            </summary>
            <param name="nIteration">Specifies the current iteration.</param>
            <param name="dfAccuracy">Specifies the current rewards.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.GetDatasetOverride(System.Int32)">
            <summary>
            Returns a dataset override to use (if any) instead of the project's dataset.  If there is no dataset override
            <i>null</i> is returned and the project's dataset is used.
            </summary>
            <param name="nProjectID">Specifies the project ID associated with the trainer (if any)</param>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.IsTrainingSupported">
            <summary>
            Returns whether or not Training is supported.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.IsTestingSupported">
            <summary>
            Returns whether or not Testing is supported.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.IsRunningSupported">
            <summary>
            Returns whether or not Running is supported.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.CleanUp">
            <summary>
            Releases any resources used by the component.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.Initialize(System.String,MyCaffe.trainers.IXMyCaffeCustomTrainerCallback)">
            <summary>
            Initializes a new custom trainer by loading the key-value pair of properties into the property set.
            </summary>
            <param name="strProperties">Specifies the key-value pair of properties each separated by ';'.  For example the expected
            format is 'key1'='value1';'key2'='value2';...</param>
            <param name="icallback">Specifies the parent callback.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.Test(System.ComponentModel.Component,System.Int32,MyCaffe.trainers.ITERATOR_TYPE)">
            <summary>
            Create a new trainer and use it to run a test cycle using the current 'stage' = RNN or RL.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use.</param>
            <param name="nIterationOverride">Specifies the iterations to run if greater than zero.</param>
            <param name="type">Specifies the type of iterator to use.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.Train(System.ComponentModel.Component,System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            Create a new trainer and use it to run a training cycle using the current 'stage' = RNN or RL.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use.</param>
            <param name="nIterationOverride">Specifies the iterations to run if greater than zero.</param>
            <param name="type">Specifies the type of iterator to use.</param>
            <param name="step">Optionally, specifies whether or not to step the training for debugging (default = NONE).</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.OnInitialize(MyCaffe.trainers.InitializeArgs)">
            <summary>
            The OnIntialize callback fires when initializing the trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.OnShutdown">
            <summary>
            The OnShutdown callback fires when shutting down the trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.OnGetData(MyCaffe.trainers.GetDataArgs)">
            <summary>
            The OnGetData callback fires from within the Train method and is used to get a new observation data.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.OnConvertOutput(MyCaffe.trainers.ConvertOutputArgs)">
            <summary>
            The OnConvertOutput callback fires from within the Run method and is used to convert the network output into its native format.
            </summary>
            <param name="e">Specifies the event arguments.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.OnUpdateStatus(MyCaffe.trainers.GetStatusArgs)">
            <summary>
            The OnGetStatus callback fires on each iteration within the Train method.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.OnWait(MyCaffe.trainers.WaitArgs)">
            <summary>
            The OnWait callback fires when waiting for a shutdown.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.GetProperty(System.String)">
            <summary>
            Return a property value from the trainer.
            </summary>
            <param name="strProp">Specifies the name of property to retrieve.</param>
            <returns>The property value is returned.</returns>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.GlobalRewards">
            <summary>
            Returns the global rewards based on the reward type specified by the 'RewardType' property.
            </summary>
            <remarks>
            The reward type can be one of the following:
               'VAL' - report the global reward value.
               'AVE' - report the global reward averaged over all threads.
               'MAX' - report maximum global rewards (default)
            </remarks>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.ImmediateRewards">
            <summary>
            Returns the immediate rewards for the current training cycle as opposed to the averaged rewards.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.GlobalLoss">
            <summary>
            Return the global loss.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.GlobalIteration">
            <summary>
            Returns the global iteration.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.GlobalEpisodeCount">
            <summary>
            Returns the global episode count.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.GlobalEpisodeMax">
            <summary>
            Returns the maximum global episode count.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.ExplorationRate">
            <summary>
            Returns the current exploration rate.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.OptimalSelectionRate">
            <summary>
            Returns the rate of selection from the optimal set with the highest reward (this setting is optional, default = 0).
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerDual.Information">
            <summary>
            Returns information describing the trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.OpenUi">
            <summary>
            Open the user interface for the trainer, of one exists.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.MyCaffe#trainers#IXMyCaffeCustomTrainerRL#RunOne(System.ComponentModel.Component,System.Int32)">
            <summary>
            Create a new trainer and use it to run a single run cycle.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use.</param>
            <param name="nDelay">Specifies a delay to wait before getting the action.</param>
            <returns>The results of the run are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.Run(System.ComponentModel.Component,System.Int32,System.String@)">
            <summary>
            Run the network using the run technique implemented by this trainer.
            </summary>
            <param name="mycaffe">Specifies an instance to the MyCaffeControl component.</param>
            <param name="nN">Specifies the number of samples to run.</param>
            <param name="type">Specifies the output data type returned as a raw byte stream.</param>
            <returns>The run results are returned in the same native type as that of the CustomQuery used.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.MyCaffe#trainers#IXMyCaffeCustomTrainerRNN#Run(System.ComponentModel.Component,System.Int32)">
            <summary>
            Create a new trainer and use it to run a single run cycle.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use.</param>
            <param name="nN">Specifies the number of samples to run.</param>
            <returns>The results of the run are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.MyCaffe#trainers#IXMyCaffeCustomTrainerRNN#Run(System.ComponentModel.Component,System.Int32,System.String@)">
            <summary>
            Run the network using the run technique implemented by this trainer.
            </summary>
            <param name="mycaffe">Specifies an instance to the MyCaffeControl component.</param>
            <param name="nN">Specifies the number of samples to run.</param>
            <param name="type">Specifies the output data type returned as a raw byte stream.</param>
            <returns>The run results are returned in the same native type as that of the CustomQuery used.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.MyCaffe#trainers#IXMyCaffeCustomTrainerRNN#PreloadData(MyCaffe.basecode.Log,MyCaffe.basecode.CancelEvent,System.Int32)">
            <summary>
            The PreloadData method gives the custom trainer an opportunity to pre-load any data.
            </summary>
            <param name="log">Specifies the output log to use.</param>
            <param name="evtCancel">Specifies the cancel event.</param>
            <param name="nProjectID">Specifies the project ID used, if any.</param>
            <returns>When data is pre-loaded the discovered vocabulary is returned as a BucketCollection.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.MyCaffe#trainers#IXMyCaffeCustomTrainerRNN#ResizeModel(MyCaffe.basecode.Log,System.String,MyCaffe.basecode.BucketCollection)">
            <summary>
            The ResizeModel method gives the custom trainer the opportunity to resize the model if needed.
            </summary>
            <param name="strModel">Specifies the model descriptor.</param>
            <param name="rgVocabulary">Specifies the vocabulary.</param>
            <param name="log">Specifies the output log.</param>
            <returns>A new model discriptor is returned (or the same 'strModel' if no changes were made).</returns>
            <remarks>Note, this method is called after PreloadData.</remarks>
        </member>
        <member name="F:MyCaffe.trainers.MyCaffeTrainerDual.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerDual.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.MyCaffeTrainerRNN">
            <summary>
            (Depreciated - use MyCaffeTrainerDual instead.) 
            The MyCaffeTrainerRNN is used to perform recurrent neural-network training tasks on an instance of the MyCaffeControl.
            </summary>
            <remarks>
            Currently, the MyCaffeTrainerRNN supports the following trainers, each of which are selected with the 'TrainerType=type' property
            value within the property set specified when calling the Initialize method.
            
            TrainerType=RNN.SIMPLE - creates the initial simple policy gradient trainer that only supports single-threaded Sigmoid based models.
            
            The following settings are used from the Model and Solver descriptions:
            
            Solver: base_lr - specifies the learning rate used.
            Model: batch_size - specifies how often accumulated gradients are applied.
            </remarks>
        </member>
        <member name="F:MyCaffe.trainers.MyCaffeTrainerRNN.m_properties">
            <summary>
            Specifies the properties parsed from the key-value pair passed to the Initialize method.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.MyCaffeTrainerRNN.m_nProjectID">
            <summary>
            Specifies the project ID of the project held by the instance of MyCaffe.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.#ctor(System.ComponentModel.IContainer)">
            <summary>
            The constructor.
            </summary>
            <param name="container">The container of the component.</param>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRNN.name">
            <summary>
            Overriden to give the actual name of the custom trainer.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRNN.category">
            <summary>
            Override when using a training method other than the RECURRENT method (the default).
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.get_dataset_override(System.Int32)">
            <summary>
            Returns a dataset override to use (if any) instead of the project's dataset.  If there is no dataset override
            <i>null</i> is returned and the project's dataset is used.
            </summary>
            <param name="nProjectID">Specifies the project ID associated with the trainer (if any)</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.get_information">
            <summary>
            Returns information describing the specific trainer, such as the gym used, if any.
            </summary>
            <returns>The string describing the trainer is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.create_trainerD(System.ComponentModel.Component)">
            <summary>
            Optionally overridden to return a new type of trainer.
            </summary>
            <remarks>
            Override this method when using the MyCaffeControl that uses the <i>double</i> base type.
            </remarks>
            <param name="caffe">Specifies the MyCaffeControl used.</param>
            <returns>The IxTraininer interface implemented by the new trainer is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.create_trainerF(System.ComponentModel.Component)">
            <summary>
            Optionally overridden to return a new type of trainer.
            </summary>
            <remarks>
            Override this method when using the MyCaffeControl that uses the <i>double</i> base type.
            </remarks>
            <param name="caffe">Specifies the MyCaffeControl used.</param>
            <returns>The IxTraininer interface implemented by the new trainer is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.dispose">
            <summary>
            Override to dispose of resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.initialize(MyCaffe.trainers.InitializeArgs)">
            <summary>
            Override called by the Initialize method of the trainer.
            </summary>
            <remarks>
            When providing a new trainer, this method is not used.
            </remarks>
            <param name="e">Specifies the initialization arguments.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.shutdown">
            <summary>
            Override called from within the CleanUp method.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.getData(MyCaffe.trainers.GetDataArgs)">
            <summary>
            Override called by the OnGetData event fired by the Trainer to retrieve a new set of observation collections making up a set of experiences.
            </summary>
            <param name="e">Specifies the getData argments used to return the new observations.</param>
            <returns>A value of <i>true</i> is returned when data is retrieved.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.convertOutput(MyCaffe.trainers.ConvertOutputArgs)">
            <summary>
            Override called by the OnConvertOutput event fired by the Trainer to convert the network output into its native format.
            </summary>
            <param name="e">Specifies the event arguments.</param>
            <returns>When handled this function retunrs <i>true</i>, otherwise it returns <i>false</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.get_update_snapshot(System.Int32@,System.Double@)">
            <summary>
            Returns <i>true</i> when the training is ready for a snap-shot, <i>false</i> otherwise.
            </summary>
            <param name="nIteration">Specifies the current iteration.</param>
            <param name="dfAccuracy">Returns the current accuracy.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.openUi">
            <summary>
            Called by OpenUi, override this when a UI (via WCF) should be displayed.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.preloaddata(MyCaffe.basecode.Log,MyCaffe.basecode.CancelEvent,System.Int32)">
            <summary>
            The preloaddata method gives the custom trainer an opportunity to pre-load any data.
            </summary>
            <param name="log">Specifies the output log to use.</param>
            <param name="evtCancel">Specifies the cancel event.</param>
            <param name="nProjectID">Specifies the project ID if any.</param>
            <returns>When data is pre-loaded the discovered vocabulary is returned as a bucket collection.</returns>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRNN.Stage">
            <summary>
            Returns the Stage.RNN type.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRNN.Name">
            <summary>
            Returns the name of the custom trainer.  This method calls the 'name' override.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRNN.TrainingCategory">
            <summary>
            Returns the training category of the custom trainer (default = REINFORCEMENT).
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.GetUpdateSnapshot(System.Int32@,System.Double@)">
            <summary>
            Returns <i>true</i> when the training is ready for a snap-shot, <i>false</i> otherwise.
            </summary>
            <param name="nIteration">Specifies the current iteration.</param>
            <param name="dfAccuracy">Specifies the current accuracy.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.GetDatasetOverride(System.Int32)">
            <summary>
            Returns a dataset override to use (if any) instead of the project's dataset.  If there is no dataset override
            <i>null</i> is returned and the project's dataset is used.
            </summary>
            <param name="nProjectID">Specifies the project ID associated with the trainer (if any)</param>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRNN.IsTrainingSupported">
            <summary>
            Returns whether or not Training is supported.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRNN.IsTestingSupported">
            <summary>
            Returns whether or not Testing is supported.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRNN.IsRunningSupported">
            <summary>
            Returns whether or not Running is supported.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.CleanUp">
            <summary>
            Releases any resources used by the component.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.Initialize(System.String,MyCaffe.trainers.IXMyCaffeCustomTrainerCallback)">
            <summary>
            Initializes a new custom trainer by loading the key-value pair of properties into the property set.
            </summary>
            <param name="strProperties">Specifies the key-value pair of properties each separated by ';'.  For example the expected
            format is 'key1'='value1';'key2'='value2';...</param>
            <param name="icallback">Specifies the parent callback.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.Run(System.ComponentModel.Component,System.Int32)">
            <summary>
            Create a new trainer and use it to run a single run cycle.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use.</param>
            <param name="nN">Specifies the number of samples to run.</param>
            <returns>The results of the run are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.Run(System.ComponentModel.Component,System.Int32,System.String@)">
            <summary>
            Run the network using the run technique implemented by this trainer.
            </summary>
            <param name="mycaffe">Specifies an instance to the MyCaffeControl component.</param>
            <param name="nN">Specifies the number of samples to run.</param>
            <param name="type">Specifies the output data type returned as a raw byte stream.</param>
            <returns>The run results are returned in the same native type as that of the CustomQuery used.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.Test(System.ComponentModel.Component,System.Int32,MyCaffe.trainers.ITERATOR_TYPE)">
            <summary>
            Create a new trainer and use it to run a test cycle.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use.</param>
            <param name="nIterationOverride">Specifies the iterations to run if greater than zero.</param>
            <param name="type">Specifies the type of iterator to use.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.Train(System.ComponentModel.Component,System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            Create a new trainer and use it to run a training cycle.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use.</param>
            <param name="nIterationOverride">Specifies the iterations to run if greater than zero.</param>
            <param name="type">Specifies the type of iterator to use.</param>
            <param name="step">Optionally, specifies whether or not to step the training for debugging (default = NONE).</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.OnInitialize(MyCaffe.trainers.InitializeArgs)">
            <summary>
            The OnIntialize callback fires when initializing the trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.OnShutdown">
            <summary>
            The OnShutdown callback fires when shutting down the trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.OnGetData(MyCaffe.trainers.GetDataArgs)">
            <summary>
            The OnGetData callback fires from within the Train method and is used to get a new observation data.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.OnConvertOutput(MyCaffe.trainers.ConvertOutputArgs)">
            <summary>
            The OnConvertOutput callback fires from within the Run method and is used to convert the network output into its native format.
            </summary>
            <param name="e">Specifies the event arguments.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.OnUpdateStatus(MyCaffe.trainers.GetStatusArgs)">
            <summary>
            The OnGetStatus callback fires on each iteration within the Train method.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.OnWait(MyCaffe.trainers.WaitArgs)">
            <summary>
            The OnWait callback fires when waiting for a shutdown.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.GetProperty(System.String)">
            <summary>
            Returns a specific property value.
            </summary>
            <param name="strProp">Specifies the property to get.</param>
            <returns>The property value is returned.</returns>
            <remarks>
            The following properties are supported by the RNN trainers:
                'GlobalIteration'
            </remarks>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRNN.Information">
            <summary>
            Returns information describing the trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.OpenUi">
            <summary>
            Open the user interface for the trainer, of one exists.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.PreloadData(MyCaffe.basecode.Log,MyCaffe.basecode.CancelEvent,System.Int32)">
            <summary>
            The PreloadData method gives the custom trainer an opportunity to pre-load any data.
            </summary>
            <param name="log">Specifies the output log to use.</param>
            <param name="evtCancel">Specifies the cancel event.</param>
            <param name="nProjectID">Specifies the project ID used, if any.</param>
            <returns>When data is pre-loaded the discovered vocabulary is returned as a BucketCollection.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.ResizeModel(MyCaffe.basecode.Log,System.String,MyCaffe.basecode.BucketCollection)">
            <summary>
            The ResizeModel method gives the custom trainer the opportunity to resize the model if needed.
            </summary>
            <param name="strModel">Specifies the model descriptor.</param>
            <param name="rgVocabulary">Specifies the vocabulary.</param>
            <param name="log">Specifies the output log.</param>
            <returns>A new model discriptor is returned (or the same 'strModel' if no changes were made).</returns>
            <remarks>Note, this method is called after PreloadData.</remarks>
        </member>
        <member name="F:MyCaffe.trainers.MyCaffeTrainerRNN.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRNN.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.MyCaffeTrainerRL">
            <summary>
            (Depreciated - use MyCaffeTrainerDual instead.) 
            The MyCaffeTraininerRL is used to perform reinforcement learning training tasks on an instance of the MyCaffeControl.
            </summary>
            <remarks>
            Currently, the MyCaffeTrainerRL supports the following trainers, each of which are selected with the 'TrainerType=type' property
            value within the property set specified when calling the Initialize method.
            
            TrainerType=PG.SIMPLE - creates the initial simple policy gradient trainer that only supports single-threaded Sigmoid based models.
            TrainerType=PG.ST - creates a single-threaded policy gradient trainer that supports both Sigmoid and Softmax based models.
            TrainerType=PG.MT - creates a multi-threaded policy gradient trainer that supports both Sigmoid and Softmax based models and can train across GPU's.
            
            Other intitialization properties include:
            
            RewardType=VAL - reports the actual reward values.
            RewardType=MAX - reports the maximum reward value observed (recommended setting)
            
            Threads=# - specifies the number of threads.
            
            GPUs=#,#,... - specifies the GPU's on which to run each thread.  The GPU IDs may be the same as the open project or other GPU's in the system.  GPU
            selection starts with the first GPUID in the list, continues to the end, and then wraps back around to the start of the list.  For example if you
            specifiy to use 3 thread with GPUIDs=0,1 the GPUs will be assigned to each thread as follows: Thread0 => GPUID0, Thread1 => GPUID1, Thread2 => GPUID0
            
            Gamma - specifies the discount rate (default = 0.99)
            UseRawInput - when <i>true</i> the actual input is used directly, otherwise a difference between the current and previous input is used (default = <i>false</i>).
            
            The following settings are used from the Model and Solver descriptions:
            
            Solver: base_lr - specifies the learning rate used.
            Model: batch_size - specifies how often accumulated gradients are applied.
            </remarks>
        </member>
        <member name="F:MyCaffe.trainers.MyCaffeTrainerRL.m_random">
            <summary>
            Random number generator used to get initial actions, etc.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.MyCaffeTrainerRL.m_properties">
            <summary>
            Specifies the properties parsed from the key-value pair passed to the Initialize method.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.MyCaffeTrainerRL.m_nProjectID">
            <summary>
            Specifies the project ID of the project held by the instance of MyCaffe.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.#ctor(System.ComponentModel.IContainer)">
            <summary>
            The constructor.
            </summary>
            <param name="container">The container of the component.</param>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRL.name">
            <summary>
            Overriden to give the actual name of the custom trainer.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRL.category">
            <summary>
            Override when using a training method other than the REINFORCEMENT method (the default).
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.get_dataset_override(System.Int32)">
            <summary>
            Returns a dataset override to use (if any) instead of the project's dataset.  If there is no dataset override
            <i>null</i> is returned and the project's dataset is used.
            </summary>
            <param name="nProjectID">Specifies the project ID associated with the trainer (if any)</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.get_information">
            <summary>
            Returns information describing the specific trainer, such as the gym used, if any.
            </summary>
            <returns>The string describing the trainer is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.create_trainerD(System.ComponentModel.Component)">
            <summary>
            Optionally overridden to return a new type of trainer.
            </summary>
            <remarks>
            Override this method when using the MyCaffeControl that uses the <i>double</i> base type.
            </remarks>
            <param name="caffe">Specifies the MyCaffeControl used.</param>
            <returns>The IxTraininer interface implemented by the new trainer is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.create_trainerF(System.ComponentModel.Component)">
            <summary>
            Optionally overridden to return a new type of trainer.
            </summary>
            <remarks>
            Override this method when using the MyCaffeControl that uses the <i>double</i> base type.
            </remarks>
            <param name="caffe">Specifies the MyCaffeControl used.</param>
            <returns>The IxTraininer interface implemented by the new trainer is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.dispose">
            <summary>
            Override to dispose of resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.initialize(MyCaffe.trainers.InitializeArgs)">
            <summary>
            Override called by the Initialize method of the trainer.
            </summary>
            <remarks>
            When providing a new trainer, this method is not used.
            </remarks>
            <param name="e">Specifies the initialization arguments.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.shutdown">
            <summary>
            Override called from within the CleanUp method.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.getData(MyCaffe.trainers.GetDataArgs)">
            <summary>
            Override called by the OnGetData event fired by the Trainer to retrieve a new set of observation collections making up a set of experiences.
            </summary>
            <param name="e">Specifies the getData argments used to return the new observations.</param>
            <returns>A value of <i>true</i> is returned when data is retrieved.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.get_update_snapshot(System.Int32@,System.Double@)">
            <summary>
            Returns <i>true</i> when the training is ready for a snap-shot, <i>false</i> otherwise.
            </summary>
            <param name="nIteration">Specifies the current iteration.</param>
            <param name="dfAccuracy">Specifies the current rewards.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.openUi">
            <summary>
            Called by OpenUi, override this when a UI (via WCF) should be displayed.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRL.Stage">
            <summary>
            Returns the Stage.RL type.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRL.Name">
            <summary>
            Returns the name of the custom trainer.  This method calls the 'name' override.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRL.TrainingCategory">
            <summary>
            Returns the training category of the custom trainer (default = REINFORCEMENT).
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.GetUpdateSnapshot(System.Int32@,System.Double@)">
            <summary>
            Returns <i>true</i> when the training is ready for a snap-shot, <i>false</i> otherwise.
            </summary>
            <param name="nIteration">Specifies the current iteration.</param>
            <param name="dfAccuracy">Specifies the current rewards.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.GetDatasetOverride(System.Int32)">
            <summary>
            Returns a dataset override to use (if any) instead of the project's dataset.  If there is no dataset override
            <i>null</i> is returned and the project's dataset is used.
            </summary>
            <param name="nProjectID">Specifies the project ID associated with the trainer (if any)</param>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRL.IsTrainingSupported">
            <summary>
            Returns whether or not Training is supported.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRL.IsTestingSupported">
            <summary>
            Returns whether or not Testing is supported.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRL.IsRunningSupported">
            <summary>
            Returns whether or not Running is supported.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.CleanUp">
            <summary>
            Releases any resources used by the component.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.Initialize(System.String,MyCaffe.trainers.IXMyCaffeCustomTrainerCallback)">
            <summary>
            Initializes a new custom trainer by loading the key-value pair of properties into the property set.
            </summary>
            <param name="strProperties">Specifies the key-value pair of properties each separated by ';'.  For example the expected
            format is 'key1'='value1';'key2'='value2';...</param>
            <param name="icallback">Specifies the parent callback.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.RunOne(System.ComponentModel.Component,System.Int32)">
            <summary>
            Create a new trainer and use it to run a single run cycle.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use.</param>
            <param name="nDelay">Specifies a delay to wait before getting the action.</param>
            <returns>The results of the run are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.Run(System.ComponentModel.Component,System.Int32,System.String@)">
            <summary>
            Run the network using the run technique implemented by this trainer.
            </summary>
            <param name="mycaffe">Specifies an instance to the MyCaffeControl component.</param>
            <param name="nN">Specifies the number of samples to run.</param>
            <param name="type">Specifies the output data type returned as a raw byte stream.</param>
            <returns>The run results are returned in the same native type as that of the CustomQuery used.</returns>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.Test(System.ComponentModel.Component,System.Int32,MyCaffe.trainers.ITERATOR_TYPE)">
            <summary>
            Create a new trainer and use it to run a test cycle.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use.</param>
            <param name="nIterationOverride">Specifies the iterations to run if greater than zero.</param>
            <param name="type">Specifies the type of iterator to use.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.Train(System.ComponentModel.Component,System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            Create a new trainer and use it to run a training cycle.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use.</param>
            <param name="nIterationOverride">Specifies the iterations to run if greater than zero.</param>
            <param name="type">Specifies the type of iterator to use.</param>
            <param name="step">Optionally, specifies whether or not to step the training for debugging (default = NONE).</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.OnInitialize(MyCaffe.trainers.InitializeArgs)">
            <summary>
            The OnIntialize callback fires when initializing the trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.OnShutdown">
            <summary>
            The OnShutdown callback fires when shutting down the trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.OnGetData(MyCaffe.trainers.GetDataArgs)">
            <summary>
            The OnGetData callback fires from within the Train method and is used to get a new observation data.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.OnUpdateStatus(MyCaffe.trainers.GetStatusArgs)">
            <summary>
            The OnGetStatus callback fires on each iteration within the Train method.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.OnWait(MyCaffe.trainers.WaitArgs)">
            <summary>
            The OnWait callback fires when waiting for a shutdown.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.GetProperty(System.String)">
            <summary>
            Return a property value from the trainer.
            </summary>
            <param name="strProp">Specifies the name of property to retrieve.</param>
            <returns>The property value is returned.</returns>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRL.GlobalRewards">
            <summary>
            Returns the global rewards based on the reward type specified by the 'RewardType' property.
            </summary>
            <remarks>
            The reward type can be one of the following:
               'VAL' - report the global reward value.
               'AVE' - report the global reward averaged over all threads.
               'MAX' - report maximum global rewards (default)
            </remarks>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRL.GlobalLoss">
            <summary>
            Return the global loss.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRL.GlobalEpisodeCount">
            <summary>
            Returns the global episode count.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRL.GlobalEpisodeMax">
            <summary>
            Returns the maximum global episode count.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRL.ExplorationRate">
            <summary>
            Returns the current exploration rate.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRL.OptimalSelectionRate">
            <summary>
            Returns the rate of selection from the optimal set with the highest reward (this setting is optional, default = 0).
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.MyCaffeTrainerRL.Information">
            <summary>
            Returns information describing the trainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.OpenUi">
            <summary>
            Open the user interface for the trainer, of one exists.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.MyCaffeTrainerRL.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MyCaffe.trainers.MyCaffeTrainerRL.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.pg.mt.TrainerPG`1">
            <summary>
            The TrainerPG implements a simple Policy Gradient trainer inspired by Andrej Karpathy's blog posed referenced. 
            </summary>
            @see 1. [Deep Reinforcement Learning: Pong from Pixels](http://karpathy.github.io/2016/05/31/rl/), by Andrej Karpathy, 2016, Github.io
            @see 2. [GitHub: karpathy/pg-pong.py](https://gist.github.com/karpathy/a4166c7fe253700972fcbc77e4ea32c5), by Andrej Karpathy, 2016, Github
            @see 3. [CS231n Convolution Neural Networks for Visual Recognition](http://cs231n.github.io/neural-networks-2/#losses) by Karpathy, Stanford
            @see 4. [MyCaffe: A Complete C# Re-Write of Caffe with Reinforcement Learning](https://arxiv.org/abs/1810.02272) by D. Brown, 2018, arXiv
            <remarks></remarks>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.TrainerPG`1.#ctor(MyCaffe.MyCaffeControl{`0},MyCaffe.basecode.PropertySet,MyCaffe.basecode.CryptoRandom,MyCaffe.trainers.IxTrainerCallback)">
            <summary>
            The constructor.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use for learning and prediction.</param>
            <param name="properties">Specifies the property set containing the key/value pairs of property settings.</param>
            <param name="random">Specifies a Random number generator used for random selection.</param>
            <param name="icallback">Specifies the callback for parent notifications and queries.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.TrainerPG`1.Dispose">
            <summary>
            Releases all resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.TrainerPG`1.Initialize">
            <summary>
            Initialize the trainer.
            </summary>
            <returns>Returns <i>true</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.TrainerPG`1.Shutdown(System.Int32)">
            <summary>
            Shutdown the trainer.
            </summary>
            <param name="nWait">Specifies a wait in ms. for the shutdown to complete.</param>
            <returns>Returns <i>true</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.TrainerPG`1.RunOne(System.Int32)">
            <summary>
            Run a single cycle on the environment after the delay.
            </summary>
            <param name="nDelay">Specifies a delay to wait before running.</param>
            <returns>The results of the run containing the action are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.TrainerPG`1.Run(System.Int32,System.String,System.String@)">
            <summary>
            Run a set of iterations and return the resuts.
            </summary>
            <param name="nN">Specifies the number of samples to run.</param>
            <param name="strRunProperties">Optionally specifies properties to use when running.</param>
            <param name="type">Returns the data type contained in the byte stream.</param>
            <returns>The results of the run containing the action are returned as a byte stream.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.TrainerPG`1.Test(System.Int32,MyCaffe.trainers.ITERATOR_TYPE)">
            <summary>
            Run the test cycle - currently this is not implemented.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <returns>A value of <i>true</i> is returned when handled, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.TrainerPG`1.Train(System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            Train the network using a modified PG training algorithm optimized for GPU use.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <param name="step">Specifies the stepping mode to use (when debugging).</param>
            <returns>A value of <i>true</i> is returned when handled, <i>false</i> otherwise.</returns>
        </member>
        <member name="T:MyCaffe.trainers.pg.mt.WorkerStartArgs">
            <summary>
            The WorkerStartArgs provides the arguments used when starting the agent thread.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.WorkerStartArgs.#ctor(System.Int32,MyCaffe.basecode.Phase,System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            The constructor.
            </summary>
            <param name="nCycleDelay">Specifies the cycle delay specifies the amount of time to wait for a cancel on each training loop.</param>
            <param name="phase">Specifies the phase on which to run.</param>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <param name="step">Specifies a training step, if any - this is used during debugging.</param>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.WorkerStartArgs.Step">
            <summary>
            Returns the training step to take (if any).  This is used for debugging.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.WorkerStartArgs.CycleDelay">
            <summary>
            Returns the cycle delay which specifies the amount of time to wait for a cancel.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.WorkerStartArgs.Phase">
            <summary>
            Return the phase on which to run.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.WorkerStartArgs.N">
            <summary>
            Returns the maximum number of episodes to run.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.WorkerStartArgs.IterationType">
            <summary>
            Returns the iteration type.
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.pg.mt.Worker">
            <summary>
            The Worker class provides the base class for both the Environment and Optimizer and provides the basic threading functionality used by both.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.pg.mt.Worker.m_nIndex">
            <summary>
            Specifies the index of this worker.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.pg.mt.Worker.m_evtCancel">
            <summary>
            Specfies the cancel event used to cancel this worker.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.pg.mt.Worker.m_evtDone">
            <summary>
            Specfies the done event set when this worker completes.
            </summary>
        </member>
        <member name="F:MyCaffe.trainers.pg.mt.Worker.m_workTask">
            <summary>
            Specifies the worker task that runs the thread function.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Worker.#ctor(System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="nIdx">Specifies the index of this worker.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Worker.doWork(System.Object)">
            <summary>
            This is the actual thread function that is overriden by each derivative class.
            </summary>
            <param name="arg">Specifies the arguments to the thread function.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Worker.Start(MyCaffe.trainers.pg.mt.WorkerStartArgs)">
            <summary>
            Start running the thread.
            </summary>
            <param name="args">Specifies the start arguments.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Worker.Stop(System.Int32)">
            <summary>
            Stop running the thread.
            </summary>
            <param name="nWait">Specifies an amount of time to wait for the thread to terminate.</param>
        </member>
        <member name="T:MyCaffe.trainers.pg.mt.Optimizer`1">
            <summary>
            The Optimizer manages a single thread used to apply updates to the primary instance of MyCaffe.  Once applied,
            the new weights are then copied back to the worker who just applied its gradients to the primary MyCaffe.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Optimizer`1.#ctor(MyCaffe.MyCaffeControl{`0})">
            <summary>
            The constructor.
            </summary>
            <param name="mycaffePrimary">Specifies the primary MyCaffe instance that holds the open project to be trained.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Optimizer`1.Dispose">
            <summary>
            Release all resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Optimizer`1.doWork(System.Object)">
            <summary>
            This override is the thread used to apply all updates, its CUDA DeviceID is set to the same device ID used by the primary
            instance of MyCaffe.
            </summary>
            <param name="arg">Specifies the argument to the thread.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Optimizer`1.ApplyUpdates(MyCaffe.MyCaffeControl{`0},System.Int32)">
            <summary>
            The ApplyUpdates function sets the parameters, signals the Apply Updates thread, blocks for the operation to complete and
            returns the learning rate used.
            </summary>
            <param name="mycaffeWorker">Specifies the worker instance of MyCaffe whos gradients are to be applied to the primary instance.</param>
            <param name="nIteration">Specifies the iteration of the gradients.</param>
            <returns>The learning rate used is returned.</returns>
        </member>
        <member name="T:MyCaffe.trainers.pg.mt.Agent`1">
            <summary>
            The Agent both builds episodes from the envrionment and trains on them using the Brain.
            </summary>
            <typeparam name="T">Specifies the base type, which should be the same base type used for MyCaffe.  This type is either <i>double</i> or <i>float</i>.</typeparam>
        </member>
        <member name="E:MyCaffe.trainers.pg.mt.Agent`1.OnApplyUpdates">
            <summary>
            The OnApplyUpdates event fires each time the Agent needs to apply its updates to the primary instance of MyCaffe.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Agent`1.#ctor(System.Int32,MyCaffe.trainers.IxTrainerCallback,MyCaffe.MyCaffeControl{`0},MyCaffe.basecode.PropertySet,MyCaffe.basecode.CryptoRandom,MyCaffe.basecode.Phase,System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="nIdx">Specifies the index of this agent.</param>
            <param name="icallback">Specifies the callback used for update notifications sent to the parent.</param>
            <param name="mycaffe">Specifies the instance of MyCaffe with the open project.</param>
            <param name="properties">Specifies the properties passed into the trainer.</param>
            <param name="random">Specifies the random number generator used.</param>
            <param name="phase">Specifies the phase of the internal network to use.</param>
            <param name="nGpuID">Specifies the GPUID on which to run this brain.</param>
            <param name="nThreadCount">Specifies the total number of agents used.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Agent`1.Dispose">
            <summary>
            Release all resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Agent`1.doWork(System.Object)">
            <summary>
            This is the main agent thread that runs the agent.
            </summary>
            <param name="arg">Specifies the agent thread start arguments.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Agent`1.Run(System.Int32)">
            <summary>
            Run a single action on the model.
            </summary>
            <param name="nDelay">Specifies the delay between the reset and the data grab.</param>
            <returns>A tuple containing the action and action count is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Agent`1.Run(System.Int32,System.String@)">
            <summary>
            Run the action on a set number of iterations and return the results with no training.
            </summary>
            <param name="nIterations">Specifies the iterations to run.</param>
            <param name="type">Specifies the type of data returned in the byte stream.</param>
            <returns>A byte stream of the results is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Agent`1.Run(MyCaffe.basecode.Phase,System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            The Run method provides the main 'actor' loop that performs the following steps:
            1.) get state
            2.) build experience
            3.) create policy gradients
            4.) train on experiences
            </summary>
            <param name="phase">Specifies the phae.</param>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <param name="step">Specifies the training step to take, if any.  This is only used when debugging.</param>
        </member>
        <member name="T:MyCaffe.trainers.pg.mt.Brain`1">
            <summary>
            The Brain uses the instance of MyCaffe (e.g. the open project) to run new actions and train the network.
            </summary>
            <typeparam name="T">Specifies the base type, which should be the same base type used for MyCaffe.  This type is either <i>double</i> or <i>float</i>.</typeparam>
        </member>
        <member name="E:MyCaffe.trainers.pg.mt.Brain`1.OnApplyUpdate">
            <summary>
            The OnApplyUpdate event fires when the Brain needs to apply its gradients to the primary instance of MyCaffe.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Brain`1.#ctor(MyCaffe.MyCaffeControl{`0},MyCaffe.basecode.PropertySet,MyCaffe.basecode.CryptoRandom,MyCaffe.basecode.Phase,System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="mycaffe">Specifies the instance of MyCaffe assoiated with the open project - when using more than one Brain, this is the master project.</param>
            <param name="properties">Specifies the properties passed into the trainer.</param>
            <param name="random">Specifies the random number generator used.</param>
            <param name="phase">Specifies the phase under which to run.</param>
            <param name="nGpuID">Specifies the GPUID on which to run this brain.</param>
            <param name="nThreadCount">Specifies the total number of threads used.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Brain`1.Create">
            <summary>
            Create the Brain CUDA objects - this is called on the thread from which the Brain runs.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Brain`1.Dispose">
            <summary>
            Release all resources used by the Brain.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.Brain`1.RecurrentSequenceLength">
            <summary>
            Returns the recurrent sequence length detected when training a recurrent network, otherwise 0 is returned.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.Brain`1.OutputLog">
            <summary>
            Returns the primary MyCaffe output log for writing output information.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.Brain`1.UsesSoftMax">
            <summary>
            Returns <i>true</i> if the current model uses a SoftMax, <i>false</i> otherwise.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Brain`1.Reshape(MyCaffe.trainers.pg.mt.Memory)">
            <summary>
            Reshape all Blobs used based on the Memory specified.
            </summary>
            <param name="mem">Specifies the Memory to reshape on.</param>
            <returns>The number of ActionProbs is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Brain`1.SetDiscountedR(System.Single[])">
            <summary>
            Sets the discounted returns in the Discounted Returns Blob.
            </summary>
            <param name="rg">Specifies the discounted return values.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Brain`1.SetActionProbabilities(System.Single[])">
            <summary>
            Set the action probabilities in the Policy Gradient Blob.
            </summary>
            <param name="rg">Specifies the action probabilities (Aprob) values.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Brain`1.SetActionOneHotVectors(System.Single[])">
            <summary>
            Set the action one-hot vectors in the Action OneHot Vector Blob.
            </summary>
            <param name="rg">Specifies the action one-hot vector values.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Brain`1.SetData(System.Collections.Generic.List{MyCaffe.basecode.Datum},System.Collections.Generic.List{MyCaffe.basecode.Datum})">
            <summary>
            Add the data to the model by adding it to the MemoryData layer.
            </summary>
            <param name="rgData">Specifies the data to add.</param>
            <param name="rgClip">Specifies the clip data to add if any exists.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Brain`1.getDataArgs(MyCaffe.basecode.Phase,System.Int32,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Returns the GetDataArgs used to retrieve new data from the envrionment implemented by derived parent trainer.
            </summary>
            <param name="phase">Specifies the phase under which to get the data.</param>
            <param name="nIdx">Specifies the envrionment index.</param>
            <param name="nAction">Specifies the action to run, or -1 to reset the environment.</param>
            <param name="bResetOverride">Optionally, specifies to reset the environment when <i>true</i> (default = <i>null</i>).</param>
            <returns>A new GetDataArgs is returned.</returns>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.Brain`1.LastLoss">
            <summary>
            Return the last loss received.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.Brain`1.LearningRate">
            <summary>
            Return the learning rate used.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.Brain`1.Log">
            <summary>
            Returns the output log.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.Brain`1.Cancel">
            <summary>
            Returns the Cancel event used to cancel  all MyCaffe tasks.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Brain`1.Preprocess(MyCaffe.trainers.StateBase,System.Boolean)">
            <summary>
            Preprocesses the data.
            </summary>
            <param name="s">Specifies the state and data to use.</param>
            <param name="bUseRawInput">Specifies whether or not to use the raw data <i>true</i>, or a difference of the current and previous data <i>false</i> (default = <i>false</i>).</param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Brain`1.act(MyCaffe.basecode.SimpleDatum,MyCaffe.basecode.SimpleDatum,System.Single[]@)">
            <summary>
            Returns the action from running the model.  The action returned is either randomly selected (when using Exploration),
            or calculated via a forward pass (when using Exploitation).
            </summary>
            <param name="sd">Specifies the data to run the model on.</param>
            <param name="sdClip">Specifies the clip data (if any exits).</param>
            <param name="rgfAprob">Returns the Aprob values calculated (NOTE: this is only used in non-Softmax models).</param>
            <returns>The action value is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Brain`1.Train(System.Int32,MyCaffe.common.TRAIN_STEP,System.Boolean)">
            <summary>
            Train the model at the current iteration.
            </summary>
            <param name="nIteration">Specifies the current iterations.  NOTE: at each 'MiniBatch' (specified as the <i>batch_size</i> in the model), the accumulated gradients are applied.</param>
            <param name="step">Specifies the training step to use (if any).  This is only used for debugging.</param>
            <param name="bApplyGradients">Apply the gradients.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Brain`1.memData_OnDataPack(System.Object,MyCaffe.layers.MemoryDataLayerPackDataArgs{`0})">
            <summary>
            Pack the data in an ordering expected by the RNN layer used.  This method is only called when using Data/Clip inputs.
            </summary>
            <param name="sender">Specifies the sender of the event, which is the MemoryDataLayer.</param>
            <param name="e">Specifies the event parameters.</param>
            <remarks>
            This method is responsible for packing the datum received into the data blob within the event arguments and do so in the
            expected LSTM ordering.
            </remarks>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Brain`1.memLoss_OnGetLoss(System.Object,MyCaffe.layers.MemoryLossLayerGetLossArgs{`0})">
            <summary>
            Calcualte the loss and initial gradients.  This event function fires, when training, during the forward pass of the MemoryLoss layer.
            </summary>
            <param name="sender">Specifies the MemoryLoss layer firing the event.</param>
            <param name="e">Specifies the arguments with the Bottom(s) flowing into the MemoryLoss layer and the loss value to be filled out.</param>
            <remarks>
            The initial gradient is calculated such that it encourages the action that was taken to be taken.
            
            When using a Sigmoid, the gradient = (action=0) ? 1 - Aprob : 0 - Aprob.
            When using a Softmax, the gradient = the SoftmaxCrossEntropyLoss backward.
            
            @see [CS231n Convolution Neural Networks for Visual Recognition](http://cs231n.github.io/neural-networks-2/#losses) by Karpathy, Stanford University
            
            Regardless of the gradient used, the gradient is then modulated by multiplying it with the discounted rewards.
            </remarks>
        </member>
        <member name="T:MyCaffe.trainers.pg.mt.MemoryCache">
            <summary>
            Contains the best memory episodes (best by highest total rewards)
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.MemoryCache.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="nMax">Specifies the memory cache size.</param>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.MemoryCache.Count">
            <summary>
            Returns the number of items in the cache.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.MemoryCache.Item(System.Int32)">
            <summary>
            Returns an item at the specified index.
            </summary>
            <param name="nIdx">Specifies the index of the item to get.</param>
            <returns>The item at the index is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.MemoryCache.Add(MyCaffe.trainers.pg.mt.Memory)">
            <summary>
            Add a new episode to the memory cache.
            </summary>
            <param name="mem"></param>
            <returns></returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.MemoryCache.Clear">
            <summary>
            Clear all items from the memory cache.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.MemoryCache.PurgeNonElite(System.Double)">
            <summary>
            Purge all non elite episodes.
            </summary>
            <param name="dfElitePercent">Specifies the pecentile of elite to keep (e.g. 0.7 specifies to keep the top 70% by reward sum).</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.MemoryCache.GetEnumerator">
            <summary>
            Returns the enumerator.
            </summary>
            <returns>The enumerator is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.MemoryCache.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator.
            </summary>
            <returns>The enumerator is returned.</returns>
        </member>
        <member name="T:MyCaffe.trainers.pg.mt.Memory">
            <summary>
            Specifies a single Memory (e.g. an episode).
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Memory.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.Memory.Count">
            <summary>
            Returns the number of memory items in the memory.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Memory.Add(MyCaffe.trainers.pg.mt.MemoryItem)">
            <summary>
            Add a new item to the memory.
            </summary>
            <remarks>
            If the MaxItems is exceeded, the list of items is sorted and the bottom item(s) are dropped.
            </remarks>
            <param name="item">Specifies the item to add.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Memory.Clear">
            <summary>
            Remove all items in the list.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.Memory.Item(System.Int32)">
            <summary>
            Get/set an item within the memory at a given index.
            </summary>
            <param name="nIdx">Specifies the index of the item to access.</param>
            <returns>The item at the index is returned.</returns>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.Memory.EpisodeNumber">
            <summary>
            Get/set the episode number of this memory.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.Memory.RewardSum">
            <summary>
            Get/set the reward sum of this memory.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Memory.GetDiscountedRewards(System.Single,System.Boolean)">
            <summary>
            Retrieve the discounted rewards for this episode.
            </summary>
            <param name="fGamma">Specifies the discounting factor.</param>
            <param name="bAllowReset">Specifies whether or not to allow resetting the running discount on non zero values.</param>
            <returns>The discounted rewards is returned (one value for each step in the episode).</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Memory.GetActionProbabilities">
            <summary>
            Retrieve the action probabilities of the episode.
            </summary>
            <remarks>
            NOTE: These values are only used in non-Softmax models.
            </remarks>
            <returns>The action probabilities (Aprob) values are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Memory.GetActionOneHotVectors">
            <summary>
            Retrieve the action one-hot vectors for the episode.
            </summary>
            <returns>The action one-hot vector values are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Memory.GetData">
            <summary>
            Retrieve the data of each step in the episode.
            </summary>
            <returns>The data of each step is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.Memory.GetClip">
            <summary>
            Returns the clip data if it exists, or <i>null</i>.
            </summary>
            <returns>The clip data is returned, or <i>null</i>.</returns>
        </member>
        <member name="T:MyCaffe.trainers.pg.mt.MemoryItem">
            <summary>
            The MemoryItem stores the information for one step in an episode.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.MemoryItem.#ctor(MyCaffe.trainers.StateBase,MyCaffe.basecode.SimpleDatum,System.Int32,System.Single[],System.Single)">
            <summary>
            The constructor.
            </summary>
            <param name="s">Contains the state and data of the step.</param>
            <param name="x">Specifies the pre-processed data of the step.</param>
            <param name="nAction">Specifies the action taken at the step.</param>
            <param name="rgfAprob">Specifies the action probability values (Aprob) of the step. NOTE: These values are only used in non-Softmax models.</param>
            <param name="fReward">Specifies the reward for taking the action.</param>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.MemoryItem.State">
            <summary>
            Returns the state and data of this episode step.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.MemoryItem.Data">
            <summary>
            Returns the pre-processed data (run through the model) of this episode step.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.MemoryItem.Action">
            <summary>
            Returns the action of this episode step.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.MemoryItem.Reward">
            <summary>
            Returns the reward for taking the action in this episode step.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.pg.mt.MemoryItem.Aprob">
            <summary>
            Returns the action probabilities which are only used with non-Softmax models.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.mt.MemoryItem.ToString">
            <summary>
            Returns the string representation of this episode step.
            </summary>
            <returns>The string representation is returned.</returns>
        </member>
        <member name="T:MyCaffe.trainers.pg.st.TrainerPG`1">
            <summary>
            The TrainerPG implements a simple Policy Gradient trainer inspired by Andrej Karpathy's blog posed referenced. 
            </summary>
            @see 1. [Deep Reinforcement Learning: Pong from Pixels](http://karpathy.github.io/2016/05/31/rl/), by Andrej Karpathy, 2016, Github.io
            @see 2. [GitHub: karpathy/pg-pong.py](https://gist.github.com/karpathy/a4166c7fe253700972fcbc77e4ea32c5), by Andrej Karpathy, 2016, Github
            @see 3. [CS231n Convolution Neural Networks for Visual Recognition](http://cs231n.github.io/neural-networks-2/#losses) by Karpathy, Stanford
            @see 4. [MyCaffe: A Complete C# Re-Write of Caffe with Reinforcement Learning](https://arxiv.org/abs/1810.02272) by D. Brown, 2018, arXiv
            <remarks></remarks>
        </member>
        <member name="M:MyCaffe.trainers.pg.st.TrainerPG`1.#ctor(MyCaffe.MyCaffeControl{`0},MyCaffe.basecode.PropertySet,MyCaffe.basecode.CryptoRandom,MyCaffe.trainers.IxTrainerCallback)">
            <summary>
            The constructor.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use for learning and prediction.</param>
            <param name="properties">Specifies the property set containing the key/value pairs of property settings.</param>
            <param name="random">Specifies a Random number generator used for random selection.</param>
            <param name="icallback">Specifies the callback for parent notifications and queries.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.st.TrainerPG`1.Dispose">
            <summary>
            Releases all resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.st.TrainerPG`1.Initialize">
            <summary>
            Initialize the trainer.
            </summary>
            <returns>Returns <i>true</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.st.TrainerPG`1.Shutdown(System.Int32)">
            <summary>
            Shutdown the trainer.
            </summary>
            <param name="nWait">Specifies a wait in ms. for the shutdown to complete.</param>
            <returns>Returns <i>true</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.st.TrainerPG`1.RunOne(System.Int32)">
            <summary>
            Run a single cycle on the environment after the delay.
            </summary>
            <param name="nDelay">Specifies a delay to wait before running.</param>
            <returns>The results of the run containing the action are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.st.TrainerPG`1.Run(System.Int32,System.String,System.String@)">
            <summary>
            Run a set of iterations and return the resuts.
            </summary>
            <param name="nN">Specifies the number of samples to run.</param>
            <param name="strRunProperties">Optionally specifies properties to use when running.</param>
            <param name="type">Returns the data type contained in the byte stream.</param>
            <returns>The results of the run containing the action are returned as a byte stream.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.st.TrainerPG`1.Test(System.Int32,MyCaffe.trainers.ITERATOR_TYPE)">
            <summary>
            Run the test cycle - currently this is not implemented.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <returns>A value of <i>true</i> is returned when handled, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.st.TrainerPG`1.Train(System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            Train the network using a modified PG training algorithm optimized for GPU use.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <param name="step">Specifies the stepping mode to use (when debugging).</param>
            <returns>A value of <i>true</i> is returned when handled, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.st.Agent`1.Run(System.Int32,System.String@)">
            <summary>
            Run a set of iterations and return the resuts.
            </summary>
            <param name="nIterations">Specifies the number of iterations to run.</param>
            <param name="type">Returns the data type contained in the byte stream.</param>
            <returns>The results of the run containing the action are returned as a byte stream.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.st.Agent`1.Run(MyCaffe.basecode.Phase,System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            The Run method provides the main 'actor' loop that performs the following steps:
            1.) get state
            2.) build experience
            3.) create policy gradients
            4.) train on experiences
            </summary>
            <param name="phase">Specifies the phae.</param>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <param name="step">Specifies the training step to take, if any.  This is only used when debugging.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.st.Brain`1.memData_OnDataPack(System.Object,MyCaffe.layers.MemoryDataLayerPackDataArgs{`0})">
            <summary>
            Pack the data in an ordering expected by the RNN layer used.  This method is only called when using Data/Clip inputs.
            </summary>
            <param name="sender">Specifies the sender of the event, which is the MemoryDataLayer.</param>
            <param name="e">Specifies the event parameters.</param>
            <remarks>
            This method is responsible for packing the datum received into the data blob within the event arguments and do so in the
            expected LSTM ordering.
            </remarks>
        </member>
        <member name="M:MyCaffe.trainers.pg.st.Brain`1.memLoss_OnGetLoss(System.Object,MyCaffe.layers.MemoryLossLayerGetLossArgs{`0})">
            <summary>
            Calcualte the loss and initial gradients.
            </summary>
            <param name="sender">Specifies the MemoryLoss layer firing the event.</param>
            <param name="e">Specifies the arguments with the Bottom(s) flowing into the MemoryLoss layer and the loss value to be filled out.</param>
            <remarks>
            The initial gradient is calculated such that it encourages the action that was taken to be taken.
            
            When using a Sigmoid, the gradient = (action=0) ? 1 - Aprob : 0 - Aprob.
            When using a Softmax, the gradient = the SoftmaxCrossEntropyLoss backward.
            
            @see [CS231n Convolution Neural Networks for Visual Recognition](http://cs231n.github.io/neural-networks-2/#losses) by Karpathy, Stanford University
            
            Regardless of the gradient used, the gradient is then modulated by multiplying it with the discounted rewards.
            </remarks>
        </member>
        <member name="P:MyCaffe.trainers.pg.st.MemoryItem.Aprob">
            <summary>
            Returns the action probabilities which are either a single Sigmoid output, or a set from a Softmax output.
            </summary>
        </member>
        <member name="T:MyCaffe.trainers.pg.simple.TrainerPG`1">
            <summary>
            The TrainerPG implements a simple Policy Gradient trainer inspired by Andrej Karpathy's blog posed referenced. 
            </summary>
            @see 1. [Deep Reinforcement Learning: Pong from Pixels](http://karpathy.github.io/2016/05/31/rl/), by Andrej Karpathy, 2016, Github.io
            @see 2. [GitHub: karpathy/pg-pong.py](https://gist.github.com/karpathy/a4166c7fe253700972fcbc77e4ea32c5), by Andrej Karpathy, 2016, Github
            @see 3. [CS231n Convolution Neural Networks for Visual Recognition](http://cs231n.github.io/neural-networks-2/#losses) by Karpathy, Stanford
            @see 4. [MyCaffe: A Complete C# Re-Write of Caffe with Reinforcement Learning](https://arxiv.org/abs/1810.02272) by D. Brown, 2018, arXiv
            <remarks></remarks>
        </member>
        <member name="M:MyCaffe.trainers.pg.simple.TrainerPG`1.#ctor(MyCaffe.MyCaffeControl{`0},MyCaffe.basecode.PropertySet,MyCaffe.basecode.CryptoRandom,MyCaffe.trainers.IxTrainerCallback)">
            <summary>
            The constructor.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use for learning and prediction.</param>
            <param name="properties">Specifies the property set containing the key/value pairs of property settings.</param>
            <param name="random">Specifies a Random number generator used for random selection.</param>
            <param name="icallback">Specifies the callback for parent notifications and queries.</param>
        </member>
        <member name="M:MyCaffe.trainers.pg.simple.TrainerPG`1.Dispose">
            <summary>
            Releases all resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.pg.simple.TrainerPG`1.Initialize">
            <summary>
            Initialize the trainer.
            </summary>
            <returns>Returns <i>true</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.simple.TrainerPG`1.Shutdown(System.Int32)">
            <summary>
            Shutdown the trainer.
            </summary>
            <param name="nWait">Specifies a wait in ms. for the shutdown to complete.</param>
            <returns>Returns <i>true</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.simple.TrainerPG`1.RunOne(System.Int32)">
            <summary>
            Run a single cycle on the environment after the delay.
            </summary>
            <param name="nDelay">Specifies a delay to wait before running.</param>
            <returns>The results of the run containing the action are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.simple.TrainerPG`1.Run(System.Int32,System.String,System.String@)">
            <summary>
            Run a set of iterations and return the resuts.
            </summary>
            <param name="nN">Specifies the number of samples to run.</param>
            <param name="strRunProperties">Optionally specifies properties to use when running.</param>
            <param name="type">Returns the data type contained in the byte stream.</param>
            <returns>The results of the run containing the action are returned as a byte stream.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.simple.TrainerPG`1.Test(System.Int32,MyCaffe.trainers.ITERATOR_TYPE)">
            <summary>
            Run the test cycle - currently this is not implemented.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <returns>A value of <i>true</i> is returned when handled, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.simple.TrainerPG`1.Train(System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            Train the network using a modified PG training algorithm optimized for GPU use.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <param name="step">Specifies the stepping mode to use (when debugging).</param>
            <returns>A value of <i>true</i> is returned when handled, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.trainers.pg.simple.Agent`1.Run(MyCaffe.basecode.Phase,System.Int32,MyCaffe.trainers.ITERATOR_TYPE)">
            <summary>
            The Run method provides the main 'actor' loop that performs the following steps:
            1.) get state
            2.) build experience
            3.) create policy gradients
            4.) train on experiences
            </summary>
            <param name="phase">Specifies the phae.</param>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
        </member>
        <member name="P:MyCaffe.trainers.pg.simple.MemoryItem.dlogps">
            <summary>
            Gradient that encourages the action that was taken to be taken.
            </summary>
            <remarks>
            @see [CS231n Convolution Neural Networks for Visual Recognition](http://cs231n.github.io/neural-networks-2/#losses) by Karpathy, Stanford
            </remarks>
        </member>
        <member name="T:MyCaffe.trainers.rnn.simple.TrainerRNN`1">
            <summary>
            The TrainerRNN implements a simple RNN trainer inspired by adepierre's GitHub site  referenced. 
            </summary>
            @see 1. [The Unreasonable Effectiveness of Recurrent Neural Networks](http://karpathy.github.io/2015/05/21/rnn-effectiveness/), by Andrej Karpathy, 2015, Github.io
            @see 2. [GitHub: adepierre/caffe-char-rnn](https://github.com/adepierre/caffe-char-rnn), by adepierre, 2017, Github
            @see 4. [MyCaffe: A Complete C# Re-Write of Caffe with Reinforcement Learning](https://arxiv.org/abs/1810.02272) by D. Brown, 2018, arXiv
            <remarks></remarks>
        </member>
        <member name="M:MyCaffe.trainers.rnn.simple.TrainerRNN`1.#ctor(MyCaffe.MyCaffeControl{`0},MyCaffe.basecode.PropertySet,MyCaffe.basecode.CryptoRandom,MyCaffe.trainers.IxTrainerCallback,MyCaffe.basecode.BucketCollection,System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="mycaffe">Specifies the MyCaffeControl to use for learning and prediction.</param>
            <param name="properties">Specifies the property set containing the key/value pairs of property settings.</param>
            <param name="random">Specifies the random number generator to use.</param>
            <param name="icallback">Specifies the callback for parent notifications and queries.</param>
            <param name="rgVocabulary">Specifies the vocabulary to use.</param>
            <param name="bUsePreloadData">Specifies whether or not to use the preloaded data, and if not, to use dynamic data.</param>
        </member>
        <member name="M:MyCaffe.trainers.rnn.simple.TrainerRNN`1.Dispose">
            <summary>
            Releases all resources used.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.rnn.simple.TrainerRNN`1.Initialize">
            <summary>
            Initialize the trainer.
            </summary>
            <returns>Returns <i>true</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.rnn.simple.TrainerRNN`1.Shutdown(System.Int32)">
            <summary>
            Shutdown the trainer.
            </summary>
            <param name="nWait">Specifies a wait in ms. for the shutdown to complete.</param>
            <returns>Returns <i>true</i>.</returns>
        </member>
        <member name="M:MyCaffe.trainers.rnn.simple.TrainerRNN`1.Run(System.Int32,System.String)">
            <summary>
            Run a single cycle on the environment after the delay.
            </summary>
            <param name="nN">specifies the number of samples to run.</param>
            <param name="strRunProperties">Optionally specifies properties to use when running.</param>
            <returns>The results of the run containing the action are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.rnn.simple.TrainerRNN`1.Run(System.Int32,System.String,System.String@)">
            <summary>
            Run a single cycle on the environment after the delay.
            </summary>
            <param name="nN">Specifies the number of samples to run.</param>
            <param name="strRunProperties">Optionally specifies properties to use when running.</param>
            <param name="type">Returns the data type contained in the byte stream.</param>
            <returns>The results of the run containing the action are returned as a byte stream.</returns>
        </member>
        <member name="M:MyCaffe.trainers.rnn.simple.TrainerRNN`1.Test(System.Int32,MyCaffe.trainers.ITERATOR_TYPE)">
            <summary>
            Run the test cycle - currently this is not implemented.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <returns>A value of <i>true</i> is returned when handled, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.trainers.rnn.simple.TrainerRNN`1.Train(System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            Train the network using a modified PG training algorithm optimized for GPU use.
            </summary>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (default = ITERATION).</param>
            <param name="step">Specifies the stepping mode to use (when debugging).</param>
            <returns>A value of <i>true</i> is returned when handled, <i>false</i> otherwise.</returns>
        </member>
        <member name="M:MyCaffe.trainers.rnn.simple.Agent`1.Run(MyCaffe.basecode.Phase,System.Int32,MyCaffe.trainers.ITERATOR_TYPE,MyCaffe.common.TRAIN_STEP)">
            <summary>
            The Run method provides the main 'actor' loop that performs the following steps:
            1.) Feed data into the network.
            2.) either Test the network...
            3.) ... or Train the network.
            </summary>
            <param name="phase">Specifies the phae.</param>
            <param name="nN">Specifies the number of iterations (based on the ITERATION_TYPE) to run, or -1 to ignore.</param>
            <param name="type">Specifies the iteration type (required = ITERATION).</param>
            <param name="step">Specifies the training step (used only during debugging).</param>
            <returns>The vocabulary built up during training and testing is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.rnn.simple.Agent`1.Run(System.Int32)">
            <summary>
            The Run method provides the main 'actor' that runs data through the trained network.
            </summary>
            <param name="nN">specifies the number of samples to run.</param>
            <returns>The results of the run are returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.rnn.simple.Agent`1.Run(System.Int32,System.String@)">
            <summary>
            The Run method provides the main 'actor' that runs data through the trained network.
            </summary>
            <param name="nN">specifies the number of samples to run.</param>
            <param name="type">Returns the data type contained in the byte stream.</param>
            <returns>The results of the run are returned in the native format used by the CustomQuery.</returns>
        </member>
        <member name="T:MyCaffe.trainers.StateBase">
            <summary>
            The StateBase is the base class for the state of each observation - this is defined by actual trainer that overrides the MyCaffeCustomTrainer.
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.StateBase.#ctor(System.Int32)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.StateBase.IsValid">
            <summary>
            Get/set whether or not the state is valid.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.StateBase.Reward">
            <summary>
            Get/set the reward of the state.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.StateBase.Done">
            <summary>
            Get/set whether the state is done or not.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.StateBase.ActionCount">
            <summary>
            Returns the number of actions.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.StateBase.Data">
            <summary>
            Returns other data associated with the state.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.StateBase.RawState">
            <summary>
            Get/set the raw state data.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.StateBase.Clip">
            <summary>
            Returns the clip data assoicated with the state. 
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.StateBase.RawClip">
            <summary>
            Get/set the raw clip data.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.StateBase.Label">
            <summary>
            Get/set the label data associated with the state.  This field is optional.
            </summary>
        </member>
        <member name="P:MyCaffe.trainers.StateBase.RawImage">
            <summary>
            Get/set the image (if any exists)
            </summary>
        </member>
        <member name="M:MyCaffe.trainers.StateBase.Clone">
            <summary>
            Copy the state base information.
            </summary>
            <returns>A new state base is returned.</returns>
        </member>
        <member name="M:MyCaffe.trainers.StateBase.ToString">
            <summary>
            Return the string representation of the state.
            </summary>
            <returns>The string representation is returned.</returns>
        </member>
    </members>
</doc>
